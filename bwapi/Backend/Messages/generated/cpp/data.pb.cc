// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_data_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Force;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Region;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Bullet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StaticMapData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Unit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_GameData;
}  // namespace protobuf_data_2eproto
namespace bwapi {
namespace data {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class StaticMapDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticMapData>
      _instance;
} _StaticMapData_default_instance_;
class MapDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapData>
      _instance;
} _MapData_default_instance_;
class GameDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameData>
      _instance;
} _GameData_default_instance_;
class PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Player>
      _instance;
} _Player_default_instance_;
class UnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unit>
      _instance;
} _Unit_default_instance_;
class RegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Region>
      _instance;
} _Region_default_instance_;
class BulletDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bullet>
      _instance;
} _Bullet_default_instance_;
class ForceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Force>
      _instance;
} _Force_default_instance_;
class GameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Game>
      _instance;
} _Game_default_instance_;
}  // namespace data
}  // namespace bwapi
namespace protobuf_data_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Point_default_instance_;
    new (ptr) ::bwapi::data::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsStaticMapData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_StaticMapData_default_instance_;
    new (ptr) ::bwapi::data::StaticMapData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::StaticMapData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StaticMapData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStaticMapData}, {
      &protobuf_data_2eproto::scc_info_Point.base,}};

static void InitDefaultsMapData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_MapData_default_instance_;
    new (ptr) ::bwapi::data::MapData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::MapData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapData}, {}};

static void InitDefaultsGameData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_GameData_default_instance_;
    new (ptr) ::bwapi::data::GameData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::GameData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_GameData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGameData}, {
      &protobuf_data_2eproto::scc_info_Point.base,
      &protobuf_data_2eproto::scc_info_StaticMapData.base,
      &protobuf_data_2eproto::scc_info_MapData.base,}};

static void InitDefaultsPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Player_default_instance_;
    new (ptr) ::bwapi::data::Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayer}, {}};

static void InitDefaultsUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Unit_default_instance_;
    new (ptr) ::bwapi::data::Unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnit}, {
      &protobuf_data_2eproto::scc_info_Point.base,}};

static void InitDefaultsRegion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Region_default_instance_;
    new (ptr) ::bwapi::data::Region();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Region::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Region =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegion}, {}};

static void InitDefaultsBullet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Bullet_default_instance_;
    new (ptr) ::bwapi::data::Bullet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Bullet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Bullet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBullet}, {
      &protobuf_data_2eproto::scc_info_Point.base,}};

static void InitDefaultsForce() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Force_default_instance_;
    new (ptr) ::bwapi::data::Force();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Force::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Force =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsForce}, {}};

static void InitDefaultsGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::data::_Game_default_instance_;
    new (ptr) ::bwapi::data::Game();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::data::Game::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Game =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsGame}, {
      &protobuf_data_2eproto::scc_info_GameData.base,
      &protobuf_data_2eproto::scc_info_Player.base,
      &protobuf_data_2eproto::scc_info_Unit.base,
      &protobuf_data_2eproto::scc_info_Region.base,
      &protobuf_data_2eproto::scc_info_Bullet.base,
      &protobuf_data_2eproto::scc_info_Force.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StaticMapData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Region.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bullet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Force.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Game.base);
}

}  // namespace protobuf_data_2eproto
namespace bwapi {
namespace data {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scale_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:bwapi.data.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scale_));
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scale = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scale(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Point)
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Point)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 scale = 3;
  if (this->scale() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scale());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Point::GetTypeName() const {
  return "bwapi.data.Point";
}


// ===================================================================

void StaticMapData::InitAsDefaultInstance() {
  ::bwapi::data::_StaticMapData_default_instance_._instance.get_mutable()->size_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticMapData::kSizeFieldNumber;
const int StaticMapData::kTilesetFieldNumber;
const int StaticMapData::kMapHashFieldNumber;
const int StaticMapData::kMapFileNameFieldNumber;
const int StaticMapData::kMapPathFieldNumber;
const int StaticMapData::kMapNameFieldNumber;
const int StaticMapData::kGroundHeightFieldNumber;
const int StaticMapData::kIsBuildableFieldNumber;
const int StaticMapData::kIsWalkableFieldNumber;
const int StaticMapData::kMapTileRegionIdFieldNumber;
const int StaticMapData::kMapSplitTilesMiniTileMaskFieldNumber;
const int StaticMapData::kMapSplitTilesRegion1FieldNumber;
const int StaticMapData::kMapSplitTilesRegion2FieldNumber;
const int StaticMapData::kStartPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticMapData::StaticMapData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_StaticMapData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.StaticMapData)
}
StaticMapData::StaticMapData(const StaticMapData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      groundheight_(from.groundheight_),
      isbuildable_(from.isbuildable_),
      iswalkable_(from.iswalkable_),
      maptileregionid_(from.maptileregionid_),
      mapsplittilesminitilemask_(from.mapsplittilesminitilemask_),
      mapsplittilesregion1_(from.mapsplittilesregion1_),
      mapsplittilesregion2_(from.mapsplittilesregion2_),
      startpositions_(from.startpositions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maphash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.maphash().size() > 0) {
    maphash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maphash_);
  }
  mapfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mapfilename().size() > 0) {
    mapfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapfilename_);
  }
  mappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mappath().size() > 0) {
    mappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mappath_);
  }
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mapname().size() > 0) {
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  if (from.has_size()) {
    size_ = new ::bwapi::data::Point(*from.size_);
  } else {
    size_ = NULL;
  }
  tileset_ = from.tileset_;
  // @@protoc_insertion_point(copy_constructor:bwapi.data.StaticMapData)
}

void StaticMapData::SharedCtor() {
  maphash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tileset_) -
      reinterpret_cast<char*>(&size_)) + sizeof(tileset_));
}

StaticMapData::~StaticMapData() {
  // @@protoc_insertion_point(destructor:bwapi.data.StaticMapData)
  SharedDtor();
}

void StaticMapData::SharedDtor() {
  maphash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mappath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete size_;
}

void StaticMapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticMapData& StaticMapData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_StaticMapData.base);
  return *internal_default_instance();
}


void StaticMapData::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.StaticMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groundheight_.Clear();
  isbuildable_.Clear();
  iswalkable_.Clear();
  maptileregionid_.Clear();
  mapsplittilesminitilemask_.Clear();
  mapsplittilesregion1_.Clear();
  mapsplittilesregion2_.Clear();
  startpositions_.Clear();
  maphash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  tileset_ = 0;
  _internal_metadata_.Clear();
}

bool StaticMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.StaticMapData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bwapi.data.Point size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tileset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tileset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mapHash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maphash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->maphash().data(), static_cast<int>(this->maphash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.StaticMapData.mapHash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mapFileName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapfilename().data(), static_cast<int>(this->mapfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.StaticMapData.mapFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mapPath = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mappath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mappath().data(), static_cast<int>(this->mappath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.StaticMapData.mapPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mapName = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapname().data(), static_cast<int>(this->mapname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.StaticMapData.mapName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 groundHeight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_groundheight())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_groundheight())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isBuildable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isbuildable())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66u, input, this->mutable_isbuildable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isWalkable = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_iswalkable())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 74u, input, this->mutable_iswalkable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mapTileRegionId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_maptileregionid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_maptileregionid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mapSplitTilesMiniTileMask = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapsplittilesminitilemask())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_mapsplittilesminitilemask())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mapSplitTilesRegion1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapsplittilesregion1())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_mapsplittilesregion1())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mapSplitTilesRegion2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapsplittilesregion2())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_mapsplittilesregion2())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Point startPositions = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_startpositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.StaticMapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.StaticMapData)
  return false;
#undef DO_
}

void StaticMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.StaticMapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bwapi.data.Point size = 1;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_size(), output);
  }

  // int32 tileset = 2;
  if (this->tileset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tileset(), output);
  }

  // string mapHash = 3;
  if (this->maphash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->maphash().data(), static_cast<int>(this->maphash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.StaticMapData.mapHash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->maphash(), output);
  }

  // string mapFileName = 4;
  if (this->mapfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapfilename().data(), static_cast<int>(this->mapfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.StaticMapData.mapFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mapfilename(), output);
  }

  // string mapPath = 5;
  if (this->mappath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mappath().data(), static_cast<int>(this->mappath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.StaticMapData.mapPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mappath(), output);
  }

  // string mapName = 6;
  if (this->mapname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapname().data(), static_cast<int>(this->mapname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.StaticMapData.mapName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mapname(), output);
  }

  // repeated int32 groundHeight = 7;
  if (this->groundheight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _groundheight_cached_byte_size_));
  }
  for (int i = 0, n = this->groundheight_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->groundheight(i), output);
  }

  // repeated bool isBuildable = 8;
  if (this->isbuildable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isbuildable_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isbuildable().data(), this->isbuildable_size(), output);
  }

  // repeated bool isWalkable = 9;
  if (this->iswalkable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _iswalkable_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->iswalkable().data(), this->iswalkable_size(), output);
  }

  // repeated uint32 mapTileRegionId = 10;
  if (this->maptileregionid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _maptileregionid_cached_byte_size_));
  }
  for (int i = 0, n = this->maptileregionid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->maptileregionid(i), output);
  }

  // repeated uint32 mapSplitTilesMiniTileMask = 11;
  if (this->mapsplittilesminitilemask_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mapsplittilesminitilemask_cached_byte_size_));
  }
  for (int i = 0, n = this->mapsplittilesminitilemask_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mapsplittilesminitilemask(i), output);
  }

  // repeated uint32 mapSplitTilesRegion1 = 12;
  if (this->mapsplittilesregion1_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mapsplittilesregion1_cached_byte_size_));
  }
  for (int i = 0, n = this->mapsplittilesregion1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mapsplittilesregion1(i), output);
  }

  // repeated uint32 mapSplitTilesRegion2 = 13;
  if (this->mapsplittilesregion2_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mapsplittilesregion2_cached_byte_size_));
  }
  for (int i = 0, n = this->mapsplittilesregion2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mapsplittilesregion2(i), output);
  }

  // repeated .bwapi.data.Point startPositions = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->startpositions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14,
      this->startpositions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.StaticMapData)
}

size_t StaticMapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.StaticMapData)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int32 groundHeight = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->groundheight_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _groundheight_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isBuildable = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->isbuildable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isbuildable_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isWalkable = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->iswalkable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _iswalkable_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 mapTileRegionId = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->maptileregionid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _maptileregionid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 mapSplitTilesMiniTileMask = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mapsplittilesminitilemask_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mapsplittilesminitilemask_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 mapSplitTilesRegion1 = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mapsplittilesregion1_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mapsplittilesregion1_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 mapSplitTilesRegion2 = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mapsplittilesregion2_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mapsplittilesregion2_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .bwapi.data.Point startPositions = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->startpositions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->startpositions(static_cast<int>(i)));
    }
  }

  // string mapHash = 3;
  if (this->maphash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->maphash());
  }

  // string mapFileName = 4;
  if (this->mapfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapfilename());
  }

  // string mapPath = 5;
  if (this->mappath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mappath());
  }

  // string mapName = 6;
  if (this->mapname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  // .bwapi.data.Point size = 1;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // int32 tileset = 2;
  if (this->tileset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tileset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticMapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StaticMapData*>(&from));
}

void StaticMapData::MergeFrom(const StaticMapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.StaticMapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groundheight_.MergeFrom(from.groundheight_);
  isbuildable_.MergeFrom(from.isbuildable_);
  iswalkable_.MergeFrom(from.iswalkable_);
  maptileregionid_.MergeFrom(from.maptileregionid_);
  mapsplittilesminitilemask_.MergeFrom(from.mapsplittilesminitilemask_);
  mapsplittilesregion1_.MergeFrom(from.mapsplittilesregion1_);
  mapsplittilesregion2_.MergeFrom(from.mapsplittilesregion2_);
  startpositions_.MergeFrom(from.startpositions_);
  if (from.maphash().size() > 0) {

    maphash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.maphash_);
  }
  if (from.mapfilename().size() > 0) {

    mapfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapfilename_);
  }
  if (from.mappath().size() > 0) {

    mappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mappath_);
  }
  if (from.mapname().size() > 0) {

    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  if (from.has_size()) {
    mutable_size()->::bwapi::data::Point::MergeFrom(from.size());
  }
  if (from.tileset() != 0) {
    set_tileset(from.tileset());
  }
}

void StaticMapData::CopyFrom(const StaticMapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.StaticMapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticMapData::IsInitialized() const {
  return true;
}

void StaticMapData::Swap(StaticMapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticMapData::InternalSwap(StaticMapData* other) {
  using std::swap;
  groundheight_.InternalSwap(&other->groundheight_);
  isbuildable_.InternalSwap(&other->isbuildable_);
  iswalkable_.InternalSwap(&other->iswalkable_);
  maptileregionid_.InternalSwap(&other->maptileregionid_);
  mapsplittilesminitilemask_.InternalSwap(&other->mapsplittilesminitilemask_);
  mapsplittilesregion1_.InternalSwap(&other->mapsplittilesregion1_);
  mapsplittilesregion2_.InternalSwap(&other->mapsplittilesregion2_);
  CastToBase(&startpositions_)->InternalSwap(CastToBase(&other->startpositions_));
  maphash_.Swap(&other->maphash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mapfilename_.Swap(&other->mapfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mappath_.Swap(&other->mappath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mapname_.Swap(&other->mapname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(size_, other->size_);
  swap(tileset_, other->tileset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string StaticMapData::GetTypeName() const {
  return "bwapi.data.StaticMapData";
}


// ===================================================================

void MapData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapData::kIsVisibleFieldNumber;
const int MapData::kIsExploredFieldNumber;
const int MapData::kHasCreepFieldNumber;
const int MapData::kIsOccupiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapData::MapData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_MapData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.MapData)
}
MapData::MapData(const MapData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      isvisible_(from.isvisible_),
      isexplored_(from.isexplored_),
      hascreep_(from.hascreep_),
      isoccupied_(from.isoccupied_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bwapi.data.MapData)
}

void MapData::SharedCtor() {
}

MapData::~MapData() {
  // @@protoc_insertion_point(destructor:bwapi.data.MapData)
  SharedDtor();
}

void MapData::SharedDtor() {
}

void MapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapData& MapData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_MapData.base);
  return *internal_default_instance();
}


void MapData::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.MapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isvisible_.Clear();
  isexplored_.Clear();
  hascreep_.Clear();
  isoccupied_.Clear();
  _internal_metadata_.Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.MapData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool isVisible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isvisible())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_isvisible())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isExplored = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isexplored())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_isexplored())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool hasCreep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_hascreep())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 26u, input, this->mutable_hascreep())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isOccupied = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isoccupied())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 34u, input, this->mutable_isoccupied())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.MapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.MapData)
  return false;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.MapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool isVisible = 1;
  if (this->isvisible_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isvisible_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isvisible().data(), this->isvisible_size(), output);
  }

  // repeated bool isExplored = 2;
  if (this->isexplored_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isexplored_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isexplored().data(), this->isexplored_size(), output);
  }

  // repeated bool hasCreep = 3;
  if (this->hascreep_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hascreep_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->hascreep().data(), this->hascreep_size(), output);
  }

  // repeated bool isOccupied = 4;
  if (this->isoccupied_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isoccupied_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isoccupied().data(), this->isoccupied_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.MapData)
}

size_t MapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.MapData)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bool isVisible = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->isvisible_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isvisible_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isExplored = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->isexplored_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isexplored_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool hasCreep = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->hascreep_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hascreep_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isOccupied = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->isoccupied_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isoccupied_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapData*>(&from));
}

void MapData::MergeFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  isvisible_.MergeFrom(from.isvisible_);
  isexplored_.MergeFrom(from.isexplored_);
  hascreep_.MergeFrom(from.hascreep_);
  isoccupied_.MergeFrom(from.isoccupied_);
}

void MapData::CopyFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  return true;
}

void MapData::Swap(MapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapData::InternalSwap(MapData* other) {
  using std::swap;
  isvisible_.InternalSwap(&other->isvisible_);
  isexplored_.InternalSwap(&other->isexplored_);
  hascreep_.InternalSwap(&other->hascreep_);
  isoccupied_.InternalSwap(&other->isoccupied_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MapData::GetTypeName() const {
  return "bwapi.data.MapData";
}


// ===================================================================

void GameData::InitAsDefaultInstance() {
  ::bwapi::data::_GameData_default_instance_._instance.get_mutable()->screensize_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_GameData_default_instance_._instance.get_mutable()->screenposition_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_GameData_default_instance_._instance.get_mutable()->staticmap_ = const_cast< ::bwapi::data::StaticMapData*>(
      ::bwapi::data::StaticMapData::internal_default_instance());
  ::bwapi::data::_GameData_default_instance_._instance.get_mutable()->map_ = const_cast< ::bwapi::data::MapData*>(
      ::bwapi::data::MapData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameData::kApiVersionFieldNumber;
const int GameData::kEngineFieldNumber;
const int GameData::kEngineVersionFieldNumber;
const int GameData::kTournamentFieldNumber;
const int GameData::kGameTypeFieldNumber;
const int GameData::kFrameCountFieldNumber;
const int GameData::kLatencyFramesFieldNumber;
const int GameData::kTurnSizeFieldNumber;
const int GameData::kGameSpeedFieldNumber;
const int GameData::kFrameSkipFieldNumber;
const int GameData::kRemainingLatencyFramesFieldNumber;
const int GameData::kLastEventTimeFieldNumber;
const int GameData::kReplayVisionPlayersFieldNumber;
const int GameData::kLatencyTimeFieldNumber;
const int GameData::kRemainingLatencyTimeFieldNumber;
const int GameData::kElapsedTimeFieldNumber;
const int GameData::kMillisecondsPerFrameFieldNumber;
const int GameData::kAverageFPSFieldNumber;
const int GameData::kCountdownTimerFieldNumber;
const int GameData::kIsPausedFieldNumber;
const int GameData::kIsInGameFieldNumber;
const int GameData::kIsMultiplayerFieldNumber;
const int GameData::kIsBattleNetFieldNumber;
const int GameData::kIsReplayFieldNumber;
const int GameData::kClientUnitSelectionFieldNumber;
const int GameData::kHasGUIFieldNumber;
const int GameData::kGameNameFieldNumber;
const int GameData::kRandomSeedFieldNumber;
const int GameData::kRegionsFieldNumber;
const int GameData::kPlayerFieldNumber;
const int GameData::kScreenSizeFieldNumber;
const int GameData::kScreenPositionFieldNumber;
const int GameData::kStaticMapFieldNumber;
const int GameData::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameData::GameData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_GameData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.GameData)
}
GameData::GameData(const GameData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      replayvisionplayers_(from.replayvisionplayers_),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.engine().size() > 0) {
    engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_);
  }
  engineversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.engineversion().size() > 0) {
    engineversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engineversion_);
  }
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamename().size() > 0) {
    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  randomseed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.randomseed().size() > 0) {
    randomseed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randomseed_);
  }
  if (from.has_screensize()) {
    screensize_ = new ::bwapi::data::Point(*from.screensize_);
  } else {
    screensize_ = NULL;
  }
  if (from.has_screenposition()) {
    screenposition_ = new ::bwapi::data::Point(*from.screenposition_);
  } else {
    screenposition_ = NULL;
  }
  if (from.has_staticmap()) {
    staticmap_ = new ::bwapi::data::StaticMapData(*from.staticmap_);
  } else {
    staticmap_ = NULL;
  }
  if (from.has_map()) {
    map_ = new ::bwapi::data::MapData(*from.map_);
  } else {
    map_ = NULL;
  }
  ::memcpy(&apiversion_, &from.apiversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&apiversion_)) + sizeof(player_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.GameData)
}

void GameData::SharedCtor() {
  engine_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engineversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomseed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&screensize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&screensize_)) + sizeof(player_));
}

GameData::~GameData() {
  // @@protoc_insertion_point(destructor:bwapi.data.GameData)
  SharedDtor();
}

void GameData::SharedDtor() {
  engine_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engineversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomseed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete screensize_;
  if (this != internal_default_instance()) delete screenposition_;
  if (this != internal_default_instance()) delete staticmap_;
  if (this != internal_default_instance()) delete map_;
}

void GameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameData& GameData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_GameData.base);
  return *internal_default_instance();
}


void GameData::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.GameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replayvisionplayers_.Clear();
  regions_.Clear();
  engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  engineversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  randomseed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && screensize_ != NULL) {
    delete screensize_;
  }
  screensize_ = NULL;
  if (GetArenaNoVirtual() == NULL && screenposition_ != NULL) {
    delete screenposition_;
  }
  screenposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && staticmap_ != NULL) {
    delete staticmap_;
  }
  staticmap_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_ != NULL) {
    delete map_;
  }
  map_ = NULL;
  ::memset(&apiversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&apiversion_)) + sizeof(player_));
  _internal_metadata_.Clear();
}

bool GameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.GameData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 apiVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apiversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string engine = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->engine().data(), static_cast<int>(this->engine().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.GameData.engine"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string engineVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engineversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->engineversion().data(), static_cast<int>(this->engineversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.GameData.engineVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tournament = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gameType = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frameCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latencyFrames = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latencyframes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turnSize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gameSpeed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 frameSkip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameskip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingLatencyFrames = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaininglatencyframes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastEventTime = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasteventtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 replayVisionPlayers = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_replayvisionplayers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 106u, input, this->mutable_replayvisionplayers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 latencyTime = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latencytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingLatencyTime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaininglatencytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 elapsedTime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 millisecondsPerFrame = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &millisecondsperframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float averageFPS = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagefps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 countdownTimer = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdowntimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPaused = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispaused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isInGame = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isingame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMultiplayer = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismultiplayer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBattleNet = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbattlenet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isReplay = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreplay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool clientUnitSelection = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientunitselection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasGUI = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgui_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameName = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamename().data(), static_cast<int>(this->gamename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.GameData.gameName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string randomSeed = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_randomseed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->randomseed().data(), static_cast<int>(this->randomseed().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.GameData.randomSeed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 regions = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_regions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 234u, input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point screenSize = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screensize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point screenPosition = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_screenposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.StaticMapData staticMap = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_staticmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.MapData map = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.GameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.GameData)
  return false;
#undef DO_
}

void GameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.GameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 apiVersion = 1;
  if (this->apiversion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->apiversion(), output);
  }

  // string engine = 2;
  if (this->engine().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->engine().data(), static_cast<int>(this->engine().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.GameData.engine");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->engine(), output);
  }

  // string engineVersion = 3;
  if (this->engineversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->engineversion().data(), static_cast<int>(this->engineversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.GameData.engineVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->engineversion(), output);
  }

  // bool tournament = 4;
  if (this->tournament() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tournament(), output);
  }

  // int32 gameType = 5;
  if (this->gametype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gametype(), output);
  }

  // int32 frameCount = 6;
  if (this->framecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->framecount(), output);
  }

  // int32 latencyFrames = 7;
  if (this->latencyframes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->latencyframes(), output);
  }

  // int32 turnSize = 8;
  if (this->turnsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->turnsize(), output);
  }

  // int32 gameSpeed = 9;
  if (this->gamespeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gamespeed(), output);
  }

  // int32 frameSkip = 10;
  if (this->frameskip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->frameskip(), output);
  }

  // int32 remainingLatencyFrames = 11;
  if (this->remaininglatencyframes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->remaininglatencyframes(), output);
  }

  // int32 lastEventTime = 12;
  if (this->lasteventtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lasteventtime(), output);
  }

  // repeated int32 replayVisionPlayers = 13;
  if (this->replayvisionplayers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _replayvisionplayers_cached_byte_size_));
  }
  for (int i = 0, n = this->replayvisionplayers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->replayvisionplayers(i), output);
  }

  // int32 latencyTime = 14;
  if (this->latencytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->latencytime(), output);
  }

  // int32 remainingLatencyTime = 15;
  if (this->remaininglatencytime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->remaininglatencytime(), output);
  }

  // int32 elapsedTime = 16;
  if (this->elapsedtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->elapsedtime(), output);
  }

  // int32 millisecondsPerFrame = 17;
  if (this->millisecondsperframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->millisecondsperframe(), output);
  }

  // float averageFPS = 18;
  if (this->averagefps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->averagefps(), output);
  }

  // int32 countdownTimer = 19;
  if (this->countdowntimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->countdowntimer(), output);
  }

  // bool isPaused = 20;
  if (this->ispaused() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->ispaused(), output);
  }

  // bool isInGame = 21;
  if (this->isingame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isingame(), output);
  }

  // bool isMultiplayer = 22;
  if (this->ismultiplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->ismultiplayer(), output);
  }

  // bool isBattleNet = 23;
  if (this->isbattlenet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isbattlenet(), output);
  }

  // bool isReplay = 24;
  if (this->isreplay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->isreplay(), output);
  }

  // bool clientUnitSelection = 25;
  if (this->clientunitselection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->clientunitselection(), output);
  }

  // bool hasGUI = 26;
  if (this->hasgui() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->hasgui(), output);
  }

  // string gameName = 27;
  if (this->gamename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamename().data(), static_cast<int>(this->gamename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.GameData.gameName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->gamename(), output);
  }

  // string randomSeed = 28;
  if (this->randomseed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->randomseed().data(), static_cast<int>(this->randomseed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.GameData.randomSeed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->randomseed(), output);
  }

  // repeated int32 regions = 29;
  if (this->regions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(29, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _regions_cached_byte_size_));
  }
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->regions(i), output);
  }

  // int32 player = 30;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->player(), output);
  }

  // .bwapi.data.Point screenSize = 31;
  if (this->has_screensize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->_internal_screensize(), output);
  }

  // .bwapi.data.Point screenPosition = 32;
  if (this->has_screenposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->_internal_screenposition(), output);
  }

  // .bwapi.data.StaticMapData staticMap = 33;
  if (this->has_staticmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->_internal_staticmap(), output);
  }

  // .bwapi.data.MapData map = 34;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->_internal_map(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.GameData)
}

size_t GameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.GameData)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int32 replayVisionPlayers = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->replayvisionplayers_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _replayvisionplayers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 regions = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->regions_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _regions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string engine = 2;
  if (this->engine().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->engine());
  }

  // string engineVersion = 3;
  if (this->engineversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->engineversion());
  }

  // string gameName = 27;
  if (this->gamename().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamename());
  }

  // string randomSeed = 28;
  if (this->randomseed().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->randomseed());
  }

  // .bwapi.data.Point screenSize = 31;
  if (this->has_screensize()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *screensize_);
  }

  // .bwapi.data.Point screenPosition = 32;
  if (this->has_screenposition()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *screenposition_);
  }

  // .bwapi.data.StaticMapData staticMap = 33;
  if (this->has_staticmap()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *staticmap_);
  }

  // .bwapi.data.MapData map = 34;
  if (this->has_map()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // int32 apiVersion = 1;
  if (this->apiversion() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->apiversion());
  }

  // int32 gameType = 5;
  if (this->gametype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gametype());
  }

  // int32 frameCount = 6;
  if (this->framecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->framecount());
  }

  // int32 latencyFrames = 7;
  if (this->latencyframes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latencyframes());
  }

  // int32 turnSize = 8;
  if (this->turnsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turnsize());
  }

  // int32 gameSpeed = 9;
  if (this->gamespeed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gamespeed());
  }

  // int32 frameSkip = 10;
  if (this->frameskip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frameskip());
  }

  // int32 remainingLatencyFrames = 11;
  if (this->remaininglatencyframes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaininglatencyframes());
  }

  // int32 lastEventTime = 12;
  if (this->lasteventtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasteventtime());
  }

  // int32 latencyTime = 14;
  if (this->latencytime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->latencytime());
  }

  // int32 remainingLatencyTime = 15;
  if (this->remaininglatencytime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remaininglatencytime());
  }

  // int32 elapsedTime = 16;
  if (this->elapsedtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elapsedtime());
  }

  // bool tournament = 4;
  if (this->tournament() != 0) {
    total_size += 1 + 1;
  }

  // bool isPaused = 20;
  if (this->ispaused() != 0) {
    total_size += 2 + 1;
  }

  // bool isInGame = 21;
  if (this->isingame() != 0) {
    total_size += 2 + 1;
  }

  // bool isMultiplayer = 22;
  if (this->ismultiplayer() != 0) {
    total_size += 2 + 1;
  }

  // int32 millisecondsPerFrame = 17;
  if (this->millisecondsperframe() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->millisecondsperframe());
  }

  // float averageFPS = 18;
  if (this->averagefps() != 0) {
    total_size += 2 + 4;
  }

  // int32 countdownTimer = 19;
  if (this->countdowntimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->countdowntimer());
  }

  // bool isBattleNet = 23;
  if (this->isbattlenet() != 0) {
    total_size += 2 + 1;
  }

  // bool isReplay = 24;
  if (this->isreplay() != 0) {
    total_size += 2 + 1;
  }

  // bool clientUnitSelection = 25;
  if (this->clientunitselection() != 0) {
    total_size += 2 + 1;
  }

  // bool hasGUI = 26;
  if (this->hasgui() != 0) {
    total_size += 2 + 1;
  }

  // int32 player = 30;
  if (this->player() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GameData*>(&from));
}

void GameData::MergeFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.GameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replayvisionplayers_.MergeFrom(from.replayvisionplayers_);
  regions_.MergeFrom(from.regions_);
  if (from.engine().size() > 0) {

    engine_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engine_);
  }
  if (from.engineversion().size() > 0) {

    engineversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engineversion_);
  }
  if (from.gamename().size() > 0) {

    gamename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamename_);
  }
  if (from.randomseed().size() > 0) {

    randomseed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.randomseed_);
  }
  if (from.has_screensize()) {
    mutable_screensize()->::bwapi::data::Point::MergeFrom(from.screensize());
  }
  if (from.has_screenposition()) {
    mutable_screenposition()->::bwapi::data::Point::MergeFrom(from.screenposition());
  }
  if (from.has_staticmap()) {
    mutable_staticmap()->::bwapi::data::StaticMapData::MergeFrom(from.staticmap());
  }
  if (from.has_map()) {
    mutable_map()->::bwapi::data::MapData::MergeFrom(from.map());
  }
  if (from.apiversion() != 0) {
    set_apiversion(from.apiversion());
  }
  if (from.gametype() != 0) {
    set_gametype(from.gametype());
  }
  if (from.framecount() != 0) {
    set_framecount(from.framecount());
  }
  if (from.latencyframes() != 0) {
    set_latencyframes(from.latencyframes());
  }
  if (from.turnsize() != 0) {
    set_turnsize(from.turnsize());
  }
  if (from.gamespeed() != 0) {
    set_gamespeed(from.gamespeed());
  }
  if (from.frameskip() != 0) {
    set_frameskip(from.frameskip());
  }
  if (from.remaininglatencyframes() != 0) {
    set_remaininglatencyframes(from.remaininglatencyframes());
  }
  if (from.lasteventtime() != 0) {
    set_lasteventtime(from.lasteventtime());
  }
  if (from.latencytime() != 0) {
    set_latencytime(from.latencytime());
  }
  if (from.remaininglatencytime() != 0) {
    set_remaininglatencytime(from.remaininglatencytime());
  }
  if (from.elapsedtime() != 0) {
    set_elapsedtime(from.elapsedtime());
  }
  if (from.tournament() != 0) {
    set_tournament(from.tournament());
  }
  if (from.ispaused() != 0) {
    set_ispaused(from.ispaused());
  }
  if (from.isingame() != 0) {
    set_isingame(from.isingame());
  }
  if (from.ismultiplayer() != 0) {
    set_ismultiplayer(from.ismultiplayer());
  }
  if (from.millisecondsperframe() != 0) {
    set_millisecondsperframe(from.millisecondsperframe());
  }
  if (from.averagefps() != 0) {
    set_averagefps(from.averagefps());
  }
  if (from.countdowntimer() != 0) {
    set_countdowntimer(from.countdowntimer());
  }
  if (from.isbattlenet() != 0) {
    set_isbattlenet(from.isbattlenet());
  }
  if (from.isreplay() != 0) {
    set_isreplay(from.isreplay());
  }
  if (from.clientunitselection() != 0) {
    set_clientunitselection(from.clientunitselection());
  }
  if (from.hasgui() != 0) {
    set_hasgui(from.hasgui());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
}

void GameData::CopyFrom(const GameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.GameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameData::IsInitialized() const {
  return true;
}

void GameData::Swap(GameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameData::InternalSwap(GameData* other) {
  using std::swap;
  replayvisionplayers_.InternalSwap(&other->replayvisionplayers_);
  regions_.InternalSwap(&other->regions_);
  engine_.Swap(&other->engine_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  engineversion_.Swap(&other->engineversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gamename_.Swap(&other->gamename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  randomseed_.Swap(&other->randomseed_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(screensize_, other->screensize_);
  swap(screenposition_, other->screenposition_);
  swap(staticmap_, other->staticmap_);
  swap(map_, other->map_);
  swap(apiversion_, other->apiversion_);
  swap(gametype_, other->gametype_);
  swap(framecount_, other->framecount_);
  swap(latencyframes_, other->latencyframes_);
  swap(turnsize_, other->turnsize_);
  swap(gamespeed_, other->gamespeed_);
  swap(frameskip_, other->frameskip_);
  swap(remaininglatencyframes_, other->remaininglatencyframes_);
  swap(lasteventtime_, other->lasteventtime_);
  swap(latencytime_, other->latencytime_);
  swap(remaininglatencytime_, other->remaininglatencytime_);
  swap(elapsedtime_, other->elapsedtime_);
  swap(tournament_, other->tournament_);
  swap(ispaused_, other->ispaused_);
  swap(isingame_, other->isingame_);
  swap(ismultiplayer_, other->ismultiplayer_);
  swap(millisecondsperframe_, other->millisecondsperframe_);
  swap(averagefps_, other->averagefps_);
  swap(countdowntimer_, other->countdowntimer_);
  swap(isbattlenet_, other->isbattlenet_);
  swap(isreplay_, other->isreplay_);
  swap(clientunitselection_, other->clientunitselection_);
  swap(hasgui_, other->hasgui_);
  swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GameData::GetTypeName() const {
  return "bwapi.data.GameData";
}


// ===================================================================

void Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kIdFieldNumber;
const int Player::kNameFieldNumber;
const int Player::kRaceFieldNumber;
const int Player::kTypeFieldNumber;
const int Player::kForceFieldNumber;
const int Player::kIsAllyFieldNumber;
const int Player::kIsEnemyFieldNumber;
const int Player::kIsNeutralFieldNumber;
const int Player::kStartLocationXFieldNumber;
const int Player::kStartLocationYFieldNumber;
const int Player::kIsVictoriousFieldNumber;
const int Player::kIsDefeatedFieldNumber;
const int Player::kLeftGameFieldNumber;
const int Player::kIsParticipatingFieldNumber;
const int Player::kMineralsFieldNumber;
const int Player::kGasFieldNumber;
const int Player::kGatheredMineralsFieldNumber;
const int Player::kGatheredGasFieldNumber;
const int Player::kRepairedMineralsFieldNumber;
const int Player::kRepairedGasFieldNumber;
const int Player::kRefundedMineralsFieldNumber;
const int Player::kRefundedGasFieldNumber;
const int Player::kSupplyTotalFieldNumber;
const int Player::kSupplyUsedFieldNumber;
const int Player::kAllUnitCountFieldNumber;
const int Player::kVisibleUnitCountFieldNumber;
const int Player::kCompletedUnitCountFieldNumber;
const int Player::kDeadUnitCountFieldNumber;
const int Player::kKilledUnitCountFieldNumber;
const int Player::kUpgradeLevelFieldNumber;
const int Player::kHasResearchedFieldNumber;
const int Player::kIsResearchingFieldNumber;
const int Player::kIsUpgradingFieldNumber;
const int Player::kColorFieldNumber;
const int Player::kTotalUnitScoreFieldNumber;
const int Player::kTotalKillScoreFieldNumber;
const int Player::kTotalBuildingScoreFieldNumber;
const int Player::kTotalRazingScoreFieldNumber;
const int Player::kCustomScoreFieldNumber;
const int Player::kMaxUpgradeLevelFieldNumber;
const int Player::kIsResearchAvailableFieldNumber;
const int Player::kIsUnitAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      isally_(from.isally_),
      isenemy_(from.isenemy_),
      supplytotal_(from.supplytotal_),
      supplyused_(from.supplyused_),
      allunitcount_(from.allunitcount_),
      visibleunitcount_(from.visibleunitcount_),
      completedunitcount_(from.completedunitcount_),
      deadunitcount_(from.deadunitcount_),
      killedunitcount_(from.killedunitcount_),
      upgradelevel_(from.upgradelevel_),
      hasresearched_(from.hasresearched_),
      isresearching_(from.isresearching_),
      isupgrading_(from.isupgrading_),
      maxupgradelevel_(from.maxupgradelevel_),
      isresearchavailable_(from.isresearchavailable_),
      isunitavailable_(from.isunitavailable_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&customscore_) -
    reinterpret_cast<char*>(&id_)) + sizeof(customscore_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Player)
}

void Player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&customscore_) -
      reinterpret_cast<char*>(&id_)) + sizeof(customscore_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:bwapi.data.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Player.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isally_.Clear();
  isenemy_.Clear();
  supplytotal_.Clear();
  supplyused_.Clear();
  allunitcount_.Clear();
  visibleunitcount_.Clear();
  completedunitcount_.Clear();
  deadunitcount_.Clear();
  killedunitcount_.Clear();
  upgradelevel_.Clear();
  hasresearched_.Clear();
  isresearching_.Clear();
  isupgrading_.Clear();
  maxupgradelevel_.Clear();
  isresearchavailable_.Clear();
  isunitavailable_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&customscore_) -
      reinterpret_cast<char*>(&id_)) + sizeof(customscore_));
  _internal_metadata_.Clear();
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.Player.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 race = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 force = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isAlly = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isally())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 50u, input, this->mutable_isally())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isEnemy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isenemy())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 58u, input, this->mutable_isenemy())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isNeutral = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isneutral_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startLocationX = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startlocationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 startLocationY = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startlocationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isVictorious = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvictorious_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDefeated = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefeated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool leftGame = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftgame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isParticipating = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isparticipating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minerals = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gas = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gatheredMinerals = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatheredminerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gatheredGas = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatheredgas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 repairedMinerals = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repairedminerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 repairedGas = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repairedgas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 refundedMinerals = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refundedminerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 refundedGas = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refundedgas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 supplyTotal = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_supplytotal())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 186u, input, this->mutable_supplytotal())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 supplyUsed = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_supplyused())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 194u, input, this->mutable_supplyused())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 allUnitCount = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allunitcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 202u, input, this->mutable_allunitcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 visibleUnitCount = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_visibleunitcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 210u, input, this->mutable_visibleunitcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 completedUnitCount = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_completedunitcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 218u, input, this->mutable_completedunitcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 deadUnitCount = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deadunitcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 226u, input, this->mutable_deadunitcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 killedUnitCount = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_killedunitcount())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 234u, input, this->mutable_killedunitcount())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 upgradeLevel = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_upgradelevel())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 242u, input, this->mutable_upgradelevel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool hasResearched = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_hasresearched())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 250u, input, this->mutable_hasresearched())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isResearching = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isresearching())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 258u, input, this->mutable_isresearching())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isUpgrading = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isupgrading())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 266u, input, this->mutable_isupgrading())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalUnitScore = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalunitscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalKillScore = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalkillscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalBuildingScore = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalbuildingscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalRazingScore = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalrazingscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 customScore = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 maxUpgradeLevel = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_maxupgradelevel())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 322u, input, this->mutable_maxupgradelevel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isResearchAvailable = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 330 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isresearchavailable())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 330u, input, this->mutable_isresearchavailable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isUnitAvailable = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 338 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isunitavailable())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 338u, input, this->mutable_isunitavailable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int32 race = 3;
  if (this->race() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->race(), output);
  }

  // int32 type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // int32 force = 5;
  if (this->force() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->force(), output);
  }

  // repeated bool isAlly = 6;
  if (this->isally_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isally_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isally().data(), this->isally_size(), output);
  }

  // repeated bool isEnemy = 7;
  if (this->isenemy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isenemy_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isenemy().data(), this->isenemy_size(), output);
  }

  // bool isNeutral = 8;
  if (this->isneutral() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isneutral(), output);
  }

  // int32 startLocationX = 9;
  if (this->startlocationx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->startlocationx(), output);
  }

  // int32 startLocationY = 10;
  if (this->startlocationy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->startlocationy(), output);
  }

  // bool isVictorious = 11;
  if (this->isvictorious() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isvictorious(), output);
  }

  // bool isDefeated = 12;
  if (this->isdefeated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isdefeated(), output);
  }

  // bool leftGame = 13;
  if (this->leftgame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->leftgame(), output);
  }

  // bool isParticipating = 14;
  if (this->isparticipating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isparticipating(), output);
  }

  // int32 minerals = 15;
  if (this->minerals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->minerals(), output);
  }

  // int32 gas = 16;
  if (this->gas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->gas(), output);
  }

  // int32 gatheredMinerals = 17;
  if (this->gatheredminerals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->gatheredminerals(), output);
  }

  // int32 gatheredGas = 18;
  if (this->gatheredgas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->gatheredgas(), output);
  }

  // int32 repairedMinerals = 19;
  if (this->repairedminerals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->repairedminerals(), output);
  }

  // int32 repairedGas = 20;
  if (this->repairedgas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->repairedgas(), output);
  }

  // int32 refundedMinerals = 21;
  if (this->refundedminerals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->refundedminerals(), output);
  }

  // int32 refundedGas = 22;
  if (this->refundedgas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->refundedgas(), output);
  }

  // repeated int32 supplyTotal = 23;
  if (this->supplytotal_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _supplytotal_cached_byte_size_));
  }
  for (int i = 0, n = this->supplytotal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->supplytotal(i), output);
  }

  // repeated int32 supplyUsed = 24;
  if (this->supplyused_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _supplyused_cached_byte_size_));
  }
  for (int i = 0, n = this->supplyused_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->supplyused(i), output);
  }

  // repeated int32 allUnitCount = 25;
  if (this->allunitcount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allunitcount_cached_byte_size_));
  }
  for (int i = 0, n = this->allunitcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allunitcount(i), output);
  }

  // repeated int32 visibleUnitCount = 26;
  if (this->visibleunitcount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _visibleunitcount_cached_byte_size_));
  }
  for (int i = 0, n = this->visibleunitcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->visibleunitcount(i), output);
  }

  // repeated int32 completedUnitCount = 27;
  if (this->completedunitcount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(27, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _completedunitcount_cached_byte_size_));
  }
  for (int i = 0, n = this->completedunitcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->completedunitcount(i), output);
  }

  // repeated int32 deadUnitCount = 28;
  if (this->deadunitcount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(28, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _deadunitcount_cached_byte_size_));
  }
  for (int i = 0, n = this->deadunitcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deadunitcount(i), output);
  }

  // repeated int32 killedUnitCount = 29;
  if (this->killedunitcount_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(29, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _killedunitcount_cached_byte_size_));
  }
  for (int i = 0, n = this->killedunitcount_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->killedunitcount(i), output);
  }

  // repeated int32 upgradeLevel = 30;
  if (this->upgradelevel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(30, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _upgradelevel_cached_byte_size_));
  }
  for (int i = 0, n = this->upgradelevel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->upgradelevel(i), output);
  }

  // repeated bool hasResearched = 31;
  if (this->hasresearched_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(31, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hasresearched_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->hasresearched().data(), this->hasresearched_size(), output);
  }

  // repeated bool isResearching = 32;
  if (this->isresearching_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(32, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isresearching_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isresearching().data(), this->isresearching_size(), output);
  }

  // repeated bool isUpgrading = 33;
  if (this->isupgrading_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(33, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isupgrading_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isupgrading().data(), this->isupgrading_size(), output);
  }

  // int32 color = 34;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->color(), output);
  }

  // int32 totalUnitScore = 35;
  if (this->totalunitscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->totalunitscore(), output);
  }

  // int32 totalKillScore = 36;
  if (this->totalkillscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->totalkillscore(), output);
  }

  // int32 totalBuildingScore = 37;
  if (this->totalbuildingscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->totalbuildingscore(), output);
  }

  // int32 totalRazingScore = 38;
  if (this->totalrazingscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->totalrazingscore(), output);
  }

  // int32 customScore = 39;
  if (this->customscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->customscore(), output);
  }

  // repeated int32 maxUpgradeLevel = 40;
  if (this->maxupgradelevel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(40, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _maxupgradelevel_cached_byte_size_));
  }
  for (int i = 0, n = this->maxupgradelevel_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->maxupgradelevel(i), output);
  }

  // repeated bool isResearchAvailable = 41;
  if (this->isresearchavailable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(41, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isresearchavailable_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isresearchavailable().data(), this->isresearchavailable_size(), output);
  }

  // repeated bool isUnitAvailable = 42;
  if (this->isunitavailable_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(42, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isunitavailable_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isunitavailable().data(), this->isunitavailable_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Player)
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Player)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bool isAlly = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->isally_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isally_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isEnemy = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->isenemy_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isenemy_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 supplyTotal = 23;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->supplytotal_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _supplytotal_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 supplyUsed = 24;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->supplyused_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _supplyused_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 allUnitCount = 25;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allunitcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allunitcount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 visibleUnitCount = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->visibleunitcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _visibleunitcount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 completedUnitCount = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->completedunitcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _completedunitcount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 deadUnitCount = 28;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deadunitcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deadunitcount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 killedUnitCount = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->killedunitcount_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _killedunitcount_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 upgradeLevel = 30;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->upgradelevel_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _upgradelevel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool hasResearched = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->hasresearched_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hasresearched_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isResearching = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->isresearching_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isresearching_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isUpgrading = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->isupgrading_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isupgrading_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 maxUpgradeLevel = 40;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->maxupgradelevel_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _maxupgradelevel_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isResearchAvailable = 41;
  {
    unsigned int count = static_cast<unsigned int>(this->isresearchavailable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isresearchavailable_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isUnitAvailable = 42;
  {
    unsigned int count = static_cast<unsigned int>(this->isunitavailable_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isunitavailable_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 race = 3;
  if (this->race() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->race());
  }

  // int32 type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 force = 5;
  if (this->force() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->force());
  }

  // int32 startLocationX = 9;
  if (this->startlocationx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startlocationx());
  }

  // int32 startLocationY = 10;
  if (this->startlocationy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startlocationy());
  }

  // bool isNeutral = 8;
  if (this->isneutral() != 0) {
    total_size += 1 + 1;
  }

  // bool isVictorious = 11;
  if (this->isvictorious() != 0) {
    total_size += 1 + 1;
  }

  // bool isDefeated = 12;
  if (this->isdefeated() != 0) {
    total_size += 1 + 1;
  }

  // bool leftGame = 13;
  if (this->leftgame() != 0) {
    total_size += 1 + 1;
  }

  // bool isParticipating = 14;
  if (this->isparticipating() != 0) {
    total_size += 1 + 1;
  }

  // int32 minerals = 15;
  if (this->minerals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->minerals());
  }

  // int32 gas = 16;
  if (this->gas() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gas());
  }

  // int32 gatheredMinerals = 17;
  if (this->gatheredminerals() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gatheredminerals());
  }

  // int32 gatheredGas = 18;
  if (this->gatheredgas() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gatheredgas());
  }

  // int32 repairedMinerals = 19;
  if (this->repairedminerals() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repairedminerals());
  }

  // int32 repairedGas = 20;
  if (this->repairedgas() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->repairedgas());
  }

  // int32 refundedMinerals = 21;
  if (this->refundedminerals() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refundedminerals());
  }

  // int32 refundedGas = 22;
  if (this->refundedgas() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->refundedgas());
  }

  // int32 color = 34;
  if (this->color() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // int32 totalUnitScore = 35;
  if (this->totalunitscore() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalunitscore());
  }

  // int32 totalKillScore = 36;
  if (this->totalkillscore() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalkillscore());
  }

  // int32 totalBuildingScore = 37;
  if (this->totalbuildingscore() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalbuildingscore());
  }

  // int32 totalRazingScore = 38;
  if (this->totalrazingscore() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalrazingscore());
  }

  // int32 customScore = 39;
  if (this->customscore() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->customscore());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Player*>(&from));
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  isally_.MergeFrom(from.isally_);
  isenemy_.MergeFrom(from.isenemy_);
  supplytotal_.MergeFrom(from.supplytotal_);
  supplyused_.MergeFrom(from.supplyused_);
  allunitcount_.MergeFrom(from.allunitcount_);
  visibleunitcount_.MergeFrom(from.visibleunitcount_);
  completedunitcount_.MergeFrom(from.completedunitcount_);
  deadunitcount_.MergeFrom(from.deadunitcount_);
  killedunitcount_.MergeFrom(from.killedunitcount_);
  upgradelevel_.MergeFrom(from.upgradelevel_);
  hasresearched_.MergeFrom(from.hasresearched_);
  isresearching_.MergeFrom(from.isresearching_);
  isupgrading_.MergeFrom(from.isupgrading_);
  maxupgradelevel_.MergeFrom(from.maxupgradelevel_);
  isresearchavailable_.MergeFrom(from.isresearchavailable_);
  isunitavailable_.MergeFrom(from.isunitavailable_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.race() != 0) {
    set_race(from.race());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.force() != 0) {
    set_force(from.force());
  }
  if (from.startlocationx() != 0) {
    set_startlocationx(from.startlocationx());
  }
  if (from.startlocationy() != 0) {
    set_startlocationy(from.startlocationy());
  }
  if (from.isneutral() != 0) {
    set_isneutral(from.isneutral());
  }
  if (from.isvictorious() != 0) {
    set_isvictorious(from.isvictorious());
  }
  if (from.isdefeated() != 0) {
    set_isdefeated(from.isdefeated());
  }
  if (from.leftgame() != 0) {
    set_leftgame(from.leftgame());
  }
  if (from.isparticipating() != 0) {
    set_isparticipating(from.isparticipating());
  }
  if (from.minerals() != 0) {
    set_minerals(from.minerals());
  }
  if (from.gas() != 0) {
    set_gas(from.gas());
  }
  if (from.gatheredminerals() != 0) {
    set_gatheredminerals(from.gatheredminerals());
  }
  if (from.gatheredgas() != 0) {
    set_gatheredgas(from.gatheredgas());
  }
  if (from.repairedminerals() != 0) {
    set_repairedminerals(from.repairedminerals());
  }
  if (from.repairedgas() != 0) {
    set_repairedgas(from.repairedgas());
  }
  if (from.refundedminerals() != 0) {
    set_refundedminerals(from.refundedminerals());
  }
  if (from.refundedgas() != 0) {
    set_refundedgas(from.refundedgas());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.totalunitscore() != 0) {
    set_totalunitscore(from.totalunitscore());
  }
  if (from.totalkillscore() != 0) {
    set_totalkillscore(from.totalkillscore());
  }
  if (from.totalbuildingscore() != 0) {
    set_totalbuildingscore(from.totalbuildingscore());
  }
  if (from.totalrazingscore() != 0) {
    set_totalrazingscore(from.totalrazingscore());
  }
  if (from.customscore() != 0) {
    set_customscore(from.customscore());
  }
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  using std::swap;
  isally_.InternalSwap(&other->isally_);
  isenemy_.InternalSwap(&other->isenemy_);
  supplytotal_.InternalSwap(&other->supplytotal_);
  supplyused_.InternalSwap(&other->supplyused_);
  allunitcount_.InternalSwap(&other->allunitcount_);
  visibleunitcount_.InternalSwap(&other->visibleunitcount_);
  completedunitcount_.InternalSwap(&other->completedunitcount_);
  deadunitcount_.InternalSwap(&other->deadunitcount_);
  killedunitcount_.InternalSwap(&other->killedunitcount_);
  upgradelevel_.InternalSwap(&other->upgradelevel_);
  hasresearched_.InternalSwap(&other->hasresearched_);
  isresearching_.InternalSwap(&other->isresearching_);
  isupgrading_.InternalSwap(&other->isupgrading_);
  maxupgradelevel_.InternalSwap(&other->maxupgradelevel_);
  isresearchavailable_.InternalSwap(&other->isresearchavailable_);
  isunitavailable_.InternalSwap(&other->isunitavailable_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(race_, other->race_);
  swap(type_, other->type_);
  swap(force_, other->force_);
  swap(startlocationx_, other->startlocationx_);
  swap(startlocationy_, other->startlocationy_);
  swap(isneutral_, other->isneutral_);
  swap(isvictorious_, other->isvictorious_);
  swap(isdefeated_, other->isdefeated_);
  swap(leftgame_, other->leftgame_);
  swap(isparticipating_, other->isparticipating_);
  swap(minerals_, other->minerals_);
  swap(gas_, other->gas_);
  swap(gatheredminerals_, other->gatheredminerals_);
  swap(gatheredgas_, other->gatheredgas_);
  swap(repairedminerals_, other->repairedminerals_);
  swap(repairedgas_, other->repairedgas_);
  swap(refundedminerals_, other->refundedminerals_);
  swap(refundedgas_, other->refundedgas_);
  swap(color_, other->color_);
  swap(totalunitscore_, other->totalunitscore_);
  swap(totalkillscore_, other->totalkillscore_);
  swap(totalbuildingscore_, other->totalbuildingscore_);
  swap(totalrazingscore_, other->totalrazingscore_);
  swap(customscore_, other->customscore_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Player::GetTypeName() const {
  return "bwapi.data.Player";
}


// ===================================================================

void Unit::InitAsDefaultInstance() {
  ::bwapi::data::_Unit_default_instance_._instance.get_mutable()->position_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_Unit_default_instance_._instance.get_mutable()->targetposition_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_Unit_default_instance_._instance.get_mutable()->ordertargetposition_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_Unit_default_instance_._instance.get_mutable()->rallyposition_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kIdFieldNumber;
const int Unit::kPlayerFieldNumber;
const int Unit::kTypeFieldNumber;
const int Unit::kPositionFieldNumber;
const int Unit::kAngleFieldNumber;
const int Unit::kVelocityXFieldNumber;
const int Unit::kVelocityYFieldNumber;
const int Unit::kHitPointsFieldNumber;
const int Unit::kLastHitPointsFieldNumber;
const int Unit::kShieldsFieldNumber;
const int Unit::kEnergyFieldNumber;
const int Unit::kResourcesFieldNumber;
const int Unit::kResourceGroupFieldNumber;
const int Unit::kKillCountFieldNumber;
const int Unit::kAcidSporeCountFieldNumber;
const int Unit::kScarabCountFieldNumber;
const int Unit::kInterceptorCountFieldNumber;
const int Unit::kSpiderMineCountFieldNumber;
const int Unit::kGroundWeaponCooldownFieldNumber;
const int Unit::kAirWeaponCooldownFieldNumber;
const int Unit::kSpellCooldownFieldNumber;
const int Unit::kDefenseMatrixPointsFieldNumber;
const int Unit::kDefenseMatrixTimerFieldNumber;
const int Unit::kEnsnareTimerFieldNumber;
const int Unit::kIrradiateTimerFieldNumber;
const int Unit::kLockdownTimerFieldNumber;
const int Unit::kMaelstromTimerFieldNumber;
const int Unit::kOrderTimerFieldNumber;
const int Unit::kPlagueTimerFieldNumber;
const int Unit::kRemoveTimerFieldNumber;
const int Unit::kStasisTimerFieldNumber;
const int Unit::kStimTimerFieldNumber;
const int Unit::kBuildTypeFieldNumber;
const int Unit::kTrainingQueueFieldNumber;
const int Unit::kLoadedUnitsFieldNumber;
const int Unit::kInterceptorsFieldNumber;
const int Unit::kLarvaFieldNumber;
const int Unit::kTechFieldNumber;
const int Unit::kUpgradeFieldNumber;
const int Unit::kRemainingBuildTimeFieldNumber;
const int Unit::kRemainingTraintimeFieldNumber;
const int Unit::kRemainingResearchTimeFieldNumber;
const int Unit::kRemainingUpgradeTimeFieldNumber;
const int Unit::kBuildUnitFieldNumber;
const int Unit::kTargetFieldNumber;
const int Unit::kTargetPositionFieldNumber;
const int Unit::kOrderFieldNumber;
const int Unit::kOrderTargetFieldNumber;
const int Unit::kOrderTargetPositionFieldNumber;
const int Unit::kSecondaryOrderFieldNumber;
const int Unit::kRallyPositionFieldNumber;
const int Unit::kRallyUnitFieldNumber;
const int Unit::kAddonFieldNumber;
const int Unit::kNydusExitFieldNumber;
const int Unit::kPowerUpFieldNumber;
const int Unit::kTransportFieldNumber;
const int Unit::kCarrierFieldNumber;
const int Unit::kHatcheryFieldNumber;
const int Unit::kExistsFieldNumber;
const int Unit::kHasNukeFieldNumber;
const int Unit::kIsAcceleratingFieldNumber;
const int Unit::kIsAttackingFieldNumber;
const int Unit::kIsAttackFrameFieldNumber;
const int Unit::kIsBeingGatheredFieldNumber;
const int Unit::kIsBeingHealedFieldNumber;
const int Unit::kIsBlindFieldNumber;
const int Unit::kIsBrakingFieldNumber;
const int Unit::kIsBurrowedFieldNumber;
const int Unit::kCarryResourceTypeFieldNumber;
const int Unit::kIsCloakedFieldNumber;
const int Unit::kIsCompletedFieldNumber;
const int Unit::kIsConstructingFieldNumber;
const int Unit::kIsDetectedFieldNumber;
const int Unit::kIsGatheringFieldNumber;
const int Unit::kIsHallucinationFieldNumber;
const int Unit::kIsIdleFieldNumber;
const int Unit::kIsinterruptibleFieldNumber;
const int Unit::kIsInvincibleFieldNumber;
const int Unit::kIsLiftedFieldNumber;
const int Unit::kIsMorphingFieldNumber;
const int Unit::kIsMovingFieldNumber;
const int Unit::kIsParasitedFieldNumber;
const int Unit::kIsSelectedFieldNumber;
const int Unit::kIsStartingAttackFieldNumber;
const int Unit::kIsStuckFieldNumber;
const int Unit::kIsTrainingFieldNumber;
const int Unit::kIsUnderStormFieldNumber;
const int Unit::kIsUnderDarkSwarmFieldNumber;
const int Unit::kIsUnderDWebFieldNumber;
const int Unit::kIsPoweredFieldNumber;
const int Unit::kIsVisibleFieldNumber;
const int Unit::kButtonsetFieldNumber;
const int Unit::kLastCommandFrameFieldNumber;
const int Unit::kLastCommandFieldNumber;
const int Unit::kLastAttackerPlayerFieldNumber;
const int Unit::kReplayIDFieldNumber;
const int Unit::kRecentlyAttackedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Unit)
}
Unit::Unit(const Unit& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      trainingqueue_(from.trainingqueue_),
      loadedunits_(from.loadedunits_),
      interceptors_(from.interceptors_),
      larva_(from.larva_),
      isvisible_(from.isvisible_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::bwapi::data::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_targetposition()) {
    targetposition_ = new ::bwapi::data::Point(*from.targetposition_);
  } else {
    targetposition_ = NULL;
  }
  if (from.has_ordertargetposition()) {
    ordertargetposition_ = new ::bwapi::data::Point(*from.ordertargetposition_);
  } else {
    ordertargetposition_ = NULL;
  }
  if (from.has_rallyposition()) {
    rallyposition_ = new ::bwapi::data::Point(*from.rallyposition_);
  } else {
    rallyposition_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&replayid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(replayid_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Unit)
}

void Unit::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replayid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(replayid_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:bwapi.data.Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete targetposition_;
  if (this != internal_default_instance()) delete ordertargetposition_;
  if (this != internal_default_instance()) delete rallyposition_;
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Unit& Unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Unit.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trainingqueue_.Clear();
  loadedunits_.Clear();
  interceptors_.Clear();
  larva_.Clear();
  isvisible_.Clear();
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetposition_ != NULL) {
    delete targetposition_;
  }
  targetposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && ordertargetposition_ != NULL) {
    delete ordertargetposition_;
  }
  ordertargetposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && rallyposition_ != NULL) {
    delete rallyposition_;
  }
  rallyposition_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replayid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(replayid_));
  _internal_metadata_.Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocityX = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocityY = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hitPoints = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastHitPoints = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasthitpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shields = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 energy = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 resources = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resources_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 resourceGroup = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourcegroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 killCount = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 acidSporeCount = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acidsporecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scarabCount = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scarabcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 interceptorCount = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interceptorcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spiderMineCount = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spiderminecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 groundWeaponCooldown = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groundweaponcooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 airWeaponCooldown = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &airweaponcooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 spellCooldown = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spellcooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 defenseMatrixPoints = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defensematrixpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 defenseMatrixTimer = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defensematrixtimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ensnareTimer = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ensnaretimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 irradiateTimer = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irradiatetimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lockdownTimer = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lockdowntimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maelstromTimer = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maelstromtimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orderTimer = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 plagueTimer = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plaguetimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 removeTimer = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removetimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stasisTimer = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stasistimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stimTimer = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stimtimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 buildType = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 trainingQueue = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_trainingqueue())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 274u, input, this->mutable_trainingqueue())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 loadedUnits = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_loadedunits())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 282u, input, this->mutable_loadedunits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 interceptors = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_interceptors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 290u, input, this->mutable_interceptors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 larva = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_larva())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 298u, input, this->mutable_larva())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tech = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tech_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upgrade = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingBuildTime = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainingbuildtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingTraintime = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainingtraintime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingResearchTime = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainingresearchtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remainingUpgradeTime = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainingupgradetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 buildUnit = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point targetPosition = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 order = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 orderTarget = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordertarget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point orderTargetPosition = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 394 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ordertargetposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 secondaryOrder = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondaryorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point rallyPosition = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 410 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rallyposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rallyUnit = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rallyunit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 addon = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nydusExit = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nydusexit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 powerUp = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 transport = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 carrier = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hatchery = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatchery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exists = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool hasNuke = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasnuke_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAccelerating = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccelerating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAttacking = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattacking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAttackFrame = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattackframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBeingGathered = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeinggathered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBeingHealed = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeinghealed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBlind = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBraking = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbraking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBurrowed = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isburrowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 carryResourceType = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &carryresourcetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isCloaked = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscloaked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isCompleted = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isConstructing = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconstructing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isDetected = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 584 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdetected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isGathering = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 592 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgathering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isHallucination = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 600 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishallucination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isIdle = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 608 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isidle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isinterruptible = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 616 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinterruptible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isInvincible = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 624 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinvincible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isLifted = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 632 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islifted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMorphing = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 640 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismorphing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isMoving = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 648 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismoving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isParasited = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 656 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isparasited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSelected = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 664 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isselected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isStartingAttack = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 672 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstartingattack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isStuck = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 680 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstuck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isTraining = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 688 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istraining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isUnderStorm = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 696 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isunderstorm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isUnderDarkSwarm = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 704 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isunderdarkswarm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isUnderDWeb = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 712 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isunderdweb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isPowered = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 720 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispowered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isVisible = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 730 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isvisible())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 728 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 730u, input, this->mutable_isvisible())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 buttonset = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 736 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buttonset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastCommandFrame = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 744 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcommandframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastCommand = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 752 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcommand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastAttackerPlayer = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 760 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastattackerplayer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replayID = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 768 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replayid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool recentlyAttacked = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 776 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recentlyattacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 player = 2;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // .bwapi.data.Point position = 4;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_position(), output);
  }

  // double angle = 5;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle(), output);
  }

  // double velocityX = 6;
  if (this->velocityx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->velocityx(), output);
  }

  // double velocityY = 7;
  if (this->velocityy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velocityy(), output);
  }

  // int32 hitPoints = 8;
  if (this->hitpoints() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hitpoints(), output);
  }

  // int32 lastHitPoints = 9;
  if (this->lasthitpoints() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lasthitpoints(), output);
  }

  // int32 shields = 10;
  if (this->shields() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shields(), output);
  }

  // int32 energy = 11;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->energy(), output);
  }

  // int32 resources = 12;
  if (this->resources() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->resources(), output);
  }

  // int32 resourceGroup = 13;
  if (this->resourcegroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->resourcegroup(), output);
  }

  // int32 killCount = 14;
  if (this->killcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->killcount(), output);
  }

  // int32 acidSporeCount = 15;
  if (this->acidsporecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->acidsporecount(), output);
  }

  // int32 scarabCount = 16;
  if (this->scarabcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->scarabcount(), output);
  }

  // int32 interceptorCount = 17;
  if (this->interceptorcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->interceptorcount(), output);
  }

  // int32 spiderMineCount = 18;
  if (this->spiderminecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->spiderminecount(), output);
  }

  // int32 groundWeaponCooldown = 19;
  if (this->groundweaponcooldown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->groundweaponcooldown(), output);
  }

  // int32 airWeaponCooldown = 20;
  if (this->airweaponcooldown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->airweaponcooldown(), output);
  }

  // int32 spellCooldown = 21;
  if (this->spellcooldown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->spellcooldown(), output);
  }

  // int32 defenseMatrixPoints = 22;
  if (this->defensematrixpoints() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->defensematrixpoints(), output);
  }

  // int32 defenseMatrixTimer = 23;
  if (this->defensematrixtimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->defensematrixtimer(), output);
  }

  // int32 ensnareTimer = 24;
  if (this->ensnaretimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->ensnaretimer(), output);
  }

  // int32 irradiateTimer = 25;
  if (this->irradiatetimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->irradiatetimer(), output);
  }

  // int32 lockdownTimer = 26;
  if (this->lockdowntimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->lockdowntimer(), output);
  }

  // int32 maelstromTimer = 27;
  if (this->maelstromtimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->maelstromtimer(), output);
  }

  // int32 orderTimer = 28;
  if (this->ordertimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->ordertimer(), output);
  }

  // int32 plagueTimer = 29;
  if (this->plaguetimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->plaguetimer(), output);
  }

  // int32 removeTimer = 30;
  if (this->removetimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->removetimer(), output);
  }

  // int32 stasisTimer = 31;
  if (this->stasistimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->stasistimer(), output);
  }

  // int32 stimTimer = 32;
  if (this->stimtimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->stimtimer(), output);
  }

  // int32 buildType = 33;
  if (this->buildtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->buildtype(), output);
  }

  // repeated int32 trainingQueue = 34;
  if (this->trainingqueue_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(34, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _trainingqueue_cached_byte_size_));
  }
  for (int i = 0, n = this->trainingqueue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->trainingqueue(i), output);
  }

  // repeated int32 loadedUnits = 35;
  if (this->loadedunits_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(35, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _loadedunits_cached_byte_size_));
  }
  for (int i = 0, n = this->loadedunits_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->loadedunits(i), output);
  }

  // repeated int32 interceptors = 36;
  if (this->interceptors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(36, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _interceptors_cached_byte_size_));
  }
  for (int i = 0, n = this->interceptors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->interceptors(i), output);
  }

  // repeated int32 larva = 37;
  if (this->larva_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(37, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _larva_cached_byte_size_));
  }
  for (int i = 0, n = this->larva_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->larva(i), output);
  }

  // int32 tech = 38;
  if (this->tech() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->tech(), output);
  }

  // int32 upgrade = 39;
  if (this->upgrade() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->upgrade(), output);
  }

  // int32 remainingBuildTime = 40;
  if (this->remainingbuildtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->remainingbuildtime(), output);
  }

  // int32 remainingTraintime = 41;
  if (this->remainingtraintime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->remainingtraintime(), output);
  }

  // int32 remainingResearchTime = 42;
  if (this->remainingresearchtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->remainingresearchtime(), output);
  }

  // int32 remainingUpgradeTime = 43;
  if (this->remainingupgradetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->remainingupgradetime(), output);
  }

  // int32 buildUnit = 44;
  if (this->buildunit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->buildunit(), output);
  }

  // int32 target = 45;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->target(), output);
  }

  // .bwapi.data.Point targetPosition = 46;
  if (this->has_targetposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      46, this->_internal_targetposition(), output);
  }

  // int32 order = 47;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->order(), output);
  }

  // int32 orderTarget = 48;
  if (this->ordertarget() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->ordertarget(), output);
  }

  // .bwapi.data.Point orderTargetPosition = 49;
  if (this->has_ordertargetposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      49, this->_internal_ordertargetposition(), output);
  }

  // int32 secondaryOrder = 50;
  if (this->secondaryorder() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->secondaryorder(), output);
  }

  // .bwapi.data.Point rallyPosition = 51;
  if (this->has_rallyposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      51, this->_internal_rallyposition(), output);
  }

  // int32 rallyUnit = 52;
  if (this->rallyunit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->rallyunit(), output);
  }

  // int32 addon = 53;
  if (this->addon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->addon(), output);
  }

  // int32 nydusExit = 54;
  if (this->nydusexit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->nydusexit(), output);
  }

  // int32 powerUp = 55;
  if (this->powerup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->powerup(), output);
  }

  // int32 transport = 56;
  if (this->transport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->transport(), output);
  }

  // int32 carrier = 57;
  if (this->carrier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->carrier(), output);
  }

  // int32 hatchery = 58;
  if (this->hatchery() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->hatchery(), output);
  }

  // bool exists = 59;
  if (this->exists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->exists(), output);
  }

  // bool hasNuke = 60;
  if (this->hasnuke() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->hasnuke(), output);
  }

  // bool isAccelerating = 61;
  if (this->isaccelerating() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->isaccelerating(), output);
  }

  // bool isAttacking = 62;
  if (this->isattacking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->isattacking(), output);
  }

  // bool isAttackFrame = 63;
  if (this->isattackframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->isattackframe(), output);
  }

  // bool isBeingGathered = 64;
  if (this->isbeinggathered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(64, this->isbeinggathered(), output);
  }

  // bool isBeingHealed = 65;
  if (this->isbeinghealed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->isbeinghealed(), output);
  }

  // bool isBlind = 66;
  if (this->isblind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->isblind(), output);
  }

  // bool isBraking = 67;
  if (this->isbraking() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->isbraking(), output);
  }

  // bool isBurrowed = 68;
  if (this->isburrowed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->isburrowed(), output);
  }

  // int32 carryResourceType = 69;
  if (this->carryresourcetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->carryresourcetype(), output);
  }

  // bool isCloaked = 70;
  if (this->iscloaked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->iscloaked(), output);
  }

  // bool isCompleted = 71;
  if (this->iscompleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->iscompleted(), output);
  }

  // bool isConstructing = 72;
  if (this->isconstructing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->isconstructing(), output);
  }

  // bool isDetected = 73;
  if (this->isdetected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->isdetected(), output);
  }

  // bool isGathering = 74;
  if (this->isgathering() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->isgathering(), output);
  }

  // bool isHallucination = 75;
  if (this->ishallucination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->ishallucination(), output);
  }

  // bool isIdle = 76;
  if (this->isidle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->isidle(), output);
  }

  // bool isinterruptible = 77;
  if (this->isinterruptible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->isinterruptible(), output);
  }

  // bool isInvincible = 78;
  if (this->isinvincible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->isinvincible(), output);
  }

  // bool isLifted = 79;
  if (this->islifted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(79, this->islifted(), output);
  }

  // bool isMorphing = 80;
  if (this->ismorphing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->ismorphing(), output);
  }

  // bool isMoving = 81;
  if (this->ismoving() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->ismoving(), output);
  }

  // bool isParasited = 82;
  if (this->isparasited() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->isparasited(), output);
  }

  // bool isSelected = 83;
  if (this->isselected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->isselected(), output);
  }

  // bool isStartingAttack = 84;
  if (this->isstartingattack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->isstartingattack(), output);
  }

  // bool isStuck = 85;
  if (this->isstuck() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->isstuck(), output);
  }

  // bool isTraining = 86;
  if (this->istraining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->istraining(), output);
  }

  // bool isUnderStorm = 87;
  if (this->isunderstorm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->isunderstorm(), output);
  }

  // bool isUnderDarkSwarm = 88;
  if (this->isunderdarkswarm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->isunderdarkswarm(), output);
  }

  // bool isUnderDWeb = 89;
  if (this->isunderdweb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->isunderdweb(), output);
  }

  // bool isPowered = 90;
  if (this->ispowered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(90, this->ispowered(), output);
  }

  // repeated bool isVisible = 91;
  if (this->isvisible_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(91, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isvisible_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isvisible().data(), this->isvisible_size(), output);
  }

  // int32 buttonset = 92;
  if (this->buttonset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(92, this->buttonset(), output);
  }

  // int32 lastCommandFrame = 93;
  if (this->lastcommandframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(93, this->lastcommandframe(), output);
  }

  // int32 lastCommand = 94;
  if (this->lastcommand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(94, this->lastcommand(), output);
  }

  // int32 lastAttackerPlayer = 95;
  if (this->lastattackerplayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(95, this->lastattackerplayer(), output);
  }

  // int32 replayID = 96;
  if (this->replayid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(96, this->replayid(), output);
  }

  // bool recentlyAttacked = 97;
  if (this->recentlyattacked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->recentlyattacked(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Unit)
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Unit)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int32 trainingQueue = 34;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->trainingqueue_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _trainingqueue_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 loadedUnits = 35;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->loadedunits_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _loadedunits_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 interceptors = 36;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->interceptors_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _interceptors_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 larva = 37;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->larva_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _larva_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool isVisible = 91;
  {
    unsigned int count = static_cast<unsigned int>(this->isvisible_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isvisible_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .bwapi.data.Point position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .bwapi.data.Point targetPosition = 46;
  if (this->has_targetposition()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetposition_);
  }

  // .bwapi.data.Point orderTargetPosition = 49;
  if (this->has_ordertargetposition()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ordertargetposition_);
  }

  // .bwapi.data.Point rallyPosition = 51;
  if (this->has_rallyposition()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rallyposition_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 player = 2;
  if (this->player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player());
  }

  // double angle = 5;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 hitPoints = 8;
  if (this->hitpoints() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hitpoints());
  }

  // double velocityX = 6;
  if (this->velocityx() != 0) {
    total_size += 1 + 8;
  }

  // double velocityY = 7;
  if (this->velocityy() != 0) {
    total_size += 1 + 8;
  }

  // int32 lastHitPoints = 9;
  if (this->lasthitpoints() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lasthitpoints());
  }

  // int32 shields = 10;
  if (this->shields() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shields());
  }

  // int32 energy = 11;
  if (this->energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->energy());
  }

  // int32 resources = 12;
  if (this->resources() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resources());
  }

  // int32 resourceGroup = 13;
  if (this->resourcegroup() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resourcegroup());
  }

  // int32 killCount = 14;
  if (this->killcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->killcount());
  }

  // int32 acidSporeCount = 15;
  if (this->acidsporecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acidsporecount());
  }

  // int32 scarabCount = 16;
  if (this->scarabcount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scarabcount());
  }

  // int32 interceptorCount = 17;
  if (this->interceptorcount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->interceptorcount());
  }

  // int32 spiderMineCount = 18;
  if (this->spiderminecount() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spiderminecount());
  }

  // int32 groundWeaponCooldown = 19;
  if (this->groundweaponcooldown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groundweaponcooldown());
  }

  // int32 airWeaponCooldown = 20;
  if (this->airweaponcooldown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->airweaponcooldown());
  }

  // int32 spellCooldown = 21;
  if (this->spellcooldown() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->spellcooldown());
  }

  // int32 defenseMatrixPoints = 22;
  if (this->defensematrixpoints() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defensematrixpoints());
  }

  // int32 defenseMatrixTimer = 23;
  if (this->defensematrixtimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defensematrixtimer());
  }

  // int32 ensnareTimer = 24;
  if (this->ensnaretimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ensnaretimer());
  }

  // int32 irradiateTimer = 25;
  if (this->irradiatetimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->irradiatetimer());
  }

  // int32 lockdownTimer = 26;
  if (this->lockdowntimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lockdowntimer());
  }

  // int32 maelstromTimer = 27;
  if (this->maelstromtimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maelstromtimer());
  }

  // int32 orderTimer = 28;
  if (this->ordertimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordertimer());
  }

  // int32 plagueTimer = 29;
  if (this->plaguetimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plaguetimer());
  }

  // int32 removeTimer = 30;
  if (this->removetimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->removetimer());
  }

  // int32 stasisTimer = 31;
  if (this->stasistimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stasistimer());
  }

  // int32 stimTimer = 32;
  if (this->stimtimer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stimtimer());
  }

  // int32 buildType = 33;
  if (this->buildtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buildtype());
  }

  // int32 tech = 38;
  if (this->tech() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tech());
  }

  // int32 upgrade = 39;
  if (this->upgrade() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upgrade());
  }

  // int32 remainingBuildTime = 40;
  if (this->remainingbuildtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainingbuildtime());
  }

  // int32 remainingTraintime = 41;
  if (this->remainingtraintime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainingtraintime());
  }

  // int32 remainingResearchTime = 42;
  if (this->remainingresearchtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainingresearchtime());
  }

  // int32 remainingUpgradeTime = 43;
  if (this->remainingupgradetime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->remainingupgradetime());
  }

  // int32 buildUnit = 44;
  if (this->buildunit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buildunit());
  }

  // int32 target = 45;
  if (this->target() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  // int32 order = 47;
  if (this->order() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  // int32 orderTarget = 48;
  if (this->ordertarget() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ordertarget());
  }

  // int32 secondaryOrder = 50;
  if (this->secondaryorder() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->secondaryorder());
  }

  // int32 rallyUnit = 52;
  if (this->rallyunit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rallyunit());
  }

  // int32 addon = 53;
  if (this->addon() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->addon());
  }

  // int32 nydusExit = 54;
  if (this->nydusexit() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nydusexit());
  }

  // int32 powerUp = 55;
  if (this->powerup() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->powerup());
  }

  // int32 transport = 56;
  if (this->transport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transport());
  }

  // int32 carrier = 57;
  if (this->carrier() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->carrier());
  }

  // int32 hatchery = 58;
  if (this->hatchery() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hatchery());
  }

  // bool exists = 59;
  if (this->exists() != 0) {
    total_size += 2 + 1;
  }

  // bool hasNuke = 60;
  if (this->hasnuke() != 0) {
    total_size += 2 + 1;
  }

  // bool isAccelerating = 61;
  if (this->isaccelerating() != 0) {
    total_size += 2 + 1;
  }

  // bool isAttacking = 62;
  if (this->isattacking() != 0) {
    total_size += 2 + 1;
  }

  // bool isAttackFrame = 63;
  if (this->isattackframe() != 0) {
    total_size += 2 + 1;
  }

  // bool isBeingGathered = 64;
  if (this->isbeinggathered() != 0) {
    total_size += 2 + 1;
  }

  // bool isBeingHealed = 65;
  if (this->isbeinghealed() != 0) {
    total_size += 2 + 1;
  }

  // bool isBlind = 66;
  if (this->isblind() != 0) {
    total_size += 2 + 1;
  }

  // int32 carryResourceType = 69;
  if (this->carryresourcetype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->carryresourcetype());
  }

  // bool isBraking = 67;
  if (this->isbraking() != 0) {
    total_size += 2 + 1;
  }

  // bool isBurrowed = 68;
  if (this->isburrowed() != 0) {
    total_size += 2 + 1;
  }

  // bool isCloaked = 70;
  if (this->iscloaked() != 0) {
    total_size += 2 + 1;
  }

  // bool isCompleted = 71;
  if (this->iscompleted() != 0) {
    total_size += 2 + 1;
  }

  // bool isConstructing = 72;
  if (this->isconstructing() != 0) {
    total_size += 2 + 1;
  }

  // bool isDetected = 73;
  if (this->isdetected() != 0) {
    total_size += 2 + 1;
  }

  // bool isGathering = 74;
  if (this->isgathering() != 0) {
    total_size += 2 + 1;
  }

  // bool isHallucination = 75;
  if (this->ishallucination() != 0) {
    total_size += 2 + 1;
  }

  // bool isIdle = 76;
  if (this->isidle() != 0) {
    total_size += 2 + 1;
  }

  // bool isinterruptible = 77;
  if (this->isinterruptible() != 0) {
    total_size += 2 + 1;
  }

  // bool isInvincible = 78;
  if (this->isinvincible() != 0) {
    total_size += 2 + 1;
  }

  // bool isLifted = 79;
  if (this->islifted() != 0) {
    total_size += 2 + 1;
  }

  // bool isMorphing = 80;
  if (this->ismorphing() != 0) {
    total_size += 2 + 1;
  }

  // bool isMoving = 81;
  if (this->ismoving() != 0) {
    total_size += 2 + 1;
  }

  // bool isParasited = 82;
  if (this->isparasited() != 0) {
    total_size += 2 + 1;
  }

  // bool isSelected = 83;
  if (this->isselected() != 0) {
    total_size += 2 + 1;
  }

  // bool isStartingAttack = 84;
  if (this->isstartingattack() != 0) {
    total_size += 2 + 1;
  }

  // bool isStuck = 85;
  if (this->isstuck() != 0) {
    total_size += 2 + 1;
  }

  // bool isTraining = 86;
  if (this->istraining() != 0) {
    total_size += 2 + 1;
  }

  // bool isUnderStorm = 87;
  if (this->isunderstorm() != 0) {
    total_size += 2 + 1;
  }

  // bool isUnderDarkSwarm = 88;
  if (this->isunderdarkswarm() != 0) {
    total_size += 2 + 1;
  }

  // bool isUnderDWeb = 89;
  if (this->isunderdweb() != 0) {
    total_size += 2 + 1;
  }

  // bool isPowered = 90;
  if (this->ispowered() != 0) {
    total_size += 2 + 1;
  }

  // bool recentlyAttacked = 97;
  if (this->recentlyattacked() != 0) {
    total_size += 2 + 1;
  }

  // int32 buttonset = 92;
  if (this->buttonset() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->buttonset());
  }

  // int32 lastCommandFrame = 93;
  if (this->lastcommandframe() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastcommandframe());
  }

  // int32 lastCommand = 94;
  if (this->lastcommand() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastcommand());
  }

  // int32 lastAttackerPlayer = 95;
  if (this->lastattackerplayer() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastattackerplayer());
  }

  // int32 replayID = 96;
  if (this->replayid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replayid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Unit*>(&from));
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trainingqueue_.MergeFrom(from.trainingqueue_);
  loadedunits_.MergeFrom(from.loadedunits_);
  interceptors_.MergeFrom(from.interceptors_);
  larva_.MergeFrom(from.larva_);
  isvisible_.MergeFrom(from.isvisible_);
  if (from.has_position()) {
    mutable_position()->::bwapi::data::Point::MergeFrom(from.position());
  }
  if (from.has_targetposition()) {
    mutable_targetposition()->::bwapi::data::Point::MergeFrom(from.targetposition());
  }
  if (from.has_ordertargetposition()) {
    mutable_ordertargetposition()->::bwapi::data::Point::MergeFrom(from.ordertargetposition());
  }
  if (from.has_rallyposition()) {
    mutable_rallyposition()->::bwapi::data::Point::MergeFrom(from.rallyposition());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.hitpoints() != 0) {
    set_hitpoints(from.hitpoints());
  }
  if (from.velocityx() != 0) {
    set_velocityx(from.velocityx());
  }
  if (from.velocityy() != 0) {
    set_velocityy(from.velocityy());
  }
  if (from.lasthitpoints() != 0) {
    set_lasthitpoints(from.lasthitpoints());
  }
  if (from.shields() != 0) {
    set_shields(from.shields());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.resources() != 0) {
    set_resources(from.resources());
  }
  if (from.resourcegroup() != 0) {
    set_resourcegroup(from.resourcegroup());
  }
  if (from.killcount() != 0) {
    set_killcount(from.killcount());
  }
  if (from.acidsporecount() != 0) {
    set_acidsporecount(from.acidsporecount());
  }
  if (from.scarabcount() != 0) {
    set_scarabcount(from.scarabcount());
  }
  if (from.interceptorcount() != 0) {
    set_interceptorcount(from.interceptorcount());
  }
  if (from.spiderminecount() != 0) {
    set_spiderminecount(from.spiderminecount());
  }
  if (from.groundweaponcooldown() != 0) {
    set_groundweaponcooldown(from.groundweaponcooldown());
  }
  if (from.airweaponcooldown() != 0) {
    set_airweaponcooldown(from.airweaponcooldown());
  }
  if (from.spellcooldown() != 0) {
    set_spellcooldown(from.spellcooldown());
  }
  if (from.defensematrixpoints() != 0) {
    set_defensematrixpoints(from.defensematrixpoints());
  }
  if (from.defensematrixtimer() != 0) {
    set_defensematrixtimer(from.defensematrixtimer());
  }
  if (from.ensnaretimer() != 0) {
    set_ensnaretimer(from.ensnaretimer());
  }
  if (from.irradiatetimer() != 0) {
    set_irradiatetimer(from.irradiatetimer());
  }
  if (from.lockdowntimer() != 0) {
    set_lockdowntimer(from.lockdowntimer());
  }
  if (from.maelstromtimer() != 0) {
    set_maelstromtimer(from.maelstromtimer());
  }
  if (from.ordertimer() != 0) {
    set_ordertimer(from.ordertimer());
  }
  if (from.plaguetimer() != 0) {
    set_plaguetimer(from.plaguetimer());
  }
  if (from.removetimer() != 0) {
    set_removetimer(from.removetimer());
  }
  if (from.stasistimer() != 0) {
    set_stasistimer(from.stasistimer());
  }
  if (from.stimtimer() != 0) {
    set_stimtimer(from.stimtimer());
  }
  if (from.buildtype() != 0) {
    set_buildtype(from.buildtype());
  }
  if (from.tech() != 0) {
    set_tech(from.tech());
  }
  if (from.upgrade() != 0) {
    set_upgrade(from.upgrade());
  }
  if (from.remainingbuildtime() != 0) {
    set_remainingbuildtime(from.remainingbuildtime());
  }
  if (from.remainingtraintime() != 0) {
    set_remainingtraintime(from.remainingtraintime());
  }
  if (from.remainingresearchtime() != 0) {
    set_remainingresearchtime(from.remainingresearchtime());
  }
  if (from.remainingupgradetime() != 0) {
    set_remainingupgradetime(from.remainingupgradetime());
  }
  if (from.buildunit() != 0) {
    set_buildunit(from.buildunit());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
  if (from.ordertarget() != 0) {
    set_ordertarget(from.ordertarget());
  }
  if (from.secondaryorder() != 0) {
    set_secondaryorder(from.secondaryorder());
  }
  if (from.rallyunit() != 0) {
    set_rallyunit(from.rallyunit());
  }
  if (from.addon() != 0) {
    set_addon(from.addon());
  }
  if (from.nydusexit() != 0) {
    set_nydusexit(from.nydusexit());
  }
  if (from.powerup() != 0) {
    set_powerup(from.powerup());
  }
  if (from.transport() != 0) {
    set_transport(from.transport());
  }
  if (from.carrier() != 0) {
    set_carrier(from.carrier());
  }
  if (from.hatchery() != 0) {
    set_hatchery(from.hatchery());
  }
  if (from.exists() != 0) {
    set_exists(from.exists());
  }
  if (from.hasnuke() != 0) {
    set_hasnuke(from.hasnuke());
  }
  if (from.isaccelerating() != 0) {
    set_isaccelerating(from.isaccelerating());
  }
  if (from.isattacking() != 0) {
    set_isattacking(from.isattacking());
  }
  if (from.isattackframe() != 0) {
    set_isattackframe(from.isattackframe());
  }
  if (from.isbeinggathered() != 0) {
    set_isbeinggathered(from.isbeinggathered());
  }
  if (from.isbeinghealed() != 0) {
    set_isbeinghealed(from.isbeinghealed());
  }
  if (from.isblind() != 0) {
    set_isblind(from.isblind());
  }
  if (from.carryresourcetype() != 0) {
    set_carryresourcetype(from.carryresourcetype());
  }
  if (from.isbraking() != 0) {
    set_isbraking(from.isbraking());
  }
  if (from.isburrowed() != 0) {
    set_isburrowed(from.isburrowed());
  }
  if (from.iscloaked() != 0) {
    set_iscloaked(from.iscloaked());
  }
  if (from.iscompleted() != 0) {
    set_iscompleted(from.iscompleted());
  }
  if (from.isconstructing() != 0) {
    set_isconstructing(from.isconstructing());
  }
  if (from.isdetected() != 0) {
    set_isdetected(from.isdetected());
  }
  if (from.isgathering() != 0) {
    set_isgathering(from.isgathering());
  }
  if (from.ishallucination() != 0) {
    set_ishallucination(from.ishallucination());
  }
  if (from.isidle() != 0) {
    set_isidle(from.isidle());
  }
  if (from.isinterruptible() != 0) {
    set_isinterruptible(from.isinterruptible());
  }
  if (from.isinvincible() != 0) {
    set_isinvincible(from.isinvincible());
  }
  if (from.islifted() != 0) {
    set_islifted(from.islifted());
  }
  if (from.ismorphing() != 0) {
    set_ismorphing(from.ismorphing());
  }
  if (from.ismoving() != 0) {
    set_ismoving(from.ismoving());
  }
  if (from.isparasited() != 0) {
    set_isparasited(from.isparasited());
  }
  if (from.isselected() != 0) {
    set_isselected(from.isselected());
  }
  if (from.isstartingattack() != 0) {
    set_isstartingattack(from.isstartingattack());
  }
  if (from.isstuck() != 0) {
    set_isstuck(from.isstuck());
  }
  if (from.istraining() != 0) {
    set_istraining(from.istraining());
  }
  if (from.isunderstorm() != 0) {
    set_isunderstorm(from.isunderstorm());
  }
  if (from.isunderdarkswarm() != 0) {
    set_isunderdarkswarm(from.isunderdarkswarm());
  }
  if (from.isunderdweb() != 0) {
    set_isunderdweb(from.isunderdweb());
  }
  if (from.ispowered() != 0) {
    set_ispowered(from.ispowered());
  }
  if (from.recentlyattacked() != 0) {
    set_recentlyattacked(from.recentlyattacked());
  }
  if (from.buttonset() != 0) {
    set_buttonset(from.buttonset());
  }
  if (from.lastcommandframe() != 0) {
    set_lastcommandframe(from.lastcommandframe());
  }
  if (from.lastcommand() != 0) {
    set_lastcommand(from.lastcommand());
  }
  if (from.lastattackerplayer() != 0) {
    set_lastattackerplayer(from.lastattackerplayer());
  }
  if (from.replayid() != 0) {
    set_replayid(from.replayid());
  }
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  trainingqueue_.InternalSwap(&other->trainingqueue_);
  loadedunits_.InternalSwap(&other->loadedunits_);
  interceptors_.InternalSwap(&other->interceptors_);
  larva_.InternalSwap(&other->larva_);
  isvisible_.InternalSwap(&other->isvisible_);
  swap(position_, other->position_);
  swap(targetposition_, other->targetposition_);
  swap(ordertargetposition_, other->ordertargetposition_);
  swap(rallyposition_, other->rallyposition_);
  swap(id_, other->id_);
  swap(player_, other->player_);
  swap(angle_, other->angle_);
  swap(type_, other->type_);
  swap(hitpoints_, other->hitpoints_);
  swap(velocityx_, other->velocityx_);
  swap(velocityy_, other->velocityy_);
  swap(lasthitpoints_, other->lasthitpoints_);
  swap(shields_, other->shields_);
  swap(energy_, other->energy_);
  swap(resources_, other->resources_);
  swap(resourcegroup_, other->resourcegroup_);
  swap(killcount_, other->killcount_);
  swap(acidsporecount_, other->acidsporecount_);
  swap(scarabcount_, other->scarabcount_);
  swap(interceptorcount_, other->interceptorcount_);
  swap(spiderminecount_, other->spiderminecount_);
  swap(groundweaponcooldown_, other->groundweaponcooldown_);
  swap(airweaponcooldown_, other->airweaponcooldown_);
  swap(spellcooldown_, other->spellcooldown_);
  swap(defensematrixpoints_, other->defensematrixpoints_);
  swap(defensematrixtimer_, other->defensematrixtimer_);
  swap(ensnaretimer_, other->ensnaretimer_);
  swap(irradiatetimer_, other->irradiatetimer_);
  swap(lockdowntimer_, other->lockdowntimer_);
  swap(maelstromtimer_, other->maelstromtimer_);
  swap(ordertimer_, other->ordertimer_);
  swap(plaguetimer_, other->plaguetimer_);
  swap(removetimer_, other->removetimer_);
  swap(stasistimer_, other->stasistimer_);
  swap(stimtimer_, other->stimtimer_);
  swap(buildtype_, other->buildtype_);
  swap(tech_, other->tech_);
  swap(upgrade_, other->upgrade_);
  swap(remainingbuildtime_, other->remainingbuildtime_);
  swap(remainingtraintime_, other->remainingtraintime_);
  swap(remainingresearchtime_, other->remainingresearchtime_);
  swap(remainingupgradetime_, other->remainingupgradetime_);
  swap(buildunit_, other->buildunit_);
  swap(target_, other->target_);
  swap(order_, other->order_);
  swap(ordertarget_, other->ordertarget_);
  swap(secondaryorder_, other->secondaryorder_);
  swap(rallyunit_, other->rallyunit_);
  swap(addon_, other->addon_);
  swap(nydusexit_, other->nydusexit_);
  swap(powerup_, other->powerup_);
  swap(transport_, other->transport_);
  swap(carrier_, other->carrier_);
  swap(hatchery_, other->hatchery_);
  swap(exists_, other->exists_);
  swap(hasnuke_, other->hasnuke_);
  swap(isaccelerating_, other->isaccelerating_);
  swap(isattacking_, other->isattacking_);
  swap(isattackframe_, other->isattackframe_);
  swap(isbeinggathered_, other->isbeinggathered_);
  swap(isbeinghealed_, other->isbeinghealed_);
  swap(isblind_, other->isblind_);
  swap(carryresourcetype_, other->carryresourcetype_);
  swap(isbraking_, other->isbraking_);
  swap(isburrowed_, other->isburrowed_);
  swap(iscloaked_, other->iscloaked_);
  swap(iscompleted_, other->iscompleted_);
  swap(isconstructing_, other->isconstructing_);
  swap(isdetected_, other->isdetected_);
  swap(isgathering_, other->isgathering_);
  swap(ishallucination_, other->ishallucination_);
  swap(isidle_, other->isidle_);
  swap(isinterruptible_, other->isinterruptible_);
  swap(isinvincible_, other->isinvincible_);
  swap(islifted_, other->islifted_);
  swap(ismorphing_, other->ismorphing_);
  swap(ismoving_, other->ismoving_);
  swap(isparasited_, other->isparasited_);
  swap(isselected_, other->isselected_);
  swap(isstartingattack_, other->isstartingattack_);
  swap(isstuck_, other->isstuck_);
  swap(istraining_, other->istraining_);
  swap(isunderstorm_, other->isunderstorm_);
  swap(isunderdarkswarm_, other->isunderdarkswarm_);
  swap(isunderdweb_, other->isunderdweb_);
  swap(ispowered_, other->ispowered_);
  swap(recentlyattacked_, other->recentlyattacked_);
  swap(buttonset_, other->buttonset_);
  swap(lastcommandframe_, other->lastcommandframe_);
  swap(lastcommand_, other->lastcommand_);
  swap(lastattackerplayer_, other->lastattackerplayer_);
  swap(replayid_, other->replayid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Unit::GetTypeName() const {
  return "bwapi.data.Unit";
}


// ===================================================================

void Region::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kIdFieldNumber;
const int Region::kIslandIDFieldNumber;
const int Region::kCenterXFieldNumber;
const int Region::kCenterYFieldNumber;
const int Region::kPriorityFieldNumber;
const int Region::kLeftMostFieldNumber;
const int Region::kRightMostFieldNumber;
const int Region::kTopMostFieldNumber;
const int Region::kBottomMostFieldNumber;
const int Region::kNeighborCountFieldNumber;
const int Region::kNeighborsFieldNumber;
const int Region::kIsAccessibleFieldNumber;
const int Region::kIsHigherGroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Region.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Region)
}
Region::Region(const Region& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      neighbors_(from.neighbors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ishigherground_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ishigherground_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Region)
}

void Region::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishigherground_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ishigherground_));
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:bwapi.data.Region)
  SharedDtor();
}

void Region::SharedDtor() {
}

void Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Region& Region::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Region.base);
  return *internal_default_instance();
}


void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbors_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ishigherground_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ishigherground_));
  _internal_metadata_.Clear();
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Region)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 islandID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &islandid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 center_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 center_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 priority = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 leftMost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftmost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rightMost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightmost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 topMost = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &topmost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bottomMost = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottommost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 neighborCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neighborcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 neighbors = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_neighbors())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_neighbors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isAccessible = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaccessible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isHigherGround = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishigherground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 islandID = 2;
  if (this->islandid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->islandid(), output);
  }

  // int32 center_x = 3;
  if (this->center_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->center_x(), output);
  }

  // int32 center_y = 4;
  if (this->center_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->center_y(), output);
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priority(), output);
  }

  // int32 leftMost = 6;
  if (this->leftmost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leftmost(), output);
  }

  // int32 rightMost = 7;
  if (this->rightmost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rightmost(), output);
  }

  // int32 topMost = 8;
  if (this->topmost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->topmost(), output);
  }

  // int32 bottomMost = 9;
  if (this->bottommost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bottommost(), output);
  }

  // int32 neighborCount = 10;
  if (this->neighborcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->neighborcount(), output);
  }

  // repeated int32 neighbors = 11;
  if (this->neighbors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _neighbors_cached_byte_size_));
  }
  for (int i = 0, n = this->neighbors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->neighbors(i), output);
  }

  // bool isAccessible = 12;
  if (this->isaccessible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isaccessible(), output);
  }

  // bool isHigherGround = 13;
  if (this->ishigherground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->ishigherground(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Region)
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Region)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int32 neighbors = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->neighbors_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _neighbors_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 islandID = 2;
  if (this->islandid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->islandid());
  }

  // int32 center_x = 3;
  if (this->center_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_x());
  }

  // int32 center_y = 4;
  if (this->center_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_y());
  }

  // int32 priority = 5;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->priority());
  }

  // int32 leftMost = 6;
  if (this->leftmost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftmost());
  }

  // int32 rightMost = 7;
  if (this->rightmost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rightmost());
  }

  // int32 topMost = 8;
  if (this->topmost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->topmost());
  }

  // int32 bottomMost = 9;
  if (this->bottommost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bottommost());
  }

  // int32 neighborCount = 10;
  if (this->neighborcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->neighborcount());
  }

  // bool isAccessible = 12;
  if (this->isaccessible() != 0) {
    total_size += 1 + 1;
  }

  // bool isHigherGround = 13;
  if (this->ishigherground() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Region::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Region*>(&from));
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neighbors_.MergeFrom(from.neighbors_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.islandid() != 0) {
    set_islandid(from.islandid());
  }
  if (from.center_x() != 0) {
    set_center_x(from.center_x());
  }
  if (from.center_y() != 0) {
    set_center_y(from.center_y());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.leftmost() != 0) {
    set_leftmost(from.leftmost());
  }
  if (from.rightmost() != 0) {
    set_rightmost(from.rightmost());
  }
  if (from.topmost() != 0) {
    set_topmost(from.topmost());
  }
  if (from.bottommost() != 0) {
    set_bottommost(from.bottommost());
  }
  if (from.neighborcount() != 0) {
    set_neighborcount(from.neighborcount());
  }
  if (from.isaccessible() != 0) {
    set_isaccessible(from.isaccessible());
  }
  if (from.ishigherground() != 0) {
    set_ishigherground(from.ishigherground());
  }
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  using std::swap;
  neighbors_.InternalSwap(&other->neighbors_);
  swap(id_, other->id_);
  swap(islandid_, other->islandid_);
  swap(center_x_, other->center_x_);
  swap(center_y_, other->center_y_);
  swap(priority_, other->priority_);
  swap(leftmost_, other->leftmost_);
  swap(rightmost_, other->rightmost_);
  swap(topmost_, other->topmost_);
  swap(bottommost_, other->bottommost_);
  swap(neighborcount_, other->neighborcount_);
  swap(isaccessible_, other->isaccessible_);
  swap(ishigherground_, other->ishigherground_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Region::GetTypeName() const {
  return "bwapi.data.Region";
}


// ===================================================================

void Bullet::InitAsDefaultInstance() {
  ::bwapi::data::_Bullet_default_instance_._instance.get_mutable()->position_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
  ::bwapi::data::_Bullet_default_instance_._instance.get_mutable()->targetposition_ = const_cast< ::bwapi::data::Point*>(
      ::bwapi::data::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bullet::kIdFieldNumber;
const int Bullet::kPlayerFieldNumber;
const int Bullet::kTypeFieldNumber;
const int Bullet::kSourceFieldNumber;
const int Bullet::kPositionFieldNumber;
const int Bullet::kAngleFieldNumber;
const int Bullet::kVelocityXFieldNumber;
const int Bullet::kVelocityYFieldNumber;
const int Bullet::kTargetFieldNumber;
const int Bullet::kTargetPositionFieldNumber;
const int Bullet::kRemoveTimerFieldNumber;
const int Bullet::kExistsFieldNumber;
const int Bullet::kIsVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bullet::Bullet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Bullet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Bullet)
}
Bullet::Bullet(const Bullet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      isvisible_(from.isvisible_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::bwapi::data::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_targetposition()) {
    targetposition_ = new ::bwapi::data::Point(*from.targetposition_);
  } else {
    targetposition_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&exists_) -
    reinterpret_cast<char*>(&id_)) + sizeof(exists_));
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Bullet)
}

void Bullet::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&position_)) + sizeof(exists_));
}

Bullet::~Bullet() {
  // @@protoc_insertion_point(destructor:bwapi.data.Bullet)
  SharedDtor();
}

void Bullet::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete targetposition_;
}

void Bullet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Bullet& Bullet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Bullet.base);
  return *internal_default_instance();
}


void Bullet::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isvisible_.Clear();
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && targetposition_ != NULL) {
    delete targetposition_;
  }
  targetposition_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&id_)) + sizeof(exists_));
  _internal_metadata_.Clear();
}

bool Bullet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Bullet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocityX = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocityY = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.data.Point targetPosition = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_targetposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 removeTimer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &removetimer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exists = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool isVisible = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_isvisible())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 106u, input, this->mutable_isvisible())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Bullet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Bullet)
  return false;
#undef DO_
}

void Bullet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Bullet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 player = 2;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 source = 4;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }

  // .bwapi.data.Point position = 5;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_position(), output);
  }

  // double angle = 6;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle(), output);
  }

  // double velocityX = 7;
  if (this->velocityx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->velocityx(), output);
  }

  // double velocityY = 8;
  if (this->velocityy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->velocityy(), output);
  }

  // int32 target = 9;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->target(), output);
  }

  // .bwapi.data.Point targetPosition = 10;
  if (this->has_targetposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->_internal_targetposition(), output);
  }

  // int32 removeTimer = 11;
  if (this->removetimer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->removetimer(), output);
  }

  // bool exists = 12;
  if (this->exists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->exists(), output);
  }

  // repeated bool isVisible = 13;
  if (this->isvisible_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _isvisible_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->isvisible().data(), this->isvisible_size(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Bullet)
}

size_t Bullet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Bullet)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated bool isVisible = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->isvisible_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _isvisible_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .bwapi.data.Point position = 5;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .bwapi.data.Point targetPosition = 10;
  if (this->has_targetposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *targetposition_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 player = 2;
  if (this->player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 source = 4;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source());
  }

  // double angle = 6;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  // double velocityX = 7;
  if (this->velocityx() != 0) {
    total_size += 1 + 8;
  }

  // double velocityY = 8;
  if (this->velocityy() != 0) {
    total_size += 1 + 8;
  }

  // int32 target = 9;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  // int32 removeTimer = 11;
  if (this->removetimer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->removetimer());
  }

  // bool exists = 12;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bullet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bullet*>(&from));
}

void Bullet::MergeFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Bullet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  isvisible_.MergeFrom(from.isvisible_);
  if (from.has_position()) {
    mutable_position()->::bwapi::data::Point::MergeFrom(from.position());
  }
  if (from.has_targetposition()) {
    mutable_targetposition()->::bwapi::data::Point::MergeFrom(from.targetposition());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
  if (from.velocityx() != 0) {
    set_velocityx(from.velocityx());
  }
  if (from.velocityy() != 0) {
    set_velocityy(from.velocityy());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.removetimer() != 0) {
    set_removetimer(from.removetimer());
  }
  if (from.exists() != 0) {
    set_exists(from.exists());
  }
}

void Bullet::CopyFrom(const Bullet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Bullet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bullet::IsInitialized() const {
  return true;
}

void Bullet::Swap(Bullet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bullet::InternalSwap(Bullet* other) {
  using std::swap;
  isvisible_.InternalSwap(&other->isvisible_);
  swap(position_, other->position_);
  swap(targetposition_, other->targetposition_);
  swap(id_, other->id_);
  swap(player_, other->player_);
  swap(type_, other->type_);
  swap(source_, other->source_);
  swap(angle_, other->angle_);
  swap(velocityx_, other->velocityx_);
  swap(velocityy_, other->velocityy_);
  swap(target_, other->target_);
  swap(removetimer_, other->removetimer_);
  swap(exists_, other->exists_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Bullet::GetTypeName() const {
  return "bwapi.data.Bullet";
}


// ===================================================================

void Force::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Force::kIdFieldNumber;
const int Force::kPlayersFieldNumber;
const int Force::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Force::Force()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Force.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Force)
}
Force::Force(const Force& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Force)
}

void Force::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Force::~Force() {
  // @@protoc_insertion_point(destructor:bwapi.data.Force)
  SharedDtor();
}

void Force::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Force::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Force& Force::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Force.base);
  return *internal_default_instance();
}


void Force::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Force)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _internal_metadata_.Clear();
}

bool Force::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Force)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bwapi.data.Force.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Force)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Force)
  return false;
#undef DO_
}

void Force::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Force)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int32 players = 2;
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _players_cached_byte_size_));
  }
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->players(i), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bwapi.data.Force.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Force)
}

size_t Force::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Force)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated int32 players = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Force::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Force*>(&from));
}

void Force::MergeFrom(const Force& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Force)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Force::CopyFrom(const Force& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Force)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Force::IsInitialized() const {
  return true;
}

void Force::Swap(Force* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Force::InternalSwap(Force* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Force::GetTypeName() const {
  return "bwapi.data.Force";
}


// ===================================================================

void Game::InitAsDefaultInstance() {
  ::bwapi::data::_Game_default_instance_._instance.get_mutable()->gamedata_ = const_cast< ::bwapi::data::GameData*>(
      ::bwapi::data::GameData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Game::kGameDataFieldNumber;
const int Game::kPlayersFieldNumber;
const int Game::kUnitsFieldNumber;
const int Game::kRegionsFieldNumber;
const int Game::kBulletsFieldNumber;
const int Game::kForcesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Game::Game()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Game.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.data.Game)
}
Game::Game(const Game& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      players_(from.players_),
      units_(from.units_),
      regions_(from.regions_),
      bullets_(from.bullets_),
      forces_(from.forces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gamedata()) {
    gamedata_ = new ::bwapi::data::GameData(*from.gamedata_);
  } else {
    gamedata_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:bwapi.data.Game)
}

void Game::SharedCtor() {
  gamedata_ = NULL;
}

Game::~Game() {
  // @@protoc_insertion_point(destructor:bwapi.data.Game)
  SharedDtor();
}

void Game::SharedDtor() {
  if (this != internal_default_instance()) delete gamedata_;
}

void Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Game& Game::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Game.base);
  return *internal_default_instance();
}


void Game::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.data.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  units_.Clear();
  regions_.Clear();
  bullets_.Clear();
  forces_.Clear();
  if (GetArenaNoVirtual() == NULL && gamedata_ != NULL) {
    delete gamedata_;
  }
  gamedata_ = NULL;
  _internal_metadata_.Clear();
}

bool Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.data.Game)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bwapi.data.GameData gameData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Unit units = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Region regions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Bullet bullets = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bullets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .bwapi.data.Force forces = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_forces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.data.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.data.Game)
  return false;
#undef DO_
}

void Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.data.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bwapi.data.GameData gameData = 1;
  if (this->has_gamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_gamedata(), output);
  }

  // repeated .bwapi.data.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  // repeated .bwapi.data.Unit units = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->units(static_cast<int>(i)),
      output);
  }

  // repeated .bwapi.data.Region regions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->regions(static_cast<int>(i)),
      output);
  }

  // repeated .bwapi.data.Bullet bullets = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bullets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->bullets(static_cast<int>(i)),
      output);
  }

  // repeated .bwapi.data.Force forces = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->forces_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6,
      this->forces(static_cast<int>(i)),
      output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.data.Game)
}

size_t Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.data.Game)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .bwapi.data.Player players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .bwapi.data.Unit units = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->units(static_cast<int>(i)));
    }
  }

  // repeated .bwapi.data.Region regions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->regions(static_cast<int>(i)));
    }
  }

  // repeated .bwapi.data.Bullet bullets = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->bullets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bullets(static_cast<int>(i)));
    }
  }

  // repeated .bwapi.data.Force forces = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->forces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->forces(static_cast<int>(i)));
    }
  }

  // .bwapi.data.GameData gameData = 1;
  if (this->has_gamedata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamedata_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Game::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Game*>(&from));
}

void Game::MergeFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.data.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  units_.MergeFrom(from.units_);
  regions_.MergeFrom(from.regions_);
  bullets_.MergeFrom(from.bullets_);
  forces_.MergeFrom(from.forces_);
  if (from.has_gamedata()) {
    mutable_gamedata()->::bwapi::data::GameData::MergeFrom(from.gamedata());
  }
}

void Game::CopyFrom(const Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.data.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Game::IsInitialized() const {
  return true;
}

void Game::Swap(Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Game::InternalSwap(Game* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  CastToBase(&units_)->InternalSwap(CastToBase(&other->units_));
  CastToBase(&regions_)->InternalSwap(CastToBase(&other->regions_));
  CastToBase(&bullets_)->InternalSwap(CastToBase(&other->bullets_));
  CastToBase(&forces_)->InternalSwap(CastToBase(&other->forces_));
  swap(gamedata_, other->gamedata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Game::GetTypeName() const {
  return "bwapi.data.Game";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace bwapi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Point* Arena::CreateMaybeMessage< ::bwapi::data::Point >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::StaticMapData* Arena::CreateMaybeMessage< ::bwapi::data::StaticMapData >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::StaticMapData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::MapData* Arena::CreateMaybeMessage< ::bwapi::data::MapData >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::MapData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::GameData* Arena::CreateMaybeMessage< ::bwapi::data::GameData >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::GameData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Player* Arena::CreateMaybeMessage< ::bwapi::data::Player >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Unit* Arena::CreateMaybeMessage< ::bwapi::data::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Unit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Region* Arena::CreateMaybeMessage< ::bwapi::data::Region >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Region >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Bullet* Arena::CreateMaybeMessage< ::bwapi::data::Bullet >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Bullet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Force* Arena::CreateMaybeMessage< ::bwapi::data::Force >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Force >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::data::Game* Arena::CreateMaybeMessage< ::bwapi::data::Game >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::data::Game >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
