// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: init.proto

#ifndef PROTOBUF_INCLUDED_init_2eproto
#define PROTOBUF_INCLUDED_init_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "error.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_init_2eproto 

namespace protobuf_init_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_init_2eproto
namespace bwapi {
namespace init {
class ClientBroadcast;
class ClientBroadcastDefaultTypeInternal;
extern ClientBroadcastDefaultTypeInternal _ClientBroadcast_default_instance_;
class ClientResolution;
class ClientResolutionDefaultTypeInternal;
extern ClientResolutionDefaultTypeInternal _ClientResolution_default_instance_;
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
}  // namespace init
}  // namespace bwapi
namespace google {
namespace protobuf {
template<> ::bwapi::init::ClientBroadcast* Arena::CreateMaybeMessage<::bwapi::init::ClientBroadcast>(Arena*);
template<> ::bwapi::init::ClientResolution* Arena::CreateMaybeMessage<::bwapi::init::ClientResolution>(Arena*);
template<> ::bwapi::init::ServerResponse* Arena::CreateMaybeMessage<::bwapi::init::ServerResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace bwapi {
namespace init {

enum Protocol {
  PROTOBUF = 0,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Protocol_IsValid(int value);
const Protocol Protocol_MIN = PROTOBUF;
const Protocol Protocol_MAX = PROTOBUF;
const int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* Protocol_descriptor();
inline const ::std::string& Protocol_Name(Protocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    Protocol_descriptor(), value);
}
inline bool Protocol_Parse(
    const ::std::string& name, Protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class ClientBroadcast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bwapi.init.ClientBroadcast) */ {
 public:
  ClientBroadcast();
  virtual ~ClientBroadcast();

  ClientBroadcast(const ClientBroadcast& from);

  inline ClientBroadcast& operator=(const ClientBroadcast& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientBroadcast(ClientBroadcast&& from) noexcept
    : ClientBroadcast() {
    *this = ::std::move(from);
  }

  inline ClientBroadcast& operator=(ClientBroadcast&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientBroadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientBroadcast* internal_default_instance() {
    return reinterpret_cast<const ClientBroadcast*>(
               &_ClientBroadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ClientBroadcast* other);
  friend void swap(ClientBroadcast& a, ClientBroadcast& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientBroadcast* New() const final {
    return CreateMaybeMessage<ClientBroadcast>(NULL);
  }

  ClientBroadcast* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientBroadcast>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientBroadcast& from);
  void MergeFrom(const ClientBroadcast& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientBroadcast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bwapiVersion = 2;
  void clear_bwapiversion();
  static const int kBwapiVersionFieldNumber = 2;
  const ::std::string& bwapiversion() const;
  void set_bwapiversion(const ::std::string& value);
  #if LANG_CXX11
  void set_bwapiversion(::std::string&& value);
  #endif
  void set_bwapiversion(const char* value);
  void set_bwapiversion(const char* value, size_t size);
  ::std::string* mutable_bwapiversion();
  ::std::string* release_bwapiversion();
  void set_allocated_bwapiversion(::std::string* bwapiversion);

  // uint32 apiVersion = 1;
  void clear_apiversion();
  static const int kApiVersionFieldNumber = 1;
  ::google::protobuf::uint32 apiversion() const;
  void set_apiversion(::google::protobuf::uint32 value);

  // bool tournament = 3;
  void clear_tournament();
  static const int kTournamentFieldNumber = 3;
  bool tournament() const;
  void set_tournament(bool value);

  // @@protoc_insertion_point(class_scope:bwapi.init.ClientBroadcast)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bwapiversion_;
  ::google::protobuf::uint32 apiversion_;
  bool tournament_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_init_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bwapi.init.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ServerResponse* other);
  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(NULL);
  }

  ServerResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bwapi.init.Protocol supportedProtocols = 5;
  int supportedprotocols_size() const;
  void clear_supportedprotocols();
  static const int kSupportedProtocolsFieldNumber = 5;
  ::bwapi::init::Protocol supportedprotocols(int index) const;
  void set_supportedprotocols(int index, ::bwapi::init::Protocol value);
  void add_supportedprotocols(::bwapi::init::Protocol value);
  const ::google::protobuf::RepeatedField<int>& supportedprotocols() const;
  ::google::protobuf::RepeatedField<int>* mutable_supportedprotocols();

  // string engineType = 2;
  void clear_enginetype();
  static const int kEngineTypeFieldNumber = 2;
  const ::std::string& enginetype() const;
  void set_enginetype(const ::std::string& value);
  #if LANG_CXX11
  void set_enginetype(::std::string&& value);
  #endif
  void set_enginetype(const char* value);
  void set_enginetype(const char* value, size_t size);
  ::std::string* mutable_enginetype();
  ::std::string* release_enginetype();
  void set_allocated_enginetype(::std::string* enginetype);

  // string engineVersion = 3;
  void clear_engineversion();
  static const int kEngineVersionFieldNumber = 3;
  const ::std::string& engineversion() const;
  void set_engineversion(const ::std::string& value);
  #if LANG_CXX11
  void set_engineversion(::std::string&& value);
  #endif
  void set_engineversion(const char* value);
  void set_engineversion(const char* value, size_t size);
  ::std::string* mutable_engineversion();
  ::std::string* release_engineversion();
  void set_allocated_engineversion(::std::string* engineversion);

  // .bwapi.error.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  private:
  const ::bwapi::error::Error& _internal_error() const;
  public:
  const ::bwapi::error::Error& error() const;
  ::bwapi::error::Error* release_error();
  ::bwapi::error::Error* mutable_error();
  void set_allocated_error(::bwapi::error::Error* error);

  // uint32 apiVersion = 1;
  void clear_apiversion();
  static const int kApiVersionFieldNumber = 1;
  ::google::protobuf::uint32 apiversion() const;
  void set_apiversion(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:bwapi.init.ServerResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> supportedprotocols_;
  mutable int _supportedprotocols_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr enginetype_;
  ::google::protobuf::internal::ArenaStringPtr engineversion_;
  ::bwapi::error::Error* error_;
  ::google::protobuf::uint32 apiversion_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_init_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientResolution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bwapi.init.ClientResolution) */ {
 public:
  ClientResolution();
  virtual ~ClientResolution();

  ClientResolution(const ClientResolution& from);

  inline ClientResolution& operator=(const ClientResolution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientResolution(ClientResolution&& from) noexcept
    : ClientResolution() {
    *this = ::std::move(from);
  }

  inline ClientResolution& operator=(ClientResolution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientResolution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientResolution* internal_default_instance() {
    return reinterpret_cast<const ClientResolution*>(
               &_ClientResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientResolution* other);
  friend void swap(ClientResolution& a, ClientResolution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientResolution* New() const final {
    return CreateMaybeMessage<ClientResolution>(NULL);
  }

  ClientResolution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientResolution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientResolution& from);
  void MergeFrom(const ClientResolution& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientResolution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .bwapi.error.Error result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::bwapi::error::Error& _internal_result() const;
  public:
  const ::bwapi::error::Error& result() const;
  ::bwapi::error::Error* release_result();
  ::bwapi::error::Error* mutable_result();
  void set_allocated_result(::bwapi::error::Error* result);

  // .bwapi.init.Protocol protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  ::bwapi::init::Protocol protocol() const;
  void set_protocol(::bwapi::init::Protocol value);

  // @@protoc_insertion_point(class_scope:bwapi.init.ClientResolution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::bwapi::error::Error* result_;
  int protocol_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_init_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientBroadcast

// uint32 apiVersion = 1;
inline void ClientBroadcast::clear_apiversion() {
  apiversion_ = 0u;
}
inline ::google::protobuf::uint32 ClientBroadcast::apiversion() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ClientBroadcast.apiVersion)
  return apiversion_;
}
inline void ClientBroadcast::set_apiversion(::google::protobuf::uint32 value) {
  
  apiversion_ = value;
  // @@protoc_insertion_point(field_set:bwapi.init.ClientBroadcast.apiVersion)
}

// string bwapiVersion = 2;
inline void ClientBroadcast::clear_bwapiversion() {
  bwapiversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientBroadcast::bwapiversion() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ClientBroadcast.bwapiVersion)
  return bwapiversion_.GetNoArena();
}
inline void ClientBroadcast::set_bwapiversion(const ::std::string& value) {
  
  bwapiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bwapi.init.ClientBroadcast.bwapiVersion)
}
#if LANG_CXX11
inline void ClientBroadcast::set_bwapiversion(::std::string&& value) {
  
  bwapiversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bwapi.init.ClientBroadcast.bwapiVersion)
}
#endif
inline void ClientBroadcast::set_bwapiversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bwapiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bwapi.init.ClientBroadcast.bwapiVersion)
}
inline void ClientBroadcast::set_bwapiversion(const char* value, size_t size) {
  
  bwapiversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bwapi.init.ClientBroadcast.bwapiVersion)
}
inline ::std::string* ClientBroadcast::mutable_bwapiversion() {
  
  // @@protoc_insertion_point(field_mutable:bwapi.init.ClientBroadcast.bwapiVersion)
  return bwapiversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientBroadcast::release_bwapiversion() {
  // @@protoc_insertion_point(field_release:bwapi.init.ClientBroadcast.bwapiVersion)
  
  return bwapiversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientBroadcast::set_allocated_bwapiversion(::std::string* bwapiversion) {
  if (bwapiversion != NULL) {
    
  } else {
    
  }
  bwapiversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bwapiversion);
  // @@protoc_insertion_point(field_set_allocated:bwapi.init.ClientBroadcast.bwapiVersion)
}

// bool tournament = 3;
inline void ClientBroadcast::clear_tournament() {
  tournament_ = false;
}
inline bool ClientBroadcast::tournament() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ClientBroadcast.tournament)
  return tournament_;
}
inline void ClientBroadcast::set_tournament(bool value) {
  
  tournament_ = value;
  // @@protoc_insertion_point(field_set:bwapi.init.ClientBroadcast.tournament)
}

// -------------------------------------------------------------------

// ServerResponse

// uint32 apiVersion = 1;
inline void ServerResponse::clear_apiversion() {
  apiversion_ = 0u;
}
inline ::google::protobuf::uint32 ServerResponse::apiversion() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ServerResponse.apiVersion)
  return apiversion_;
}
inline void ServerResponse::set_apiversion(::google::protobuf::uint32 value) {
  
  apiversion_ = value;
  // @@protoc_insertion_point(field_set:bwapi.init.ServerResponse.apiVersion)
}

// string engineType = 2;
inline void ServerResponse::clear_enginetype() {
  enginetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::enginetype() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ServerResponse.engineType)
  return enginetype_.GetNoArena();
}
inline void ServerResponse::set_enginetype(const ::std::string& value) {
  
  enginetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bwapi.init.ServerResponse.engineType)
}
#if LANG_CXX11
inline void ServerResponse::set_enginetype(::std::string&& value) {
  
  enginetype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bwapi.init.ServerResponse.engineType)
}
#endif
inline void ServerResponse::set_enginetype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  enginetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bwapi.init.ServerResponse.engineType)
}
inline void ServerResponse::set_enginetype(const char* value, size_t size) {
  
  enginetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bwapi.init.ServerResponse.engineType)
}
inline ::std::string* ServerResponse::mutable_enginetype() {
  
  // @@protoc_insertion_point(field_mutable:bwapi.init.ServerResponse.engineType)
  return enginetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_enginetype() {
  // @@protoc_insertion_point(field_release:bwapi.init.ServerResponse.engineType)
  
  return enginetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_enginetype(::std::string* enginetype) {
  if (enginetype != NULL) {
    
  } else {
    
  }
  enginetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enginetype);
  // @@protoc_insertion_point(field_set_allocated:bwapi.init.ServerResponse.engineType)
}

// string engineVersion = 3;
inline void ServerResponse::clear_engineversion() {
  engineversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerResponse::engineversion() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ServerResponse.engineVersion)
  return engineversion_.GetNoArena();
}
inline void ServerResponse::set_engineversion(const ::std::string& value) {
  
  engineversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bwapi.init.ServerResponse.engineVersion)
}
#if LANG_CXX11
inline void ServerResponse::set_engineversion(::std::string&& value) {
  
  engineversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bwapi.init.ServerResponse.engineVersion)
}
#endif
inline void ServerResponse::set_engineversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  engineversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bwapi.init.ServerResponse.engineVersion)
}
inline void ServerResponse::set_engineversion(const char* value, size_t size) {
  
  engineversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bwapi.init.ServerResponse.engineVersion)
}
inline ::std::string* ServerResponse::mutable_engineversion() {
  
  // @@protoc_insertion_point(field_mutable:bwapi.init.ServerResponse.engineVersion)
  return engineversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerResponse::release_engineversion() {
  // @@protoc_insertion_point(field_release:bwapi.init.ServerResponse.engineVersion)
  
  return engineversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerResponse::set_allocated_engineversion(::std::string* engineversion) {
  if (engineversion != NULL) {
    
  } else {
    
  }
  engineversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engineversion);
  // @@protoc_insertion_point(field_set_allocated:bwapi.init.ServerResponse.engineVersion)
}

// .bwapi.error.Error error = 4;
inline bool ServerResponse::has_error() const {
  return this != internal_default_instance() && error_ != NULL;
}
inline const ::bwapi::error::Error& ServerResponse::_internal_error() const {
  return *error_;
}
inline const ::bwapi::error::Error& ServerResponse::error() const {
  const ::bwapi::error::Error* p = error_;
  // @@protoc_insertion_point(field_get:bwapi.init.ServerResponse.error)
  return p != NULL ? *p : *reinterpret_cast<const ::bwapi::error::Error*>(
      &::bwapi::error::_Error_default_instance_);
}
inline ::bwapi::error::Error* ServerResponse::release_error() {
  // @@protoc_insertion_point(field_release:bwapi.init.ServerResponse.error)
  
  ::bwapi::error::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::bwapi::error::Error* ServerResponse::mutable_error() {
  
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::bwapi::error::Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bwapi.init.ServerResponse.error)
  return error_;
}
inline void ServerResponse::set_allocated_error(::bwapi::error::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(error_);
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:bwapi.init.ServerResponse.error)
}

// repeated .bwapi.init.Protocol supportedProtocols = 5;
inline int ServerResponse::supportedprotocols_size() const {
  return supportedprotocols_.size();
}
inline void ServerResponse::clear_supportedprotocols() {
  supportedprotocols_.Clear();
}
inline ::bwapi::init::Protocol ServerResponse::supportedprotocols(int index) const {
  // @@protoc_insertion_point(field_get:bwapi.init.ServerResponse.supportedProtocols)
  return static_cast< ::bwapi::init::Protocol >(supportedprotocols_.Get(index));
}
inline void ServerResponse::set_supportedprotocols(int index, ::bwapi::init::Protocol value) {
  supportedprotocols_.Set(index, value);
  // @@protoc_insertion_point(field_set:bwapi.init.ServerResponse.supportedProtocols)
}
inline void ServerResponse::add_supportedprotocols(::bwapi::init::Protocol value) {
  supportedprotocols_.Add(value);
  // @@protoc_insertion_point(field_add:bwapi.init.ServerResponse.supportedProtocols)
}
inline const ::google::protobuf::RepeatedField<int>&
ServerResponse::supportedprotocols() const {
  // @@protoc_insertion_point(field_list:bwapi.init.ServerResponse.supportedProtocols)
  return supportedprotocols_;
}
inline ::google::protobuf::RepeatedField<int>*
ServerResponse::mutable_supportedprotocols() {
  // @@protoc_insertion_point(field_mutable_list:bwapi.init.ServerResponse.supportedProtocols)
  return &supportedprotocols_;
}

// -------------------------------------------------------------------

// ClientResolution

// .bwapi.error.Error result = 1;
inline bool ClientResolution::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline const ::bwapi::error::Error& ClientResolution::_internal_result() const {
  return *result_;
}
inline const ::bwapi::error::Error& ClientResolution::result() const {
  const ::bwapi::error::Error* p = result_;
  // @@protoc_insertion_point(field_get:bwapi.init.ClientResolution.result)
  return p != NULL ? *p : *reinterpret_cast<const ::bwapi::error::Error*>(
      &::bwapi::error::_Error_default_instance_);
}
inline ::bwapi::error::Error* ClientResolution::release_result() {
  // @@protoc_insertion_point(field_release:bwapi.init.ClientResolution.result)
  
  ::bwapi::error::Error* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::bwapi::error::Error* ClientResolution::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::bwapi::error::Error>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:bwapi.init.ClientResolution.result)
  return result_;
}
inline void ClientResolution::set_allocated_result(::bwapi::error::Error* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(result_);
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:bwapi.init.ClientResolution.result)
}

// .bwapi.init.Protocol protocol = 2;
inline void ClientResolution::clear_protocol() {
  protocol_ = 0;
}
inline ::bwapi::init::Protocol ClientResolution::protocol() const {
  // @@protoc_insertion_point(field_get:bwapi.init.ClientResolution.protocol)
  return static_cast< ::bwapi::init::Protocol >(protocol_);
}
inline void ClientResolution::set_protocol(::bwapi::init::Protocol value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:bwapi.init.ClientResolution.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace init
}  // namespace bwapi

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bwapi::init::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bwapi::init::Protocol>() {
  return ::bwapi::init::Protocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_init_2eproto
