// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_command_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_command_2eproto ::google::protobuf::internal::SCCInfo<14> scc_info_Command;
}  // namespace protobuf_command_2eproto
namespace protobuf_event_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_event_2eproto ::google::protobuf::internal::SCCInfo<18> scc_info_Event;
}  // namespace protobuf_event_2eproto
namespace protobuf_game_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_game_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndOfQueue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_game_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FrameUpdate;
}  // namespace protobuf_game_2eproto
namespace protobuf_init_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_init_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ClientBroadcast;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_init_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientResolution;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_init_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ServerResponse;
}  // namespace protobuf_init_2eproto
namespace bwapi {
namespace message {
class MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Message>
      _instance;
  const ::bwapi::init::ClientBroadcast* initbroadcast_;
  const ::bwapi::init::ServerResponse* initresponse_;
  const ::bwapi::init::ClientResolution* initresolution_;
  const ::bwapi::game::FrameUpdate* frameupdate_;
  const ::bwapi::game::EndOfQueue* endofqueue_;
  const ::bwapi::command::Command* command_;
  const ::bwapi::event::Event* event_;
} _Message_default_instance_;
}  // namespace message
}  // namespace bwapi
namespace protobuf_message_2eproto {
static void InitDefaultsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bwapi::message::_Message_default_instance_;
    new (ptr) ::bwapi::message::Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bwapi::message::Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Message =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsMessage}, {
      &protobuf_init_2eproto::scc_info_ClientBroadcast.base,
      &protobuf_init_2eproto::scc_info_ServerResponse.base,
      &protobuf_init_2eproto::scc_info_ClientResolution.base,
      &protobuf_game_2eproto::scc_info_FrameUpdate.base,
      &protobuf_game_2eproto::scc_info_EndOfQueue.base,
      &protobuf_command_2eproto::scc_info_Command.base,
      &protobuf_event_2eproto::scc_info_Event.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Message.base);
}

}  // namespace protobuf_message_2eproto
namespace bwapi {
namespace message {

// ===================================================================

void Message::InitAsDefaultInstance() {
}
void Message::set_allocated_initbroadcast(::bwapi::init::ClientBroadcast* initbroadcast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (initbroadcast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initbroadcast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initbroadcast, submessage_arena);
    }
    set_has_initbroadcast();
    msg_.initbroadcast_ = initbroadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.initBroadcast)
}
void Message::clear_initbroadcast() {
  if (has_initbroadcast()) {
    delete msg_.initbroadcast_;
    clear_has_msg();
  }
}
void Message::set_allocated_initresponse(::bwapi::init::ServerResponse* initresponse) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (initresponse) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initresponse = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initresponse, submessage_arena);
    }
    set_has_initresponse();
    msg_.initresponse_ = initresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.initResponse)
}
void Message::clear_initresponse() {
  if (has_initresponse()) {
    delete msg_.initresponse_;
    clear_has_msg();
  }
}
void Message::set_allocated_initresolution(::bwapi::init::ClientResolution* initresolution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (initresolution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      initresolution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, initresolution, submessage_arena);
    }
    set_has_initresolution();
    msg_.initresolution_ = initresolution;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.initResolution)
}
void Message::clear_initresolution() {
  if (has_initresolution()) {
    delete msg_.initresolution_;
    clear_has_msg();
  }
}
void Message::set_allocated_frameupdate(::bwapi::game::FrameUpdate* frameupdate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (frameupdate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frameupdate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frameupdate, submessage_arena);
    }
    set_has_frameupdate();
    msg_.frameupdate_ = frameupdate;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.frameUpdate)
}
void Message::clear_frameupdate() {
  if (has_frameupdate()) {
    delete msg_.frameupdate_;
    clear_has_msg();
  }
}
void Message::set_allocated_endofqueue(::bwapi::game::EndOfQueue* endofqueue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (endofqueue) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      endofqueue = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, endofqueue, submessage_arena);
    }
    set_has_endofqueue();
    msg_.endofqueue_ = endofqueue;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.endOfQueue)
}
void Message::clear_endofqueue() {
  if (has_endofqueue()) {
    delete msg_.endofqueue_;
    clear_has_msg();
  }
}
void Message::set_allocated_command(::bwapi::command::Command* command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
    msg_.command_ = command;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.command)
}
void Message::clear_command() {
  if (has_command()) {
    delete msg_.command_;
    clear_has_msg();
  }
}
void Message::set_allocated_event(::bwapi::event::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:bwapi.message.Message.event)
}
void Message::clear_event() {
  if (has_event()) {
    delete msg_.event_;
    clear_has_msg();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kInitBroadcastFieldNumber;
const int Message::kInitResponseFieldNumber;
const int Message::kInitResolutionFieldNumber;
const int Message::kFrameUpdateFieldNumber;
const int Message::kEndOfQueueFieldNumber;
const int Message::kCommandFieldNumber;
const int Message::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Message.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:bwapi.message.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kInitBroadcast: {
      mutable_initbroadcast()->::bwapi::init::ClientBroadcast::MergeFrom(from.initbroadcast());
      break;
    }
    case kInitResponse: {
      mutable_initresponse()->::bwapi::init::ServerResponse::MergeFrom(from.initresponse());
      break;
    }
    case kInitResolution: {
      mutable_initresolution()->::bwapi::init::ClientResolution::MergeFrom(from.initresolution());
      break;
    }
    case kFrameUpdate: {
      mutable_frameupdate()->::bwapi::game::FrameUpdate::MergeFrom(from.frameupdate());
      break;
    }
    case kEndOfQueue: {
      mutable_endofqueue()->::bwapi::game::EndOfQueue::MergeFrom(from.endofqueue());
      break;
    }
    case kCommand: {
      mutable_command()->::bwapi::command::Command::MergeFrom(from.command());
      break;
    }
    case kEvent: {
      mutable_event()->::bwapi::event::Event::MergeFrom(from.event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bwapi.message.Message)
}

void Message::SharedCtor() {
  clear_has_msg();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:bwapi.message.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Message.base);
  return *internal_default_instance();
}


void Message::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:bwapi.message.Message)
  switch (msg_case()) {
    case kInitBroadcast: {
      delete msg_.initbroadcast_;
      break;
    }
    case kInitResponse: {
      delete msg_.initresponse_;
      break;
    }
    case kInitResolution: {
      delete msg_.initresolution_;
      break;
    }
    case kFrameUpdate: {
      delete msg_.frameupdate_;
      break;
    }
    case kEndOfQueue: {
      delete msg_.endofqueue_;
      break;
    }
    case kCommand: {
      delete msg_.command_;
      break;
    }
    case kEvent: {
      delete msg_.event_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:bwapi.message.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:bwapi.message.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .bwapi.init.ClientBroadcast initBroadcast = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initbroadcast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.init.ServerResponse initResponse = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initresponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.init.ClientResolution initResolution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initresolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.game.EndOfQueue endOfQueue = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_endofqueue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.command.Command command = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.event.Event event = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .bwapi.game.FrameUpdate frameUpdate = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frameupdate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bwapi.message.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bwapi.message.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bwapi.message.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bwapi.init.ClientBroadcast initBroadcast = 1;
  if (has_initbroadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_initbroadcast(), output);
  }

  // .bwapi.init.ServerResponse initResponse = 2;
  if (has_initresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_initresponse(), output);
  }

  // .bwapi.init.ClientResolution initResolution = 3;
  if (has_initresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_initresolution(), output);
  }

  // .bwapi.game.EndOfQueue endOfQueue = 4;
  if (has_endofqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_endofqueue(), output);
  }

  // .bwapi.command.Command command = 5;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_command(), output);
  }

  // .bwapi.event.Event event = 6;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_event(), output);
  }

  // .bwapi.game.FrameUpdate frameUpdate = 1000;
  if (has_frameupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1000, this->_internal_frameupdate(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:bwapi.message.Message)
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bwapi.message.Message)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  switch (msg_case()) {
    // .bwapi.init.ClientBroadcast initBroadcast = 1;
    case kInitBroadcast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.initbroadcast_);
      break;
    }
    // .bwapi.init.ServerResponse initResponse = 2;
    case kInitResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.initresponse_);
      break;
    }
    // .bwapi.init.ClientResolution initResolution = 3;
    case kInitResolution: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.initresolution_);
      break;
    }
    // .bwapi.game.FrameUpdate frameUpdate = 1000;
    case kFrameUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.frameupdate_);
      break;
    }
    // .bwapi.game.EndOfQueue endOfQueue = 4;
    case kEndOfQueue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.endofqueue_);
      break;
    }
    // .bwapi.command.Command command = 5;
    case kCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.command_);
      break;
    }
    // .bwapi.event.Event event = 6;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.event_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Message*>(&from));
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bwapi.message.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kInitBroadcast: {
      mutable_initbroadcast()->::bwapi::init::ClientBroadcast::MergeFrom(from.initbroadcast());
      break;
    }
    case kInitResponse: {
      mutable_initresponse()->::bwapi::init::ServerResponse::MergeFrom(from.initresponse());
      break;
    }
    case kInitResolution: {
      mutable_initresolution()->::bwapi::init::ClientResolution::MergeFrom(from.initresolution());
      break;
    }
    case kFrameUpdate: {
      mutable_frameupdate()->::bwapi::game::FrameUpdate::MergeFrom(from.frameupdate());
      break;
    }
    case kEndOfQueue: {
      mutable_endofqueue()->::bwapi::game::EndOfQueue::MergeFrom(from.endofqueue());
      break;
    }
    case kCommand: {
      mutable_command()->::bwapi::command::Command::MergeFrom(from.command());
      break;
    }
    case kEvent: {
      mutable_event()->::bwapi::event::Event::MergeFrom(from.event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bwapi.message.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Message::GetTypeName() const {
  return "bwapi.message.Message";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
}  // namespace bwapi
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::bwapi::message::Message* Arena::CreateMaybeMessage< ::bwapi::message::Message >(Arena* arena) {
  return Arena::CreateInternal< ::bwapi::message::Message >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
