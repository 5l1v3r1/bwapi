// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_data_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DamageBonus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_data_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Weapon;
}  // namespace protobuf_data_2eproto
namespace SCRAPIProtocol {
class AbilityDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbilityData>
      _instance;
} _AbilityData_default_instance_;
class DamageBonusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DamageBonus>
      _instance;
} _DamageBonus_default_instance_;
class WeaponDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Weapon>
      _instance;
} _Weapon_default_instance_;
class UnitTypeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnitTypeData>
      _instance;
} _UnitTypeData_default_instance_;
class UpgradeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpgradeData>
      _instance;
} _UpgradeData_default_instance_;
class BuffDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BuffData>
      _instance;
} _BuffData_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EffectData>
      _instance;
} _EffectData_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_data_2eproto {
static void InitDefaultsAbilityData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_AbilityData_default_instance_;
    new (ptr) ::SCRAPIProtocol::AbilityData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::AbilityData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AbilityData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAbilityData}, {}};

static void InitDefaultsDamageBonus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DamageBonus_default_instance_;
    new (ptr) ::SCRAPIProtocol::DamageBonus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DamageBonus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DamageBonus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDamageBonus}, {}};

static void InitDefaultsWeapon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Weapon_default_instance_;
    new (ptr) ::SCRAPIProtocol::Weapon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Weapon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Weapon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWeapon}, {
      &protobuf_data_2eproto::scc_info_DamageBonus.base,}};

static void InitDefaultsUnitTypeData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_UnitTypeData_default_instance_;
    new (ptr) ::SCRAPIProtocol::UnitTypeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::UnitTypeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UnitTypeData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnitTypeData}, {
      &protobuf_data_2eproto::scc_info_Weapon.base,}};

static void InitDefaultsUpgradeData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_UpgradeData_default_instance_;
    new (ptr) ::SCRAPIProtocol::UpgradeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::UpgradeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpgradeData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpgradeData}, {}};

static void InitDefaultsBuffData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_BuffData_default_instance_;
    new (ptr) ::SCRAPIProtocol::BuffData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::BuffData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BuffData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBuffData}, {}};

static void InitDefaultsEffectData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_EffectData_default_instance_;
    new (ptr) ::SCRAPIProtocol::EffectData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::EffectData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EffectData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEffectData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AbilityData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DamageBonus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Weapon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnitTypeData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpgradeData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BuffData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EffectData.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, link_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, link_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, button_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, hotkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, remaps_to_ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, allow_minimap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, allow_autocast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, is_building_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, footprint_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, is_instant_placement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::AbilityData, cast_range_),
  4,
  0,
  5,
  1,
  2,
  3,
  6,
  7,
  14,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DamageBonus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DamageBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DamageBonus, attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DamageBonus, bonus_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, damage_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, attacks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Weapon, speed_),
  4,
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, unit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, cargo_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, mineral_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, vespene_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, food_required_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, food_provided_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, race_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, build_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, has_vespene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, has_minerals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, sight_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, tech_alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, unit_alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, tech_requirement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, require_attached_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, movement_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitTypeData, weapons_),
  1,
  0,
  10,
  2,
  5,
  6,
  7,
  15,
  8,
  9,
  14,
  11,
  12,
  18,
  ~0u,
  16,
  17,
  13,
  ~0u,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, upgrade_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, mineral_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, vespene_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, research_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UpgradeData, ability_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::BuffData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::BuffData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::BuffData, buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::BuffData, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, effect_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::EffectData, radius_),
  2,
  0,
  1,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, sizeof(::SCRAPIProtocol::AbilityData)},
  { 35, 42, sizeof(::SCRAPIProtocol::DamageBonus)},
  { 44, 55, sizeof(::SCRAPIProtocol::Weapon)},
  { 61, 88, sizeof(::SCRAPIProtocol::UnitTypeData)},
  { 110, 121, sizeof(::SCRAPIProtocol::UpgradeData)},
  { 127, 134, sizeof(::SCRAPIProtocol::BuffData)},
  { 136, 145, sizeof(::SCRAPIProtocol::EffectData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_AbilityData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DamageBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Weapon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_UnitTypeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_UpgradeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_BuffData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_EffectData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndata.proto\022\016SCRAPIProtocol\032\014common.pro"
      "to\"\304\003\n\013AbilityData\022\022\n\nability_id\030\001 \001(\r\022\021"
      "\n\tlink_name\030\002 \001(\t\022\022\n\nlink_index\030\003 \001(\r\022\023\n"
      "\013button_name\030\004 \001(\t\022\025\n\rfriendly_name\030\005 \001("
      "\t\022\016\n\006hotkey\030\006 \001(\t\022\034\n\024remaps_to_ability_i"
      "d\030\007 \001(\r\022\021\n\tavailable\030\010 \001(\010\0222\n\006target\030\t \001"
      "(\0162\".SCRAPIProtocol.AbilityData.Target\022\025"
      "\n\rallow_minimap\030\n \001(\010\022\026\n\016allow_autocast\030"
      "\013 \001(\010\022\023\n\013is_building\030\014 \001(\010\022\030\n\020footprint_"
      "radius\030\r \001(\002\022\034\n\024is_instant_placement\030\016 \001"
      "(\010\022\022\n\ncast_range\030\017 \001(\002\"I\n\006Target\022\010\n\004None"
      "\020\001\022\t\n\005Point\020\002\022\010\n\004Unit\020\003\022\017\n\013PointOrUnit\020\004"
      "\022\017\n\013PointOrNone\020\005\"J\n\013DamageBonus\022,\n\tattr"
      "ibute\030\001 \001(\0162\031.SCRAPIProtocol.Attribute\022\r"
      "\n\005bonus\030\002 \001(\002\"\327\001\n\006Weapon\022/\n\004type\030\001 \001(\0162!"
      ".SCRAPIProtocol.Weapon.TargetType\022\016\n\006dam"
      "age\030\002 \001(\002\0221\n\014damage_bonus\030\003 \003(\0132\033.SCRAPI"
      "Protocol.DamageBonus\022\017\n\007attacks\030\004 \001(\r\022\r\n"
      "\005range\030\005 \001(\002\022\r\n\005speed\030\006 \001(\002\"*\n\nTargetTyp"
      "e\022\n\n\006Ground\020\001\022\007\n\003Air\020\002\022\007\n\003Any\020\003\"\225\004\n\014Unit"
      "TypeData\022\017\n\007unit_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
      "\021\n\tavailable\030\003 \001(\010\022\022\n\ncargo_size\030\004 \001(\r\022\024"
      "\n\014mineral_cost\030\014 \001(\r\022\024\n\014vespene_cost\030\r \001"
      "(\r\022\025\n\rfood_required\030\016 \001(\002\022\025\n\rfood_provid"
      "ed\030\022 \001(\002\022\022\n\nability_id\030\017 \001(\r\022\"\n\004race\030\020 \001"
      "(\0162\024.SCRAPIProtocol.Race\022\022\n\nbuild_time\030\021"
      " \001(\002\022\023\n\013has_vespene\030\023 \001(\010\022\024\n\014has_mineral"
      "s\030\024 \001(\010\022\023\n\013sight_range\030\031 \001(\002\022\022\n\ntech_ali"
      "as\030\025 \003(\r\022\022\n\nunit_alias\030\026 \001(\r\022\030\n\020tech_req"
      "uirement\030\027 \001(\r\022\030\n\020require_attached\030\030 \001(\010"
      "\022-\n\nattributes\030\010 \003(\0162\031.SCRAPIProtocol.At"
      "tribute\022\026\n\016movement_speed\030\t \001(\002\022\r\n\005armor"
      "\030\n \001(\002\022\'\n\007weapons\030\013 \003(\0132\026.SCRAPIProtocol"
      ".Weapon\"\206\001\n\013UpgradeData\022\022\n\nupgrade_id\030\001 "
      "\001(\r\022\014\n\004name\030\002 \001(\t\022\024\n\014mineral_cost\030\003 \001(\r\022"
      "\024\n\014vespene_cost\030\004 \001(\r\022\025\n\rresearch_time\030\005"
      " \001(\002\022\022\n\nability_id\030\006 \001(\r\")\n\010BuffData\022\017\n\007"
      "buff_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"T\n\nEffectDat"
      "a\022\021\n\teffect_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\025\n\rfr"
      "iendly_name\030\003 \001(\t\022\016\n\006radius\030\004 \001(\002*\236\001\n\tAt"
      "tribute\022\t\n\005Light\020\001\022\013\n\007Armored\020\002\022\016\n\nBiolo"
      "gical\020\003\022\016\n\nMechanical\020\004\022\013\n\007Robotic\020\005\022\013\n\007"
      "Psionic\020\006\022\013\n\007Massive\020\007\022\r\n\tStructure\020\010\022\t\n"
      "\005Hover\020\t\022\n\n\006Heroic\020\n\022\014\n\010Summoned\020\013"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_data_2eproto
namespace SCRAPIProtocol {
const ::google::protobuf::EnumDescriptor* AbilityData_Target_descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_enum_descriptors[0];
}
bool AbilityData_Target_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AbilityData_Target AbilityData::None;
const AbilityData_Target AbilityData::Point;
const AbilityData_Target AbilityData::Unit;
const AbilityData_Target AbilityData::PointOrUnit;
const AbilityData_Target AbilityData::PointOrNone;
const AbilityData_Target AbilityData::Target_MIN;
const AbilityData_Target AbilityData::Target_MAX;
const int AbilityData::Target_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Weapon_TargetType_descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_enum_descriptors[1];
}
bool Weapon_TargetType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Weapon_TargetType Weapon::Ground;
const Weapon_TargetType Weapon::Air;
const Weapon_TargetType Weapon::Any;
const Weapon_TargetType Weapon::TargetType_MIN;
const Weapon_TargetType Weapon::TargetType_MAX;
const int Weapon::TargetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Attribute_descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_enum_descriptors[2];
}
bool Attribute_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AbilityData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityData::kAbilityIdFieldNumber;
const int AbilityData::kLinkNameFieldNumber;
const int AbilityData::kLinkIndexFieldNumber;
const int AbilityData::kButtonNameFieldNumber;
const int AbilityData::kFriendlyNameFieldNumber;
const int AbilityData::kHotkeyFieldNumber;
const int AbilityData::kRemapsToAbilityIdFieldNumber;
const int AbilityData::kAvailableFieldNumber;
const int AbilityData::kTargetFieldNumber;
const int AbilityData::kAllowMinimapFieldNumber;
const int AbilityData::kAllowAutocastFieldNumber;
const int AbilityData::kIsBuildingFieldNumber;
const int AbilityData::kFootprintRadiusFieldNumber;
const int AbilityData::kIsInstantPlacementFieldNumber;
const int AbilityData::kCastRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityData::AbilityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_AbilityData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.AbilityData)
}
AbilityData::AbilityData(const AbilityData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link_name()) {
    link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
  }
  button_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_button_name()) {
    button_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.button_name_);
  }
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendly_name()) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  hotkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hotkey()) {
    hotkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hotkey_);
  }
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.AbilityData)
}

void AbilityData::SharedCtor() {
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cast_range_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(cast_range_));
  target_ = 1;
}

AbilityData::~AbilityData() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.AbilityData)
  SharedDtor();
}

void AbilityData::SharedDtor() {
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AbilityData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AbilityData::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AbilityData& AbilityData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_AbilityData.base);
  return *internal_default_instance();
}


void AbilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.AbilityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      link_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      button_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      friendly_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hotkey_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&available_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(available_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&allow_minimap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cast_range_) -
        reinterpret_cast<char*>(&allow_minimap_)) + sizeof(cast_range_));
    target_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AbilityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.AbilityData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string link_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), static_cast<int>(this->link_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.AbilityData.link_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 link_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_link_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string button_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_button_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->button_name().data(), static_cast<int>(this->button_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.AbilityData.button_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friendly_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.AbilityData.friendly_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hotkey = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hotkey().data(), static_cast<int>(this->hotkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.AbilityData.hotkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 remaps_to_ability_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_remaps_to_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaps_to_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool available = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.AbilityData.Target target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::AbilityData_Target_IsValid(value)) {
            set_target(static_cast< ::SCRAPIProtocol::AbilityData_Target >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_minimap = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_allow_minimap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_minimap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_autocast = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_allow_autocast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_autocast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_building = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_building();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_building_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float footprint_radius = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_footprint_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &footprint_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_instant_placement = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_is_instant_placement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_instant_placement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cast_range = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_cast_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cast_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.AbilityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.AbilityData)
  return false;
#undef DO_
}

void AbilityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.AbilityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional string link_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // optional uint32 link_index = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->link_index(), output);
  }

  // optional string button_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->button_name().data(), static_cast<int>(this->button_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.button_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->button_name(), output);
  }

  // optional string friendly_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->friendly_name(), output);
  }

  // optional string hotkey = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotkey().data(), static_cast<int>(this->hotkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.hotkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hotkey(), output);
  }

  // optional uint32 remaps_to_ability_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remaps_to_ability_id(), output);
  }

  // optional bool available = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->available(), output);
  }

  // optional .SCRAPIProtocol.AbilityData.Target target = 9;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->target(), output);
  }

  // optional bool allow_minimap = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_minimap(), output);
  }

  // optional bool allow_autocast = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->allow_autocast(), output);
  }

  // optional bool is_building = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_building(), output);
  }

  // optional float footprint_radius = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->footprint_radius(), output);
  }

  // optional bool is_instant_placement = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_instant_placement(), output);
  }

  // optional float cast_range = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cast_range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.AbilityData)
}

::google::protobuf::uint8* AbilityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.AbilityData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional string link_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), static_cast<int>(this->link_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // optional uint32 link_index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->link_index(), target);
  }

  // optional string button_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->button_name().data(), static_cast<int>(this->button_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.button_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->button_name(), target);
  }

  // optional string friendly_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->friendly_name(), target);
  }

  // optional string hotkey = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotkey().data(), static_cast<int>(this->hotkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.AbilityData.hotkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hotkey(), target);
  }

  // optional uint32 remaps_to_ability_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remaps_to_ability_id(), target);
  }

  // optional bool available = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->available(), target);
  }

  // optional .SCRAPIProtocol.AbilityData.Target target = 9;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->target(), target);
  }

  // optional bool allow_minimap = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_minimap(), target);
  }

  // optional bool allow_autocast = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->allow_autocast(), target);
  }

  // optional bool is_building = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_building(), target);
  }

  // optional float footprint_radius = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->footprint_radius(), target);
  }

  // optional bool is_instant_placement = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_instant_placement(), target);
  }

  // optional float cast_range = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cast_range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.AbilityData)
  return target;
}

size_t AbilityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.AbilityData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string link_name = 2;
    if (has_link_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_name());
    }

    // optional string button_name = 4;
    if (has_button_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->button_name());
    }

    // optional string friendly_name = 5;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string hotkey = 6;
    if (has_hotkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotkey());
    }

    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 link_index = 3;
    if (has_link_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_index());
    }

    // optional uint32 remaps_to_ability_id = 7;
    if (has_remaps_to_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaps_to_ability_id());
    }

    // optional bool available = 8;
    if (has_available()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool allow_minimap = 10;
    if (has_allow_minimap()) {
      total_size += 1 + 1;
    }

    // optional bool allow_autocast = 11;
    if (has_allow_autocast()) {
      total_size += 1 + 1;
    }

    // optional bool is_building = 12;
    if (has_is_building()) {
      total_size += 1 + 1;
    }

    // optional float footprint_radius = 13;
    if (has_footprint_radius()) {
      total_size += 1 + 4;
    }

    // optional bool is_instant_placement = 14;
    if (has_is_instant_placement()) {
      total_size += 1 + 1;
    }

    // optional float cast_range = 15;
    if (has_cast_range()) {
      total_size += 1 + 4;
    }

    // optional .SCRAPIProtocol.AbilityData.Target target = 9;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbilityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.AbilityData)
  GOOGLE_DCHECK_NE(&from, this);
  const AbilityData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.AbilityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.AbilityData)
    MergeFrom(*source);
  }
}

void AbilityData::MergeFrom(const AbilityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.AbilityData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_button_name();
      button_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.button_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_friendly_name();
      friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hotkey();
      hotkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hotkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      link_index_ = from.link_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      remaps_to_ability_id_ = from.remaps_to_ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      available_ = from.available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      allow_minimap_ = from.allow_minimap_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_autocast_ = from.allow_autocast_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_building_ = from.is_building_;
    }
    if (cached_has_bits & 0x00000800u) {
      footprint_radius_ = from.footprint_radius_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_instant_placement_ = from.is_instant_placement_;
    }
    if (cached_has_bits & 0x00002000u) {
      cast_range_ = from.cast_range_;
    }
    if (cached_has_bits & 0x00004000u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AbilityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.AbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityData::CopyFrom(const AbilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.AbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityData::IsInitialized() const {
  return true;
}

void AbilityData::Swap(AbilityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityData::InternalSwap(AbilityData* other) {
  using std::swap;
  link_name_.Swap(&other->link_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  button_name_.Swap(&other->button_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  friendly_name_.Swap(&other->friendly_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotkey_.Swap(&other->hotkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ability_id_, other->ability_id_);
  swap(link_index_, other->link_index_);
  swap(remaps_to_ability_id_, other->remaps_to_ability_id_);
  swap(available_, other->available_);
  swap(allow_minimap_, other->allow_minimap_);
  swap(allow_autocast_, other->allow_autocast_);
  swap(is_building_, other->is_building_);
  swap(footprint_radius_, other->footprint_radius_);
  swap(is_instant_placement_, other->is_instant_placement_);
  swap(cast_range_, other->cast_range_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AbilityData::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DamageBonus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DamageBonus::kAttributeFieldNumber;
const int DamageBonus::kBonusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DamageBonus::DamageBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_DamageBonus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DamageBonus)
}
DamageBonus::DamageBonus(const DamageBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bonus_, &from.bonus_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&bonus_)) + sizeof(attribute_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DamageBonus)
}

void DamageBonus::SharedCtor() {
  bonus_ = 0;
  attribute_ = 1;
}

DamageBonus::~DamageBonus() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DamageBonus)
  SharedDtor();
}

void DamageBonus::SharedDtor() {
}

void DamageBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DamageBonus::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DamageBonus& DamageBonus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_DamageBonus.base);
  return *internal_default_instance();
}


void DamageBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DamageBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    bonus_ = 0;
    attribute_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DamageBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DamageBonus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Attribute attribute = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::Attribute_IsValid(value)) {
            set_attribute(static_cast< ::SCRAPIProtocol::Attribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bonus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DamageBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DamageBonus)
  return false;
#undef DO_
}

void DamageBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DamageBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Attribute attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attribute(), output);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bonus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DamageBonus)
}

::google::protobuf::uint8* DamageBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DamageBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Attribute attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attribute(), target);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bonus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DamageBonus)
  return target;
}

size_t DamageBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DamageBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float bonus = 2;
    if (has_bonus()) {
      total_size += 1 + 4;
    }

    // optional .SCRAPIProtocol.Attribute attribute = 1;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DamageBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DamageBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const DamageBonus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DamageBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DamageBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DamageBonus)
    MergeFrom(*source);
  }
}

void DamageBonus::MergeFrom(const DamageBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DamageBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_ = from.attribute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DamageBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DamageBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageBonus::CopyFrom(const DamageBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DamageBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageBonus::IsInitialized() const {
  return true;
}

void DamageBonus::Swap(DamageBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DamageBonus::InternalSwap(DamageBonus* other) {
  using std::swap;
  swap(bonus_, other->bonus_);
  swap(attribute_, other->attribute_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DamageBonus::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Weapon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weapon::kTypeFieldNumber;
const int Weapon::kDamageFieldNumber;
const int Weapon::kDamageBonusFieldNumber;
const int Weapon::kAttacksFieldNumber;
const int Weapon::kRangeFieldNumber;
const int Weapon::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weapon::Weapon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_Weapon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Weapon)
}
Weapon::Weapon(const Weapon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      damage_bonus_(from.damage_bonus_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&damage_, &from.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&damage_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Weapon)
}

void Weapon::SharedCtor() {
  ::memset(&damage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&damage_)) + sizeof(speed_));
  type_ = 1;
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Weapon)
  SharedDtor();
}

void Weapon::SharedDtor() {
}

void Weapon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Weapon::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Weapon& Weapon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_Weapon.base);
  return *internal_default_instance();
}


void Weapon::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damage_bonus_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_) -
        reinterpret_cast<char*>(&damage_)) + sizeof(speed_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Weapon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Weapon.TargetType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::Weapon_TargetType_IsValid(value)) {
            set_type(static_cast< ::SCRAPIProtocol::Weapon_TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float damage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.DamageBonus damage_bonus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_damage_bonus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_attacks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Weapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Weapon)
  return false;
#undef DO_
}

void Weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Weapon.TargetType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float damage = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->damage(), output);
  }

  // repeated .SCRAPIProtocol.DamageBonus damage_bonus = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_bonus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->damage_bonus(static_cast<int>(i)),
      output);
  }

  // optional uint32 attacks = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacks(), output);
  }

  // optional float range = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // optional float speed = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Weapon)
}

::google::protobuf::uint8* Weapon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Weapon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Weapon.TargetType type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float damage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->damage(), target);
  }

  // repeated .SCRAPIProtocol.DamageBonus damage_bonus = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->damage_bonus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->damage_bonus(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 attacks = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacks(), target);
  }

  // optional float range = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // optional float speed = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Weapon)
  return target;
}

size_t Weapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Weapon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.DamageBonus damage_bonus = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->damage_bonus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->damage_bonus(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional float damage = 2;
    if (has_damage()) {
      total_size += 1 + 4;
    }

    // optional uint32 attacks = 4;
    if (has_attacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacks());
    }

    // optional float range = 5;
    if (has_range()) {
      total_size += 1 + 4;
    }

    // optional float speed = 6;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional .SCRAPIProtocol.Weapon.TargetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Weapon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  const Weapon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Weapon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Weapon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Weapon)
    MergeFrom(*source);
  }
}

void Weapon::MergeFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Weapon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damage_bonus_.MergeFrom(from.damage_bonus_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      attacks_ = from.attacks_;
    }
    if (cached_has_bits & 0x00000004u) {
      range_ = from.range_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Weapon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weapon::CopyFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {
  return true;
}

void Weapon::Swap(Weapon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weapon::InternalSwap(Weapon* other) {
  using std::swap;
  CastToBase(&damage_bonus_)->InternalSwap(CastToBase(&other->damage_bonus_));
  swap(damage_, other->damage_);
  swap(attacks_, other->attacks_);
  swap(range_, other->range_);
  swap(speed_, other->speed_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Weapon::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnitTypeData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitTypeData::kUnitIdFieldNumber;
const int UnitTypeData::kNameFieldNumber;
const int UnitTypeData::kAvailableFieldNumber;
const int UnitTypeData::kCargoSizeFieldNumber;
const int UnitTypeData::kMineralCostFieldNumber;
const int UnitTypeData::kVespeneCostFieldNumber;
const int UnitTypeData::kFoodRequiredFieldNumber;
const int UnitTypeData::kFoodProvidedFieldNumber;
const int UnitTypeData::kAbilityIdFieldNumber;
const int UnitTypeData::kRaceFieldNumber;
const int UnitTypeData::kBuildTimeFieldNumber;
const int UnitTypeData::kHasVespeneFieldNumber;
const int UnitTypeData::kHasMineralsFieldNumber;
const int UnitTypeData::kSightRangeFieldNumber;
const int UnitTypeData::kTechAliasFieldNumber;
const int UnitTypeData::kUnitAliasFieldNumber;
const int UnitTypeData::kTechRequirementFieldNumber;
const int UnitTypeData::kRequireAttachedFieldNumber;
const int UnitTypeData::kAttributesFieldNumber;
const int UnitTypeData::kMovementSpeedFieldNumber;
const int UnitTypeData::kArmorFieldNumber;
const int UnitTypeData::kWeaponsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitTypeData::UnitTypeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_UnitTypeData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.UnitTypeData)
}
UnitTypeData::UnitTypeData(const UnitTypeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      attributes_(from.attributes_),
      weapons_(from.weapons_),
      tech_alias_(from.tech_alias_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sight_range_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(sight_range_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.UnitTypeData)
}

void UnitTypeData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sight_range_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(sight_range_));
}

UnitTypeData::~UnitTypeData() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.UnitTypeData)
  SharedDtor();
}

void UnitTypeData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnitTypeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnitTypeData::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitTypeData& UnitTypeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_UnitTypeData.base);
  return *internal_default_instance();
}


void UnitTypeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.UnitTypeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  weapons_.Clear();
  tech_alias_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&unit_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&food_required_) -
        reinterpret_cast<char*>(&unit_id_)) + sizeof(food_required_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&food_provided_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(food_provided_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&unit_alias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sight_range_) -
        reinterpret_cast<char*>(&unit_alias_)) + sizeof(sight_range_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnitTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.UnitTypeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.UnitTypeData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cargo_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cargo_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cargo_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Attribute attributes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::Attribute_IsValid(value)) {
            add_attributes(static_cast< ::SCRAPIProtocol::Attribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::SCRAPIProtocol::Attribute_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float movement_speed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_movement_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movement_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float armor = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_armor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Weapon weapons = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_weapons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mineral_cost = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_mineral_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineral_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vespene_cost = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_vespene_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float food_required = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_food_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &food_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Race race = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SCRAPIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float build_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_build_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float food_provided = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_food_provided();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &food_provided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_vespene = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_has_vespene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_vespene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_minerals = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_has_minerals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_minerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tech_alias = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168u, input, this->mutable_tech_alias())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tech_alias())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_alias = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_unit_alias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_alias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tech_requirement = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_tech_requirement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tech_requirement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool require_attached = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_require_attached();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_attached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sight_range = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
          set_has_sight_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sight_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.UnitTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.UnitTypeData)
  return false;
#undef DO_
}

void UnitTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.UnitTypeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.UnitTypeData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool available = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->available(), output);
  }

  // optional uint32 cargo_size = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cargo_size(), output);
  }

  // repeated .SCRAPIProtocol.Attribute attributes = 8;
  for (int i = 0, n = this->attributes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->attributes(i), output);
  }

  // optional float movement_speed = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->movement_speed(), output);
  }

  // optional float armor = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->armor(), output);
  }

  // repeated .SCRAPIProtocol.Weapon weapons = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->weapons(static_cast<int>(i)),
      output);
  }

  // optional uint32 mineral_cost = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mineral_cost(), output);
  }

  // optional uint32 vespene_cost = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vespene_cost(), output);
  }

  // optional float food_required = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->food_required(), output);
  }

  // optional uint32 ability_id = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ability_id(), output);
  }

  // optional .SCRAPIProtocol.Race race = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->race(), output);
  }

  // optional float build_time = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->build_time(), output);
  }

  // optional float food_provided = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->food_provided(), output);
  }

  // optional bool has_vespene = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->has_vespene(), output);
  }

  // optional bool has_minerals = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->has_minerals(), output);
  }

  // repeated uint32 tech_alias = 21;
  for (int i = 0, n = this->tech_alias_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->tech_alias(i), output);
  }

  // optional uint32 unit_alias = 22;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->unit_alias(), output);
  }

  // optional uint32 tech_requirement = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tech_requirement(), output);
  }

  // optional bool require_attached = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->require_attached(), output);
  }

  // optional float sight_range = 25;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->sight_range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.UnitTypeData)
}

::google::protobuf::uint8* UnitTypeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.UnitTypeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.UnitTypeData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool available = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->available(), target);
  }

  // optional uint32 cargo_size = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cargo_size(), target);
  }

  // repeated .SCRAPIProtocol.Attribute attributes = 8;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    8, this->attributes_, target);

  // optional float movement_speed = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->movement_speed(), target);
  }

  // optional float armor = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->armor(), target);
  }

  // repeated .SCRAPIProtocol.Weapon weapons = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->weapons(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 mineral_cost = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mineral_cost(), target);
  }

  // optional uint32 vespene_cost = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vespene_cost(), target);
  }

  // optional float food_required = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->food_required(), target);
  }

  // optional uint32 ability_id = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ability_id(), target);
  }

  // optional .SCRAPIProtocol.Race race = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->race(), target);
  }

  // optional float build_time = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->build_time(), target);
  }

  // optional float food_provided = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->food_provided(), target);
  }

  // optional bool has_vespene = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->has_vespene(), target);
  }

  // optional bool has_minerals = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->has_minerals(), target);
  }

  // repeated uint32 tech_alias = 21;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(21, this->tech_alias_, target);

  // optional uint32 unit_alias = 22;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->unit_alias(), target);
  }

  // optional uint32 tech_requirement = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tech_requirement(), target);
  }

  // optional bool require_attached = 24;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->require_attached(), target);
  }

  // optional float sight_range = 25;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->sight_range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.UnitTypeData)
  return target;
}

size_t UnitTypeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.UnitTypeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.Attribute attributes = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->attributes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->attributes(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .SCRAPIProtocol.Weapon weapons = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->weapons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->weapons(static_cast<int>(i)));
    }
  }

  // repeated uint32 tech_alias = 21;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tech_alias_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->tech_alias_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 unit_id = 1;
    if (has_unit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_id());
    }

    // optional uint32 cargo_size = 4;
    if (has_cargo_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cargo_size());
    }

    // optional float movement_speed = 9;
    if (has_movement_speed()) {
      total_size += 1 + 4;
    }

    // optional float armor = 10;
    if (has_armor()) {
      total_size += 1 + 4;
    }

    // optional uint32 mineral_cost = 12;
    if (has_mineral_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineral_cost());
    }

    // optional uint32 vespene_cost = 13;
    if (has_vespene_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene_cost());
    }

    // optional float food_required = 14;
    if (has_food_required()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 ability_id = 15;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional .SCRAPIProtocol.Race race = 16;
    if (has_race()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // optional bool available = 3;
    if (has_available()) {
      total_size += 1 + 1;
    }

    // optional bool has_vespene = 19;
    if (has_has_vespene()) {
      total_size += 2 + 1;
    }

    // optional bool has_minerals = 20;
    if (has_has_minerals()) {
      total_size += 2 + 1;
    }

    // optional bool require_attached = 24;
    if (has_require_attached()) {
      total_size += 2 + 1;
    }

    // optional float build_time = 17;
    if (has_build_time()) {
      total_size += 2 + 4;
    }

    // optional float food_provided = 18;
    if (has_food_provided()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 unit_alias = 22;
    if (has_unit_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_alias());
    }

    // optional uint32 tech_requirement = 23;
    if (has_tech_requirement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tech_requirement());
    }

    // optional float sight_range = 25;
    if (has_sight_range()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitTypeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.UnitTypeData)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitTypeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitTypeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.UnitTypeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.UnitTypeData)
    MergeFrom(*source);
  }
}

void UnitTypeData::MergeFrom(const UnitTypeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.UnitTypeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  weapons_.MergeFrom(from.weapons_);
  tech_alias_.MergeFrom(from.tech_alias_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      unit_id_ = from.unit_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cargo_size_ = from.cargo_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      movement_speed_ = from.movement_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00000020u) {
      mineral_cost_ = from.mineral_cost_;
    }
    if (cached_has_bits & 0x00000040u) {
      vespene_cost_ = from.vespene_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      food_required_ = from.food_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      race_ = from.race_;
    }
    if (cached_has_bits & 0x00000400u) {
      available_ = from.available_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_vespene_ = from.has_vespene_;
    }
    if (cached_has_bits & 0x00001000u) {
      has_minerals_ = from.has_minerals_;
    }
    if (cached_has_bits & 0x00002000u) {
      require_attached_ = from.require_attached_;
    }
    if (cached_has_bits & 0x00004000u) {
      build_time_ = from.build_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      food_provided_ = from.food_provided_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      unit_alias_ = from.unit_alias_;
    }
    if (cached_has_bits & 0x00020000u) {
      tech_requirement_ = from.tech_requirement_;
    }
    if (cached_has_bits & 0x00040000u) {
      sight_range_ = from.sight_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnitTypeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.UnitTypeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitTypeData::CopyFrom(const UnitTypeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.UnitTypeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitTypeData::IsInitialized() const {
  return true;
}

void UnitTypeData::Swap(UnitTypeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitTypeData::InternalSwap(UnitTypeData* other) {
  using std::swap;
  attributes_.InternalSwap(&other->attributes_);
  CastToBase(&weapons_)->InternalSwap(CastToBase(&other->weapons_));
  tech_alias_.InternalSwap(&other->tech_alias_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(unit_id_, other->unit_id_);
  swap(cargo_size_, other->cargo_size_);
  swap(movement_speed_, other->movement_speed_);
  swap(armor_, other->armor_);
  swap(mineral_cost_, other->mineral_cost_);
  swap(vespene_cost_, other->vespene_cost_);
  swap(food_required_, other->food_required_);
  swap(ability_id_, other->ability_id_);
  swap(race_, other->race_);
  swap(available_, other->available_);
  swap(has_vespene_, other->has_vespene_);
  swap(has_minerals_, other->has_minerals_);
  swap(require_attached_, other->require_attached_);
  swap(build_time_, other->build_time_);
  swap(food_provided_, other->food_provided_);
  swap(unit_alias_, other->unit_alias_);
  swap(tech_requirement_, other->tech_requirement_);
  swap(sight_range_, other->sight_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnitTypeData::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpgradeData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeData::kUpgradeIdFieldNumber;
const int UpgradeData::kNameFieldNumber;
const int UpgradeData::kMineralCostFieldNumber;
const int UpgradeData::kVespeneCostFieldNumber;
const int UpgradeData::kResearchTimeFieldNumber;
const int UpgradeData::kAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeData::UpgradeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_UpgradeData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.UpgradeData)
}
UpgradeData::UpgradeData(const UpgradeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&upgrade_id_, &from.upgrade_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&upgrade_id_)) + sizeof(ability_id_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.UpgradeData)
}

void UpgradeData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upgrade_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_id_) -
      reinterpret_cast<char*>(&upgrade_id_)) + sizeof(ability_id_));
}

UpgradeData::~UpgradeData() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.UpgradeData)
  SharedDtor();
}

void UpgradeData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpgradeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpgradeData::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeData& UpgradeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_UpgradeData.base);
  return *internal_default_instance();
}


void UpgradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.UpgradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&upgrade_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_id_) -
        reinterpret_cast<char*>(&upgrade_id_)) + sizeof(ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpgradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.UpgradeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 upgrade_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_upgrade_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.UpgradeData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mineral_cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_mineral_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineral_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vespene_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vespene_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float research_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_research_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &research_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.UpgradeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.UpgradeData)
  return false;
#undef DO_
}

void UpgradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.UpgradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 upgrade_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->upgrade_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.UpgradeData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 mineral_cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mineral_cost(), output);
  }

  // optional uint32 vespene_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vespene_cost(), output);
  }

  // optional float research_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->research_time(), output);
  }

  // optional uint32 ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.UpgradeData)
}

::google::protobuf::uint8* UpgradeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.UpgradeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 upgrade_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->upgrade_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.UpgradeData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 mineral_cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mineral_cost(), target);
  }

  // optional uint32 vespene_cost = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vespene_cost(), target);
  }

  // optional float research_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->research_time(), target);
  }

  // optional uint32 ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.UpgradeData)
  return target;
}

size_t UpgradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.UpgradeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 upgrade_id = 1;
    if (has_upgrade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_id());
    }

    // optional uint32 mineral_cost = 3;
    if (has_mineral_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineral_cost());
    }

    // optional uint32 vespene_cost = 4;
    if (has_vespene_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene_cost());
    }

    // optional float research_time = 5;
    if (has_research_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 ability_id = 6;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpgradeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.UpgradeData)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.UpgradeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.UpgradeData)
    MergeFrom(*source);
  }
}

void UpgradeData::MergeFrom(const UpgradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.UpgradeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      upgrade_id_ = from.upgrade_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      mineral_cost_ = from.mineral_cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      vespene_cost_ = from.vespene_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      research_time_ = from.research_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_id_ = from.ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpgradeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.UpgradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeData::CopyFrom(const UpgradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.UpgradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeData::IsInitialized() const {
  return true;
}

void UpgradeData::Swap(UpgradeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeData::InternalSwap(UpgradeData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upgrade_id_, other->upgrade_id_);
  swap(mineral_cost_, other->mineral_cost_);
  swap(vespene_cost_, other->vespene_cost_);
  swap(research_time_, other->research_time_);
  swap(ability_id_, other->ability_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpgradeData::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BuffData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuffData::kBuffIdFieldNumber;
const int BuffData::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuffData::BuffData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_BuffData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.BuffData)
}
BuffData::BuffData(const BuffData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  buff_id_ = from.buff_id_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.BuffData)
}

void BuffData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buff_id_ = 0u;
}

BuffData::~BuffData() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.BuffData)
  SharedDtor();
}

void BuffData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BuffData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BuffData::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuffData& BuffData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_BuffData.base);
  return *internal_default_instance();
}


void BuffData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.BuffData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  buff_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.BuffData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buff_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_buff_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.BuffData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.BuffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.BuffData)
  return false;
#undef DO_
}

void BuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.BuffData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buff_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.BuffData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.BuffData)
}

::google::protobuf::uint8* BuffData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.BuffData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buff_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.BuffData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.BuffData)
  return target;
}

size_t BuffData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.BuffData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuffData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.BuffData)
  GOOGLE_DCHECK_NE(&from, this);
  const BuffData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuffData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.BuffData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.BuffData)
    MergeFrom(*source);
  }
}

void BuffData::MergeFrom(const BuffData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.BuffData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      buff_id_ = from.buff_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuffData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.BuffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffData::CopyFrom(const BuffData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.BuffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffData::IsInitialized() const {
  return true;
}

void BuffData::Swap(BuffData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuffData::InternalSwap(BuffData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buff_id_, other->buff_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BuffData::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdFieldNumber;
const int EffectData::kNameFieldNumber;
const int EffectData::kFriendlyNameFieldNumber;
const int EffectData::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_data_2eproto::scc_info_EffectData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendly_name()) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  ::memcpy(&effect_id_, &from.effect_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&effect_id_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.EffectData)
}

void EffectData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&effect_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&effect_id_)) + sizeof(radius_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EffectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffectData& EffectData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_data_2eproto::scc_info_EffectData.base);
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      friendly_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&effect_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&effect_id_)) + sizeof(radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.EffectData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_effect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.EffectData.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friendly_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.EffectData.friendly_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 effect_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.EffectData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string friendly_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.EffectData.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->friendly_name(), output);
  }

  // optional float radius = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.EffectData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 effect_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.EffectData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string friendly_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), static_cast<int>(this->friendly_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.EffectData.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendly_name(), target);
  }

  // optional float radius = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.EffectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string friendly_name = 3;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional uint32 effect_id = 1;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // optional float radius = 4;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_friendly_name();
      friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      effect_id_ = from.effect_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  friendly_name_.Swap(&other->friendly_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(effect_id_, other->effect_id_);
  swap(radius_, other->radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::AbilityData* Arena::CreateMaybeMessage< ::SCRAPIProtocol::AbilityData >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::AbilityData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DamageBonus* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DamageBonus >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DamageBonus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Weapon* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Weapon >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Weapon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::UnitTypeData* Arena::CreateMaybeMessage< ::SCRAPIProtocol::UnitTypeData >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::UnitTypeData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::UpgradeData* Arena::CreateMaybeMessage< ::SCRAPIProtocol::UpgradeData >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::UpgradeData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::BuffData* Arena::CreateMaybeMessage< ::SCRAPIProtocol::BuffData >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::BuffData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::EffectData* Arena::CreateMaybeMessage< ::SCRAPIProtocol::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::EffectData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
