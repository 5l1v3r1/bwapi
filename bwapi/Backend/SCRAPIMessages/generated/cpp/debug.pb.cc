// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug.proto

#include "debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
}  // namespace protobuf_common_2eproto
namespace protobuf_debug_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DebugEndGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DebugKillUnit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DebugSetScore;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DebugSetUnitValue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DebugTestProcess;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DebugCreateUnit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Line;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DebugBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DebugLine;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DebugSphere;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DebugText;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_debug_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_DebugDraw;
}  // namespace protobuf_debug_2eproto
namespace SCRAPIProtocol {
class DebugCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugCommand>
      _instance;
  const ::SCRAPIProtocol::DebugDraw* draw_;
  int game_state_;
  const ::SCRAPIProtocol::DebugCreateUnit* create_unit_;
  const ::SCRAPIProtocol::DebugKillUnit* kill_unit_;
  const ::SCRAPIProtocol::DebugTestProcess* test_process_;
  const ::SCRAPIProtocol::DebugSetScore* score_;
  const ::SCRAPIProtocol::DebugEndGame* end_game_;
  const ::SCRAPIProtocol::DebugSetUnitValue* unit_value_;
} _DebugCommand_default_instance_;
class DebugDrawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugDraw>
      _instance;
} _DebugDraw_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color>
      _instance;
} _Color_default_instance_;
class DebugTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugText>
      _instance;
} _DebugText_default_instance_;
class DebugLineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugLine>
      _instance;
} _DebugLine_default_instance_;
class DebugBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugBox>
      _instance;
} _DebugBox_default_instance_;
class DebugSphereDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSphere>
      _instance;
} _DebugSphere_default_instance_;
class DebugCreateUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugCreateUnit>
      _instance;
} _DebugCreateUnit_default_instance_;
class DebugKillUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugKillUnit>
      _instance;
} _DebugKillUnit_default_instance_;
class DebugTestProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugTestProcess>
      _instance;
} _DebugTestProcess_default_instance_;
class DebugSetScoreDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSetScore>
      _instance;
} _DebugSetScore_default_instance_;
class DebugEndGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugEndGame>
      _instance;
} _DebugEndGame_default_instance_;
class DebugSetUnitValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DebugSetUnitValue>
      _instance;
} _DebugSetUnitValue_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_debug_2eproto {
static void InitDefaultsDebugCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugCommand_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_DebugCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsDebugCommand}, {
      &protobuf_debug_2eproto::scc_info_DebugDraw.base,
      &protobuf_debug_2eproto::scc_info_DebugCreateUnit.base,
      &protobuf_debug_2eproto::scc_info_DebugKillUnit.base,
      &protobuf_debug_2eproto::scc_info_DebugTestProcess.base,
      &protobuf_debug_2eproto::scc_info_DebugSetScore.base,
      &protobuf_debug_2eproto::scc_info_DebugEndGame.base,
      &protobuf_debug_2eproto::scc_info_DebugSetUnitValue.base,}};

static void InitDefaultsDebugDraw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugDraw_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugDraw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugDraw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_DebugDraw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsDebugDraw}, {
      &protobuf_debug_2eproto::scc_info_DebugText.base,
      &protobuf_debug_2eproto::scc_info_DebugLine.base,
      &protobuf_debug_2eproto::scc_info_DebugBox.base,
      &protobuf_debug_2eproto::scc_info_DebugSphere.base,}};

static void InitDefaultsLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Line_default_instance_;
    new (ptr) ::SCRAPIProtocol::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLine}, {
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsColor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Color_default_instance_;
    new (ptr) ::SCRAPIProtocol::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Color::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Color =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColor}, {}};

static void InitDefaultsDebugText() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugText_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DebugText =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDebugText}, {
      &protobuf_debug_2eproto::scc_info_Color.base,
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsDebugLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugLine_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugLine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugLine::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DebugLine =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDebugLine}, {
      &protobuf_debug_2eproto::scc_info_Color.base,
      &protobuf_debug_2eproto::scc_info_Line.base,}};

static void InitDefaultsDebugBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugBox_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DebugBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDebugBox}, {
      &protobuf_debug_2eproto::scc_info_Color.base,
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsDebugSphere() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugSphere_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugSphere();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugSphere::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DebugSphere =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDebugSphere}, {
      &protobuf_debug_2eproto::scc_info_Color.base,
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsDebugCreateUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugCreateUnit_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugCreateUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugCreateUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DebugCreateUnit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDebugCreateUnit}, {
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsDebugKillUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugKillUnit_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugKillUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugKillUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DebugKillUnit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebugKillUnit}, {}};

static void InitDefaultsDebugTestProcess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugTestProcess_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugTestProcess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugTestProcess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DebugTestProcess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebugTestProcess}, {}};

static void InitDefaultsDebugSetScore() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugSetScore_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugSetScore();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugSetScore::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DebugSetScore =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebugSetScore}, {}};

static void InitDefaultsDebugEndGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugEndGame_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugEndGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugEndGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DebugEndGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebugEndGame}, {}};

static void InitDefaultsDebugSetUnitValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_DebugSetUnitValue_default_instance_;
    new (ptr) ::SCRAPIProtocol::DebugSetUnitValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::DebugSetUnitValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DebugSetUnitValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDebugSetUnitValue}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DebugCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugDraw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Color.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugText.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugLine.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugSphere.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugCreateUnit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugKillUnit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugTestProcess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugSetScore.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugEndGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DebugSetUnitValue.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, draw_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, game_state_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, create_unit_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, kill_unit_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, test_process_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, score_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, end_game_),
  offsetof(::SCRAPIProtocol::DebugCommandDefaultTypeInternal, unit_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCommand, command_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, boxes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugDraw, spheres_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Line, p0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Line, p1_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Color, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Color, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Color, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Color, b_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, virtual_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, world_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugText, size_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugLine, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugLine, line_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugBox, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugBox, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugBox, max_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSphere, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSphere, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSphere, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSphere, r_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugCreateUnit, quantity_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugKillUnit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugKillUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugKillUnit, tag_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugTestProcess, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugTestProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugTestProcess, test_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugTestProcess, delay_ms_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetScore, score_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugEndGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugEndGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugEndGame, end_result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetUnitValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetUnitValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetUnitValue, unit_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetUnitValue, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::DebugSetUnitValue, unit_tag_),
  2,
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::SCRAPIProtocol::DebugCommand)},
  { 22, 31, sizeof(::SCRAPIProtocol::DebugDraw)},
  { 35, 42, sizeof(::SCRAPIProtocol::Line)},
  { 44, 52, sizeof(::SCRAPIProtocol::Color)},
  { 55, 65, sizeof(::SCRAPIProtocol::DebugText)},
  { 70, 77, sizeof(::SCRAPIProtocol::DebugLine)},
  { 79, 87, sizeof(::SCRAPIProtocol::DebugBox)},
  { 90, 98, sizeof(::SCRAPIProtocol::DebugSphere)},
  { 101, 110, sizeof(::SCRAPIProtocol::DebugCreateUnit)},
  { 114, 120, sizeof(::SCRAPIProtocol::DebugKillUnit)},
  { 121, 128, sizeof(::SCRAPIProtocol::DebugTestProcess)},
  { 130, 136, sizeof(::SCRAPIProtocol::DebugSetScore)},
  { 137, 143, sizeof(::SCRAPIProtocol::DebugEndGame)},
  { 144, 152, sizeof(::SCRAPIProtocol::DebugSetUnitValue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugDraw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugSphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugCreateUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugKillUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugTestProcess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugSetScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugEndGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_DebugSetUnitValue_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "debug.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013debug.proto\022\016SCRAPIProtocol\032\014common.pr"
      "oto\"\273\003\n\014DebugCommand\022)\n\004draw\030\001 \001(\0132\031.SCR"
      "APIProtocol.DebugDrawH\000\0224\n\ngame_state\030\002 "
      "\001(\0162\036.SCRAPIProtocol.DebugGameStateH\000\0226\n"
      "\013create_unit\030\003 \001(\0132\037.SCRAPIProtocol.Debu"
      "gCreateUnitH\000\0222\n\tkill_unit\030\004 \001(\0132\035.SCRAP"
      "IProtocol.DebugKillUnitH\000\0228\n\014test_proces"
      "s\030\005 \001(\0132 .SCRAPIProtocol.DebugTestProces"
      "sH\000\022.\n\005score\030\006 \001(\0132\035.SCRAPIProtocol.Debu"
      "gSetScoreH\000\0220\n\010end_game\030\007 \001(\0132\034.SCRAPIPr"
      "otocol.DebugEndGameH\000\0227\n\nunit_value\030\010 \001("
      "\0132!.SCRAPIProtocol.DebugSetUnitValueH\000B\t"
      "\n\007command\"\265\001\n\tDebugDraw\022\'\n\004text\030\001 \003(\0132\031."
      "SCRAPIProtocol.DebugText\022(\n\005lines\030\002 \003(\0132"
      "\031.SCRAPIProtocol.DebugLine\022\'\n\005boxes\030\003 \003("
      "\0132\030.SCRAPIProtocol.DebugBox\022,\n\007spheres\030\004"
      " \003(\0132\033.SCRAPIProtocol.DebugSphere\"L\n\004Lin"
      "e\022!\n\002p0\030\001 \001(\0132\025.SCRAPIProtocol.Point\022!\n\002"
      "p1\030\002 \001(\0132\025.SCRAPIProtocol.Point\"(\n\005Color"
      "\022\t\n\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r\"\243\001\n\tDe"
      "bugText\022$\n\005color\030\001 \001(\0132\025.SCRAPIProtocol."
      "Color\022\014\n\004text\030\002 \001(\t\022*\n\013virtual_pos\030\003 \001(\013"
      "2\025.SCRAPIProtocol.Point\022(\n\tworld_pos\030\004 \001"
      "(\0132\025.SCRAPIProtocol.Point\022\014\n\004size\030\005 \001(\r\""
      "U\n\tDebugLine\022$\n\005color\030\001 \001(\0132\025.SCRAPIProt"
      "ocol.Color\022\"\n\004line\030\002 \001(\0132\024.SCRAPIProtoco"
      "l.Line\"x\n\010DebugBox\022$\n\005color\030\001 \001(\0132\025.SCRA"
      "PIProtocol.Color\022\"\n\003min\030\002 \001(\0132\025.SCRAPIPr"
      "otocol.Point\022\"\n\003max\030\003 \001(\0132\025.SCRAPIProtoc"
      "ol.Point\"`\n\013DebugSphere\022$\n\005color\030\001 \001(\0132\025"
      ".SCRAPIProtocol.Color\022 \n\001p\030\002 \001(\0132\025.SCRAP"
      "IProtocol.Point\022\t\n\001r\030\003 \001(\002\"k\n\017DebugCreat"
      "eUnit\022\021\n\tunit_type\030\001 \001(\r\022\r\n\005owner\030\002 \001(\005\022"
      "$\n\003pos\030\003 \001(\0132\027.SCRAPIProtocol.Point2D\022\020\n"
      "\010quantity\030\004 \001(\r\"\034\n\rDebugKillUnit\022\013\n\003tag\030"
      "\001 \003(\004\"\200\001\n\020DebugTestProcess\0223\n\004test\030\001 \001(\016"
      "2%.SCRAPIProtocol.DebugTestProcess.Test\022"
      "\020\n\010delay_ms\030\002 \001(\005\"%\n\004Test\022\010\n\004hang\020\001\022\t\n\005c"
      "rash\020\002\022\010\n\004exit\020\003\"\036\n\rDebugSetScore\022\r\n\005sco"
      "re\030\001 \001(\002\"z\n\014DebugEndGame\022:\n\nend_result\030\001"
      " \001(\0162&.SCRAPIProtocol.DebugEndGame.EndRe"
      "sult\".\n\tEndResult\022\r\n\tSurrender\020\001\022\022\n\016Decl"
      "areVictory\020\002\"\245\001\n\021DebugSetUnitValue\022\?\n\nun"
      "it_value\030\001 \001(\0162+.SCRAPIProtocol.DebugSet"
      "UnitValue.UnitValue\022\r\n\005value\030\002 \001(\002\022\020\n\010un"
      "it_tag\030\003 \001(\004\".\n\tUnitValue\022\n\n\006Energy\020\001\022\010\n"
      "\004Life\020\002\022\013\n\007Shields\020\003*\262\001\n\016DebugGameState\022"
      "\014\n\010show_map\020\001\022\021\n\rcontrol_enemy\020\002\022\010\n\004food"
      "\020\003\022\010\n\004free\020\004\022\021\n\rall_resources\020\005\022\007\n\003god\020\006"
      "\022\014\n\010minerals\020\007\022\007\n\003gas\020\010\022\014\n\010cooldown\020\t\022\r\n"
      "\ttech_tree\020\n\022\013\n\007upgrade\020\013\022\016\n\nfast_build\020"
      "\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "debug.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_debug_2eproto
namespace SCRAPIProtocol {
const ::google::protobuf::EnumDescriptor* DebugTestProcess_Test_descriptor() {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_debug_2eproto::file_level_enum_descriptors[0];
}
bool DebugTestProcess_Test_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugTestProcess_Test DebugTestProcess::hang;
const DebugTestProcess_Test DebugTestProcess::crash;
const DebugTestProcess_Test DebugTestProcess::exit;
const DebugTestProcess_Test DebugTestProcess::Test_MIN;
const DebugTestProcess_Test DebugTestProcess::Test_MAX;
const int DebugTestProcess::Test_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DebugEndGame_EndResult_descriptor() {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_debug_2eproto::file_level_enum_descriptors[1];
}
bool DebugEndGame_EndResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugEndGame_EndResult DebugEndGame::Surrender;
const DebugEndGame_EndResult DebugEndGame::DeclareVictory;
const DebugEndGame_EndResult DebugEndGame::EndResult_MIN;
const DebugEndGame_EndResult DebugEndGame::EndResult_MAX;
const int DebugEndGame::EndResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DebugSetUnitValue_UnitValue_descriptor() {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_debug_2eproto::file_level_enum_descriptors[2];
}
bool DebugSetUnitValue_UnitValue_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Energy;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Life;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Shields;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MIN;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MAX;
const int DebugSetUnitValue::UnitValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DebugGameState_descriptor() {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_debug_2eproto::file_level_enum_descriptors[3];
}
bool DebugGameState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DebugCommand::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugCommand_default_instance_.draw_ = const_cast< ::SCRAPIProtocol::DebugDraw*>(
      ::SCRAPIProtocol::DebugDraw::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.game_state_ = 1;
  ::SCRAPIProtocol::_DebugCommand_default_instance_.create_unit_ = const_cast< ::SCRAPIProtocol::DebugCreateUnit*>(
      ::SCRAPIProtocol::DebugCreateUnit::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.kill_unit_ = const_cast< ::SCRAPIProtocol::DebugKillUnit*>(
      ::SCRAPIProtocol::DebugKillUnit::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.test_process_ = const_cast< ::SCRAPIProtocol::DebugTestProcess*>(
      ::SCRAPIProtocol::DebugTestProcess::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.score_ = const_cast< ::SCRAPIProtocol::DebugSetScore*>(
      ::SCRAPIProtocol::DebugSetScore::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.end_game_ = const_cast< ::SCRAPIProtocol::DebugEndGame*>(
      ::SCRAPIProtocol::DebugEndGame::internal_default_instance());
  ::SCRAPIProtocol::_DebugCommand_default_instance_.unit_value_ = const_cast< ::SCRAPIProtocol::DebugSetUnitValue*>(
      ::SCRAPIProtocol::DebugSetUnitValue::internal_default_instance());
}
void DebugCommand::set_allocated_draw(::SCRAPIProtocol::DebugDraw* draw) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (draw) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      draw = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, draw, submessage_arena);
    }
    set_has_draw();
    command_.draw_ = draw;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.draw)
}
void DebugCommand::set_allocated_create_unit(::SCRAPIProtocol::DebugCreateUnit* create_unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (create_unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_unit, submessage_arena);
    }
    set_has_create_unit();
    command_.create_unit_ = create_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.create_unit)
}
void DebugCommand::set_allocated_kill_unit(::SCRAPIProtocol::DebugKillUnit* kill_unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (kill_unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kill_unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kill_unit, submessage_arena);
    }
    set_has_kill_unit();
    command_.kill_unit_ = kill_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.kill_unit)
}
void DebugCommand::set_allocated_test_process(::SCRAPIProtocol::DebugTestProcess* test_process) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (test_process) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      test_process = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, test_process, submessage_arena);
    }
    set_has_test_process();
    command_.test_process_ = test_process;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.test_process)
}
void DebugCommand::set_allocated_score(::SCRAPIProtocol::DebugSetScore* score) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (score) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      score = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, score, submessage_arena);
    }
    set_has_score();
    command_.score_ = score;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.score)
}
void DebugCommand::set_allocated_end_game(::SCRAPIProtocol::DebugEndGame* end_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (end_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_game, submessage_arena);
    }
    set_has_end_game();
    command_.end_game_ = end_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.end_game)
}
void DebugCommand::set_allocated_unit_value(::SCRAPIProtocol::DebugSetUnitValue* unit_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (unit_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit_value, submessage_arena);
    }
    set_has_unit_value();
    command_.unit_value_ = unit_value;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.DebugCommand.unit_value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCommand::kDrawFieldNumber;
const int DebugCommand::kGameStateFieldNumber;
const int DebugCommand::kCreateUnitFieldNumber;
const int DebugCommand::kKillUnitFieldNumber;
const int DebugCommand::kTestProcessFieldNumber;
const int DebugCommand::kScoreFieldNumber;
const int DebugCommand::kEndGameFieldNumber;
const int DebugCommand::kUnitValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCommand::DebugCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugCommand)
}
DebugCommand::DebugCommand(const DebugCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kDraw: {
      mutable_draw()->::SCRAPIProtocol::DebugDraw::MergeFrom(from.draw());
      break;
    }
    case kGameState: {
      set_game_state(from.game_state());
      break;
    }
    case kCreateUnit: {
      mutable_create_unit()->::SCRAPIProtocol::DebugCreateUnit::MergeFrom(from.create_unit());
      break;
    }
    case kKillUnit: {
      mutable_kill_unit()->::SCRAPIProtocol::DebugKillUnit::MergeFrom(from.kill_unit());
      break;
    }
    case kTestProcess: {
      mutable_test_process()->::SCRAPIProtocol::DebugTestProcess::MergeFrom(from.test_process());
      break;
    }
    case kScore: {
      mutable_score()->::SCRAPIProtocol::DebugSetScore::MergeFrom(from.score());
      break;
    }
    case kEndGame: {
      mutable_end_game()->::SCRAPIProtocol::DebugEndGame::MergeFrom(from.end_game());
      break;
    }
    case kUnitValue: {
      mutable_unit_value()->::SCRAPIProtocol::DebugSetUnitValue::MergeFrom(from.unit_value());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugCommand)
}

void DebugCommand::SharedCtor() {
  clear_has_command();
}

DebugCommand::~DebugCommand() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugCommand)
  SharedDtor();
}

void DebugCommand::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void DebugCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugCommand::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugCommand& DebugCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugCommand.base);
  return *internal_default_instance();
}


void DebugCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.DebugCommand)
  switch (command_case()) {
    case kDraw: {
      delete command_.draw_;
      break;
    }
    case kGameState: {
      // No need to clear
      break;
    }
    case kCreateUnit: {
      delete command_.create_unit_;
      break;
    }
    case kKillUnit: {
      delete command_.kill_unit_;
      break;
    }
    case kTestProcess: {
      delete command_.test_process_;
      break;
    }
    case kScore: {
      delete command_.score_;
      break;
    }
    case kEndGame: {
      delete command_.end_game_;
      break;
    }
    case kUnitValue: {
      delete command_.unit_value_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void DebugCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.DebugDraw draw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_draw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugGameState game_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::DebugGameState_IsValid(value)) {
            set_game_state(static_cast< ::SCRAPIProtocol::DebugGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugCreateUnit create_unit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugKillUnit kill_unit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kill_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugTestProcess test_process = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_test_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugSetScore score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugEndGame end_game = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.DebugSetUnitValue unit_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugCommand)
  return false;
#undef DO_
}

void DebugCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kDraw:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_draw(), output);
      break;
    case kGameState:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        2, this->game_state(), output);
      break;
    case kCreateUnit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_create_unit(), output);
      break;
    case kKillUnit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_kill_unit(), output);
      break;
    case kTestProcess:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_test_process(), output);
      break;
    case kScore:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_score(), output);
      break;
    case kEndGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_end_game(), output);
      break;
    case kUnitValue:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_unit_value(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugCommand)
}

::google::protobuf::uint8* DebugCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kDraw:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_draw(), deterministic, target);
      break;
    case kGameState:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->game_state(), target);
      break;
    case kCreateUnit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_create_unit(), deterministic, target);
      break;
    case kKillUnit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_kill_unit(), deterministic, target);
      break;
    case kTestProcess:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_test_process(), deterministic, target);
      break;
    case kScore:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_score(), deterministic, target);
      break;
    case kEndGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_end_game(), deterministic, target);
      break;
    case kUnitValue:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_unit_value(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugCommand)
  return target;
}

size_t DebugCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (command_case()) {
    // optional .SCRAPIProtocol.DebugDraw draw = 1;
    case kDraw: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.draw_);
      break;
    }
    // optional .SCRAPIProtocol.DebugGameState game_state = 2;
    case kGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
      break;
    }
    // optional .SCRAPIProtocol.DebugCreateUnit create_unit = 3;
    case kCreateUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.create_unit_);
      break;
    }
    // optional .SCRAPIProtocol.DebugKillUnit kill_unit = 4;
    case kKillUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.kill_unit_);
      break;
    }
    // optional .SCRAPIProtocol.DebugTestProcess test_process = 5;
    case kTestProcess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.test_process_);
      break;
    }
    // optional .SCRAPIProtocol.DebugSetScore score = 6;
    case kScore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.score_);
      break;
    }
    // optional .SCRAPIProtocol.DebugEndGame end_game = 7;
    case kEndGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.end_game_);
      break;
    }
    // optional .SCRAPIProtocol.DebugSetUnitValue unit_value = 8;
    case kUnitValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.unit_value_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugCommand)
    MergeFrom(*source);
  }
}

void DebugCommand::MergeFrom(const DebugCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kDraw: {
      mutable_draw()->::SCRAPIProtocol::DebugDraw::MergeFrom(from.draw());
      break;
    }
    case kGameState: {
      set_game_state(from.game_state());
      break;
    }
    case kCreateUnit: {
      mutable_create_unit()->::SCRAPIProtocol::DebugCreateUnit::MergeFrom(from.create_unit());
      break;
    }
    case kKillUnit: {
      mutable_kill_unit()->::SCRAPIProtocol::DebugKillUnit::MergeFrom(from.kill_unit());
      break;
    }
    case kTestProcess: {
      mutable_test_process()->::SCRAPIProtocol::DebugTestProcess::MergeFrom(from.test_process());
      break;
    }
    case kScore: {
      mutable_score()->::SCRAPIProtocol::DebugSetScore::MergeFrom(from.score());
      break;
    }
    case kEndGame: {
      mutable_end_game()->::SCRAPIProtocol::DebugEndGame::MergeFrom(from.end_game());
      break;
    }
    case kUnitValue: {
      mutable_unit_value()->::SCRAPIProtocol::DebugSetUnitValue::MergeFrom(from.unit_value());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void DebugCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCommand::CopyFrom(const DebugCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCommand::IsInitialized() const {
  return true;
}

void DebugCommand::Swap(DebugCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCommand::InternalSwap(DebugCommand* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugCommand::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugDraw::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugDraw::kTextFieldNumber;
const int DebugDraw::kLinesFieldNumber;
const int DebugDraw::kBoxesFieldNumber;
const int DebugDraw::kSpheresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugDraw::DebugDraw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugDraw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugDraw)
}
DebugDraw::DebugDraw(const DebugDraw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      text_(from.text_),
      lines_(from.lines_),
      boxes_(from.boxes_),
      spheres_(from.spheres_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugDraw)
}

void DebugDraw::SharedCtor() {
}

DebugDraw::~DebugDraw() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugDraw)
  SharedDtor();
}

void DebugDraw::SharedDtor() {
}

void DebugDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugDraw::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugDraw& DebugDraw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugDraw.base);
  return *internal_default_instance();
}


void DebugDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  lines_.Clear();
  boxes_.Clear();
  spheres_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugDraw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.DebugText text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.DebugLine lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.DebugBox boxes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_boxes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.DebugSphere spheres = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_spheres()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugDraw)
  return false;
#undef DO_
}

void DebugDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.DebugText text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->text(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.DebugLine lines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lines(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.DebugBox boxes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->boxes(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.DebugSphere spheres = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spheres_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->spheres(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugDraw)
}

::google::protobuf::uint8* DebugDraw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.DebugText text = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->text(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.DebugLine lines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lines_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lines(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.DebugBox boxes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boxes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->boxes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.DebugSphere spheres = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spheres_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->spheres(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugDraw)
  return target;
}

size_t DebugDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugDraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.DebugText text = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->text_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->text(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.DebugLine lines = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lines_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lines(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.DebugBox boxes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->boxes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->boxes(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.DebugSphere spheres = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->spheres_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->spheres(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugDraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugDraw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugDraw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugDraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugDraw)
    MergeFrom(*source);
  }
}

void DebugDraw::MergeFrom(const DebugDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  lines_.MergeFrom(from.lines_);
  boxes_.MergeFrom(from.boxes_);
  spheres_.MergeFrom(from.spheres_);
}

void DebugDraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugDraw::CopyFrom(const DebugDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDraw::IsInitialized() const {
  return true;
}

void DebugDraw::Swap(DebugDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugDraw::InternalSwap(DebugDraw* other) {
  using std::swap;
  CastToBase(&text_)->InternalSwap(CastToBase(&other->text_));
  CastToBase(&lines_)->InternalSwap(CastToBase(&other->lines_));
  CastToBase(&boxes_)->InternalSwap(CastToBase(&other->boxes_));
  CastToBase(&spheres_)->InternalSwap(CastToBase(&other->spheres_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugDraw::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Line::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_Line_default_instance_._instance.get_mutable()->p0_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
  ::SCRAPIProtocol::_Line_default_instance_._instance.get_mutable()->p1_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void Line::clear_p0() {
  if (p0_ != NULL) p0_->Clear();
  clear_has_p0();
}
void Line::clear_p1() {
  if (p1_ != NULL) p1_->Clear();
  clear_has_p1();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kP0FieldNumber;
const int Line::kP1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_p0()) {
    p0_ = new ::SCRAPIProtocol::Point(*from.p0_);
  } else {
    p0_ = NULL;
  }
  if (from.has_p1()) {
    p1_ = new ::SCRAPIProtocol::Point(*from.p1_);
  } else {
    p1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Line)
}

void Line::SharedCtor() {
  ::memset(&p0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p1_) -
      reinterpret_cast<char*>(&p0_)) + sizeof(p1_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  if (this != internal_default_instance()) delete p0_;
  if (this != internal_default_instance()) delete p1_;
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Line.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(p0_ != NULL);
      p0_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p1_ != NULL);
      p1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Point p0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point p1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point p0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_p0(), output);
  }

  // optional .SCRAPIProtocol.Point p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_p1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point p0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_p0(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Point p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_p1(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.Point p0 = 1;
    if (has_p0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *p0_);
    }

    // optional .SCRAPIProtocol.Point p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *p1_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_p0()->::SCRAPIProtocol::Point::MergeFrom(from.p0());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_p1()->::SCRAPIProtocol::Point::MergeFrom(from.p1());
    }
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  swap(p0_, other->p0_);
  swap(p1_, other->p1_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_Color.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Color)
}

void Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color& Color::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_Color.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&r_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Color)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // optional uint32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // optional uint32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // optional uint32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // optional uint32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Color)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugText::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugText_default_instance_._instance.get_mutable()->color_ = const_cast< ::SCRAPIProtocol::Color*>(
      ::SCRAPIProtocol::Color::internal_default_instance());
  ::SCRAPIProtocol::_DebugText_default_instance_._instance.get_mutable()->virtual_pos_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
  ::SCRAPIProtocol::_DebugText_default_instance_._instance.get_mutable()->world_pos_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void DebugText::clear_virtual_pos() {
  if (virtual_pos_ != NULL) virtual_pos_->Clear();
  clear_has_virtual_pos();
}
void DebugText::clear_world_pos() {
  if (world_pos_ != NULL) world_pos_->Clear();
  clear_has_world_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugText::kColorFieldNumber;
const int DebugText::kTextFieldNumber;
const int DebugText::kVirtualPosFieldNumber;
const int DebugText::kWorldPosFieldNumber;
const int DebugText::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugText::DebugText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugText.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugText)
}
DebugText::DebugText(const DebugText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_color()) {
    color_ = new ::SCRAPIProtocol::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_virtual_pos()) {
    virtual_pos_ = new ::SCRAPIProtocol::Point(*from.virtual_pos_);
  } else {
    virtual_pos_ = NULL;
  }
  if (from.has_world_pos()) {
    world_pos_ = new ::SCRAPIProtocol::Point(*from.world_pos_);
  } else {
    world_pos_ = NULL;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugText)
}

void DebugText::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&color_)) + sizeof(size_));
}

DebugText::~DebugText() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugText)
  SharedDtor();
}

void DebugText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete virtual_pos_;
  if (this != internal_default_instance()) delete world_pos_;
}

void DebugText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugText::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugText& DebugText::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugText.base);
  return *internal_default_instance();
}


void DebugText::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(virtual_pos_ != NULL);
      virtual_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(world_pos_ != NULL);
      world_pos_->Clear();
    }
  }
  size_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SCRAPIProtocol.DebugText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point virtual_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_virtual_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point world_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugText)
  return false;
#undef DO_
}

void DebugText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_color(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.DebugText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional .SCRAPIProtocol.Point virtual_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_virtual_pos(), output);
  }

  // optional .SCRAPIProtocol.Point world_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_world_pos(), output);
  }

  // optional uint32 size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugText)
}

::google::protobuf::uint8* DebugText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_color(), deterministic, target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SCRAPIProtocol.DebugText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional .SCRAPIProtocol.Point virtual_pos = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_virtual_pos(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Point world_pos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_world_pos(), deterministic, target);
  }

  // optional uint32 size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugText)
  return target;
}

size_t DebugText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SCRAPIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .SCRAPIProtocol.Point virtual_pos = 3;
    if (has_virtual_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *virtual_pos_);
    }

    // optional .SCRAPIProtocol.Point world_pos = 4;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *world_pos_);
    }

    // optional uint32 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugText)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugText)
    MergeFrom(*source);
  }
}

void DebugText::MergeFrom(const DebugText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_color()->::SCRAPIProtocol::Color::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_virtual_pos()->::SCRAPIProtocol::Point::MergeFrom(from.virtual_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_world_pos()->::SCRAPIProtocol::Point::MergeFrom(from.world_pos());
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugText::CopyFrom(const DebugText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugText::IsInitialized() const {
  return true;
}

void DebugText::Swap(DebugText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugText::InternalSwap(DebugText* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(virtual_pos_, other->virtual_pos_);
  swap(world_pos_, other->world_pos_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugText::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugLine::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugLine_default_instance_._instance.get_mutable()->color_ = const_cast< ::SCRAPIProtocol::Color*>(
      ::SCRAPIProtocol::Color::internal_default_instance());
  ::SCRAPIProtocol::_DebugLine_default_instance_._instance.get_mutable()->line_ = const_cast< ::SCRAPIProtocol::Line*>(
      ::SCRAPIProtocol::Line::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugLine::kColorFieldNumber;
const int DebugLine::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugLine::DebugLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugLine.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugLine)
}
DebugLine::DebugLine(const DebugLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::SCRAPIProtocol::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_line()) {
    line_ = new ::SCRAPIProtocol::Line(*from.line_);
  } else {
    line_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugLine)
}

void DebugLine::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_) -
      reinterpret_cast<char*>(&color_)) + sizeof(line_));
}

DebugLine::~DebugLine() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugLine)
  SharedDtor();
}

void DebugLine::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete line_;
}

void DebugLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugLine::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugLine& DebugLine::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugLine.base);
  return *internal_default_instance();
}


void DebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(line_ != NULL);
      line_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugLine)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Line line = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugLine)
  return false;
#undef DO_
}

void DebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_color(), output);
  }

  // optional .SCRAPIProtocol.Line line = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_line(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugLine)
}

::google::protobuf::uint8* DebugLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_color(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Line line = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_line(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugLine)
  return target;
}

size_t DebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .SCRAPIProtocol.Line line = 2;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *line_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugLine)
    MergeFrom(*source);
  }
}

void DebugLine::MergeFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::SCRAPIProtocol::Color::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_line()->::SCRAPIProtocol::Line::MergeFrom(from.line());
    }
  }
}

void DebugLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLine::CopyFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLine::IsInitialized() const {
  return true;
}

void DebugLine::Swap(DebugLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugLine::InternalSwap(DebugLine* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(line_, other->line_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugLine::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugBox::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugBox_default_instance_._instance.get_mutable()->color_ = const_cast< ::SCRAPIProtocol::Color*>(
      ::SCRAPIProtocol::Color::internal_default_instance());
  ::SCRAPIProtocol::_DebugBox_default_instance_._instance.get_mutable()->min_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
  ::SCRAPIProtocol::_DebugBox_default_instance_._instance.get_mutable()->max_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void DebugBox::clear_min() {
  if (min_ != NULL) min_->Clear();
  clear_has_min();
}
void DebugBox::clear_max() {
  if (max_ != NULL) max_->Clear();
  clear_has_max();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugBox::kColorFieldNumber;
const int DebugBox::kMinFieldNumber;
const int DebugBox::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugBox::DebugBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugBox)
}
DebugBox::DebugBox(const DebugBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::SCRAPIProtocol::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_min()) {
    min_ = new ::SCRAPIProtocol::Point(*from.min_);
  } else {
    min_ = NULL;
  }
  if (from.has_max()) {
    max_ = new ::SCRAPIProtocol::Point(*from.max_);
  } else {
    max_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugBox)
}

void DebugBox::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&color_)) + sizeof(max_));
}

DebugBox::~DebugBox() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugBox)
  SharedDtor();
}

void DebugBox::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void DebugBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugBox::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugBox& DebugBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugBox.base);
  return *internal_default_instance();
}


void DebugBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(min_ != NULL);
      min_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_ != NULL);
      max_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugBox)
  return false;
#undef DO_
}

void DebugBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_color(), output);
  }

  // optional .SCRAPIProtocol.Point min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_min(), output);
  }

  // optional .SCRAPIProtocol.Point max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugBox)
}

::google::protobuf::uint8* DebugBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_color(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Point min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_min(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Point max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_max(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugBox)
  return target;
}

size_t DebugBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SCRAPIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .SCRAPIProtocol.Point min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *min_);
    }

    // optional .SCRAPIProtocol.Point max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *max_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugBox)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugBox)
    MergeFrom(*source);
  }
}

void DebugBox::MergeFrom(const DebugBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::SCRAPIProtocol::Color::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_min()->::SCRAPIProtocol::Point::MergeFrom(from.min());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max()->::SCRAPIProtocol::Point::MergeFrom(from.max());
    }
  }
}

void DebugBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugBox::CopyFrom(const DebugBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugBox::IsInitialized() const {
  return true;
}

void DebugBox::Swap(DebugBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugBox::InternalSwap(DebugBox* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugBox::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSphere::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugSphere_default_instance_._instance.get_mutable()->color_ = const_cast< ::SCRAPIProtocol::Color*>(
      ::SCRAPIProtocol::Color::internal_default_instance());
  ::SCRAPIProtocol::_DebugSphere_default_instance_._instance.get_mutable()->p_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void DebugSphere::clear_p() {
  if (p_ != NULL) p_->Clear();
  clear_has_p();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSphere::kColorFieldNumber;
const int DebugSphere::kPFieldNumber;
const int DebugSphere::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSphere::DebugSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugSphere.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugSphere)
}
DebugSphere::DebugSphere(const DebugSphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::SCRAPIProtocol::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_p()) {
    p_ = new ::SCRAPIProtocol::Point(*from.p_);
  } else {
    p_ = NULL;
  }
  r_ = from.r_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugSphere)
}

void DebugSphere::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&color_)) + sizeof(r_));
}

DebugSphere::~DebugSphere() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugSphere)
  SharedDtor();
}

void DebugSphere::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete p_;
}

void DebugSphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugSphere::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSphere& DebugSphere::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugSphere.base);
  return *internal_default_instance();
}


void DebugSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(color_ != NULL);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(p_ != NULL);
      p_->Clear();
    }
  }
  r_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugSphere)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point p = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugSphere)
  return false;
#undef DO_
}

void DebugSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_color(), output);
  }

  // optional .SCRAPIProtocol.Point p = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_p(), output);
  }

  // optional float r = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugSphere)
}

::google::protobuf::uint8* DebugSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Color color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_color(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Point p = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_p(), deterministic, target);
  }

  // optional float r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugSphere)
  return target;
}

size_t DebugSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugSphere)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SCRAPIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .SCRAPIProtocol.Point p = 2;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *p_);
    }

    // optional float r = 3;
    if (has_r()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugSphere)
    MergeFrom(*source);
  }
}

void DebugSphere::MergeFrom(const DebugSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_color()->::SCRAPIProtocol::Color::MergeFrom(from.color());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_p()->::SCRAPIProtocol::Point::MergeFrom(from.p());
    }
    if (cached_has_bits & 0x00000004u) {
      r_ = from.r_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSphere::CopyFrom(const DebugSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSphere::IsInitialized() const {
  return true;
}

void DebugSphere::Swap(DebugSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSphere::InternalSwap(DebugSphere* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(p_, other->p_);
  swap(r_, other->r_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugSphere::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugCreateUnit::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_DebugCreateUnit_default_instance_._instance.get_mutable()->pos_ = const_cast< ::SCRAPIProtocol::Point2D*>(
      ::SCRAPIProtocol::Point2D::internal_default_instance());
}
void DebugCreateUnit::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCreateUnit::kUnitTypeFieldNumber;
const int DebugCreateUnit::kOwnerFieldNumber;
const int DebugCreateUnit::kPosFieldNumber;
const int DebugCreateUnit::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCreateUnit::DebugCreateUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugCreateUnit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugCreateUnit)
}
DebugCreateUnit::DebugCreateUnit(const DebugCreateUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::SCRAPIProtocol::Point2D(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&unit_type_, &from.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&unit_type_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugCreateUnit)
}

void DebugCreateUnit::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(quantity_));
}

DebugCreateUnit::~DebugCreateUnit() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugCreateUnit)
  SharedDtor();
}

void DebugCreateUnit::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void DebugCreateUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugCreateUnit::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugCreateUnit& DebugCreateUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugCreateUnit.base);
  return *internal_default_instance();
}


void DebugCreateUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugCreateUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&unit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&unit_type_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugCreateUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugCreateUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point2D pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugCreateUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugCreateUnit)
  return false;
#undef DO_
}

void DebugCreateUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugCreateUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_type(), output);
  }

  // optional int32 owner = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner(), output);
  }

  // optional .SCRAPIProtocol.Point2D pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pos(), output);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugCreateUnit)
}

::google::protobuf::uint8* DebugCreateUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugCreateUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_type(), target);
  }

  // optional int32 owner = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner(), target);
  }

  // optional .SCRAPIProtocol.Point2D pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pos(), deterministic, target);
  }

  // optional uint32 quantity = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugCreateUnit)
  return target;
}

size_t DebugCreateUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugCreateUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .SCRAPIProtocol.Point2D pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional int32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugCreateUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugCreateUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugCreateUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCreateUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugCreateUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugCreateUnit)
    MergeFrom(*source);
  }
}

void DebugCreateUnit::MergeFrom(const DebugCreateUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugCreateUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000008u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugCreateUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugCreateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCreateUnit::CopyFrom(const DebugCreateUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugCreateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCreateUnit::IsInitialized() const {
  return true;
}

void DebugCreateUnit::Swap(DebugCreateUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCreateUnit::InternalSwap(DebugCreateUnit* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(unit_type_, other->unit_type_);
  swap(owner_, other->owner_);
  swap(quantity_, other->quantity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugCreateUnit::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugKillUnit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugKillUnit::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugKillUnit::DebugKillUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugKillUnit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugKillUnit)
}
DebugKillUnit::DebugKillUnit(const DebugKillUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tag_(from.tag_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugKillUnit)
}

void DebugKillUnit::SharedCtor() {
}

DebugKillUnit::~DebugKillUnit() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugKillUnit)
  SharedDtor();
}

void DebugKillUnit::SharedDtor() {
}

void DebugKillUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugKillUnit::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugKillUnit& DebugKillUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugKillUnit.base);
  return *internal_default_instance();
}


void DebugKillUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugKillUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugKillUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugKillUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_tag())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tag())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugKillUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugKillUnit)
  return false;
#undef DO_
}

void DebugKillUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugKillUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tag = 1;
  for (int i = 0, n = this->tag_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugKillUnit)
}

::google::protobuf::uint8* DebugKillUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugKillUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 tag = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->tag_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugKillUnit)
  return target;
}

size_t DebugKillUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugKillUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 tag = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->tag_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tag_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugKillUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugKillUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugKillUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugKillUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugKillUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugKillUnit)
    MergeFrom(*source);
  }
}

void DebugKillUnit::MergeFrom(const DebugKillUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugKillUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tag_.MergeFrom(from.tag_);
}

void DebugKillUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugKillUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugKillUnit::CopyFrom(const DebugKillUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugKillUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugKillUnit::IsInitialized() const {
  return true;
}

void DebugKillUnit::Swap(DebugKillUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugKillUnit::InternalSwap(DebugKillUnit* other) {
  using std::swap;
  tag_.InternalSwap(&other->tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugKillUnit::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugTestProcess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugTestProcess::kTestFieldNumber;
const int DebugTestProcess::kDelayMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugTestProcess::DebugTestProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugTestProcess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugTestProcess)
}
DebugTestProcess::DebugTestProcess(const DebugTestProcess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delay_ms_, &from.delay_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&test_) -
    reinterpret_cast<char*>(&delay_ms_)) + sizeof(test_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugTestProcess)
}

void DebugTestProcess::SharedCtor() {
  delay_ms_ = 0;
  test_ = 1;
}

DebugTestProcess::~DebugTestProcess() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugTestProcess)
  SharedDtor();
}

void DebugTestProcess::SharedDtor() {
}

void DebugTestProcess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugTestProcess::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugTestProcess& DebugTestProcess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugTestProcess.base);
  return *internal_default_instance();
}


void DebugTestProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugTestProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    delay_ms_ = 0;
    test_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugTestProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugTestProcess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.DebugTestProcess.Test test = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::DebugTestProcess_Test_IsValid(value)) {
            set_test(static_cast< ::SCRAPIProtocol::DebugTestProcess_Test >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delay_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_delay_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugTestProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugTestProcess)
  return false;
#undef DO_
}

void DebugTestProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugTestProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugTestProcess.Test test = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->test(), output);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugTestProcess)
}

::google::protobuf::uint8* DebugTestProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugTestProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugTestProcess.Test test = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->test(), target);
  }

  // optional int32 delay_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugTestProcess)
  return target;
}

size_t DebugTestProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugTestProcess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 delay_ms = 2;
    if (has_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_ms());
    }

    // optional .SCRAPIProtocol.DebugTestProcess.Test test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugTestProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugTestProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugTestProcess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugTestProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugTestProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugTestProcess)
    MergeFrom(*source);
  }
}

void DebugTestProcess::MergeFrom(const DebugTestProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugTestProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      delay_ms_ = from.delay_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      test_ = from.test_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugTestProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugTestProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTestProcess::CopyFrom(const DebugTestProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugTestProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTestProcess::IsInitialized() const {
  return true;
}

void DebugTestProcess::Swap(DebugTestProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugTestProcess::InternalSwap(DebugTestProcess* other) {
  using std::swap;
  swap(delay_ms_, other->delay_ms_);
  swap(test_, other->test_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugTestProcess::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSetScore::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSetScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSetScore::DebugSetScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugSetScore.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugSetScore)
}
DebugSetScore::DebugSetScore(const DebugSetScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugSetScore)
}

void DebugSetScore::SharedCtor() {
  score_ = 0;
}

DebugSetScore::~DebugSetScore() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugSetScore)
  SharedDtor();
}

void DebugSetScore::SharedDtor() {
}

void DebugSetScore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugSetScore::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSetScore& DebugSetScore::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugSetScore.base);
  return *internal_default_instance();
}


void DebugSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugSetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugSetScore)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugSetScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugSetScore)
  return false;
#undef DO_
}

void DebugSetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugSetScore)
}

::google::protobuf::uint8* DebugSetScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugSetScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugSetScore)
  return target;
}

size_t DebugSetScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugSetScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float score = 1;
  if (has_score()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugSetScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSetScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSetScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugSetScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugSetScore)
    MergeFrom(*source);
  }
}

void DebugSetScore::MergeFrom(const DebugSetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugSetScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_score()) {
    set_score(from.score());
  }
}

void DebugSetScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSetScore::CopyFrom(const DebugSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetScore::IsInitialized() const {
  return true;
}

void DebugSetScore::Swap(DebugSetScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSetScore::InternalSwap(DebugSetScore* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugSetScore::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugEndGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugEndGame::kEndResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugEndGame::DebugEndGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugEndGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugEndGame)
}
DebugEndGame::DebugEndGame(const DebugEndGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  end_result_ = from.end_result_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugEndGame)
}

void DebugEndGame::SharedCtor() {
  end_result_ = 1;
}

DebugEndGame::~DebugEndGame() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugEndGame)
  SharedDtor();
}

void DebugEndGame::SharedDtor() {
}

void DebugEndGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugEndGame::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugEndGame& DebugEndGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugEndGame.base);
  return *internal_default_instance();
}


void DebugEndGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugEndGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_result_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugEndGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugEndGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.DebugEndGame.EndResult end_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::DebugEndGame_EndResult_IsValid(value)) {
            set_end_result(static_cast< ::SCRAPIProtocol::DebugEndGame_EndResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugEndGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugEndGame)
  return false;
#undef DO_
}

void DebugEndGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugEndGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugEndGame.EndResult end_result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->end_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugEndGame)
}

::google::protobuf::uint8* DebugEndGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugEndGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugEndGame.EndResult end_result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->end_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugEndGame)
  return target;
}

size_t DebugEndGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugEndGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.DebugEndGame.EndResult end_result = 1;
  if (has_end_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugEndGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugEndGame)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugEndGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugEndGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugEndGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugEndGame)
    MergeFrom(*source);
  }
}

void DebugEndGame::MergeFrom(const DebugEndGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugEndGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_result()) {
    set_end_result(from.end_result());
  }
}

void DebugEndGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugEndGame::CopyFrom(const DebugEndGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEndGame::IsInitialized() const {
  return true;
}

void DebugEndGame::Swap(DebugEndGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugEndGame::InternalSwap(DebugEndGame* other) {
  using std::swap;
  swap(end_result_, other->end_result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugEndGame::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DebugSetUnitValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSetUnitValue::kUnitValueFieldNumber;
const int DebugSetUnitValue::kValueFieldNumber;
const int DebugSetUnitValue::kUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSetUnitValue::DebugSetUnitValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_debug_2eproto::scc_info_DebugSetUnitValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.DebugSetUnitValue)
}
DebugSetUnitValue::DebugSetUnitValue(const DebugSetUnitValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_tag_, &from.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_value_) -
    reinterpret_cast<char*>(&unit_tag_)) + sizeof(unit_value_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.DebugSetUnitValue)
}

void DebugSetUnitValue::SharedCtor() {
  ::memset(&unit_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&unit_tag_)) + sizeof(value_));
  unit_value_ = 1;
}

DebugSetUnitValue::~DebugSetUnitValue() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.DebugSetUnitValue)
  SharedDtor();
}

void DebugSetUnitValue::SharedDtor() {
}

void DebugSetUnitValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DebugSetUnitValue::descriptor() {
  ::protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DebugSetUnitValue& DebugSetUnitValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_debug_2eproto::scc_info_DebugSetUnitValue.base);
  return *internal_default_instance();
}


void DebugSetUnitValue::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.DebugSetUnitValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&unit_tag_)) + sizeof(value_));
    unit_value_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DebugSetUnitValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.DebugSetUnitValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::DebugSetUnitValue_UnitValue_IsValid(value)) {
            set_unit_value(static_cast< ::SCRAPIProtocol::DebugSetUnitValue_UnitValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unit_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_unit_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.DebugSetUnitValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.DebugSetUnitValue)
  return false;
#undef DO_
}

void DebugSetUnitValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.DebugSetUnitValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->unit_value(), output);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional uint64 unit_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.DebugSetUnitValue)
}

::google::protobuf::uint8* DebugSetUnitValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.DebugSetUnitValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->unit_value(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional uint64 unit_tag = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.DebugSetUnitValue)
  return target;
}

size_t DebugSetUnitValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.DebugSetUnitValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 unit_tag = 3;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional .SCRAPIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
    if (has_unit_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugSetUnitValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.DebugSetUnitValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugSetUnitValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSetUnitValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.DebugSetUnitValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.DebugSetUnitValue)
    MergeFrom(*source);
  }
}

void DebugSetUnitValue::MergeFrom(const DebugSetUnitValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.DebugSetUnitValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      unit_tag_ = from.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_value_ = from.unit_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DebugSetUnitValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.DebugSetUnitValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSetUnitValue::CopyFrom(const DebugSetUnitValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.DebugSetUnitValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetUnitValue::IsInitialized() const {
  return true;
}

void DebugSetUnitValue::Swap(DebugSetUnitValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSetUnitValue::InternalSwap(DebugSetUnitValue* other) {
  using std::swap;
  swap(unit_tag_, other->unit_tag_);
  swap(value_, other->value_);
  swap(unit_value_, other->unit_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DebugSetUnitValue::GetMetadata() const {
  protobuf_debug_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_debug_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugCommand* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugDraw* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugDraw >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugDraw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Line* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Line >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Color* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Color >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Color >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugText* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugText >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugText >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugLine* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugLine >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugLine >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugBox* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugBox >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugSphere* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugSphere >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugSphere >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugCreateUnit* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugCreateUnit >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugCreateUnit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugKillUnit* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugKillUnit >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugKillUnit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugTestProcess* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugTestProcess >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugTestProcess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugSetScore* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugSetScore >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugSetScore >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugEndGame* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugEndGame >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugEndGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::DebugSetUnitValue* Arena::CreateMaybeMessage< ::SCRAPIProtocol::DebugSetUnitValue >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::DebugSetUnitValue >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
