// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#include "query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvailableAbility;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
}  // namespace protobuf_common_2eproto
namespace protobuf_query_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestQueryAvailableAbilities;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQueryBuildingPlacement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQueryPathing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestQueryBuildingPlacement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestQueryPathing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_query_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseQueryAvailableAbilities;
}  // namespace protobuf_query_2eproto
namespace SCRAPIProtocol {
class RequestQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuery>
      _instance;
} _RequestQuery_default_instance_;
class ResponseQueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuery>
      _instance;
} _ResponseQuery_default_instance_;
class RequestQueryPathingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQueryPathing>
      _instance;
  const ::SCRAPIProtocol::Point2D* start_pos_;
  ::google::protobuf::uint64 unit_tag_;
} _RequestQueryPathing_default_instance_;
class ResponseQueryPathingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQueryPathing>
      _instance;
} _ResponseQueryPathing_default_instance_;
class RequestQueryAvailableAbilitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQueryAvailableAbilities>
      _instance;
} _RequestQueryAvailableAbilities_default_instance_;
class ResponseQueryAvailableAbilitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQueryAvailableAbilities>
      _instance;
} _ResponseQueryAvailableAbilities_default_instance_;
class RequestQueryBuildingPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQueryBuildingPlacement>
      _instance;
} _RequestQueryBuildingPlacement_default_instance_;
class ResponseQueryBuildingPlacementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQueryBuildingPlacement>
      _instance;
} _ResponseQueryBuildingPlacement_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_query_2eproto {
static void InitDefaultsRequestQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_RequestQuery_default_instance_;
    new (ptr) ::SCRAPIProtocol::RequestQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::RequestQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RequestQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRequestQuery}, {
      &protobuf_query_2eproto::scc_info_RequestQueryPathing.base,
      &protobuf_query_2eproto::scc_info_RequestQueryAvailableAbilities.base,
      &protobuf_query_2eproto::scc_info_RequestQueryBuildingPlacement.base,}};

static void InitDefaultsResponseQuery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ResponseQuery_default_instance_;
    new (ptr) ::SCRAPIProtocol::ResponseQuery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ResponseQuery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ResponseQuery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResponseQuery}, {
      &protobuf_query_2eproto::scc_info_ResponseQueryPathing.base,
      &protobuf_query_2eproto::scc_info_ResponseQueryAvailableAbilities.base,
      &protobuf_query_2eproto::scc_info_ResponseQueryBuildingPlacement.base,}};

static void InitDefaultsRequestQueryPathing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_RequestQueryPathing_default_instance_;
    new (ptr) ::SCRAPIProtocol::RequestQueryPathing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::RequestQueryPathing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestQueryPathing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestQueryPathing}, {
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsResponseQueryPathing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ResponseQueryPathing_default_instance_;
    new (ptr) ::SCRAPIProtocol::ResponseQueryPathing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ResponseQueryPathing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQueryPathing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseQueryPathing}, {}};

static void InitDefaultsRequestQueryAvailableAbilities() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_RequestQueryAvailableAbilities_default_instance_;
    new (ptr) ::SCRAPIProtocol::RequestQueryAvailableAbilities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::RequestQueryAvailableAbilities::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestQueryAvailableAbilities =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestQueryAvailableAbilities}, {}};

static void InitDefaultsResponseQueryAvailableAbilities() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ResponseQueryAvailableAbilities_default_instance_;
    new (ptr) ::SCRAPIProtocol::ResponseQueryAvailableAbilities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ResponseQueryAvailableAbilities::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseQueryAvailableAbilities =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseQueryAvailableAbilities}, {
      &protobuf_common_2eproto::scc_info_AvailableAbility.base,}};

static void InitDefaultsRequestQueryBuildingPlacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_RequestQueryBuildingPlacement_default_instance_;
    new (ptr) ::SCRAPIProtocol::RequestQueryBuildingPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::RequestQueryBuildingPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestQueryBuildingPlacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestQueryBuildingPlacement}, {
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsResponseQueryBuildingPlacement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ResponseQueryBuildingPlacement_default_instance_;
    new (ptr) ::SCRAPIProtocol::ResponseQueryBuildingPlacement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ResponseQueryBuildingPlacement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQueryBuildingPlacement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseQueryBuildingPlacement}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQuery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQueryPathing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQueryPathing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQueryAvailableAbilities.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQueryAvailableAbilities.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQueryBuildingPlacement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQueryBuildingPlacement.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, pathing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, placements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQuery, ignore_resource_requirements_),
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQuery, pathing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQuery, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQuery, placements_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryPathing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryPathing, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryPathing, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SCRAPIProtocol::RequestQueryPathingDefaultTypeInternal, start_pos_),
  offsetof(::SCRAPIProtocol::RequestQueryPathingDefaultTypeInternal, unit_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryPathing, end_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryPathing, start_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryPathing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryPathing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryPathing, distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryAvailableAbilities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryAvailableAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryAvailableAbilities, unit_tag_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryAvailableAbilities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryAvailableAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryAvailableAbilities, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryAvailableAbilities, unit_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryAvailableAbilities, unit_type_id_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryBuildingPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryBuildingPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryBuildingPlacement, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryBuildingPlacement, target_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::RequestQueryBuildingPlacement, placing_unit_tag_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryBuildingPlacement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryBuildingPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ResponseQueryBuildingPlacement, result_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::SCRAPIProtocol::RequestQuery)},
  { 13, 21, sizeof(::SCRAPIProtocol::ResponseQuery)},
  { 24, 33, sizeof(::SCRAPIProtocol::RequestQueryPathing)},
  { 36, 42, sizeof(::SCRAPIProtocol::ResponseQueryPathing)},
  { 43, 49, sizeof(::SCRAPIProtocol::RequestQueryAvailableAbilities)},
  { 50, 58, sizeof(::SCRAPIProtocol::ResponseQueryAvailableAbilities)},
  { 61, 69, sizeof(::SCRAPIProtocol::RequestQueryBuildingPlacement)},
  { 72, 78, sizeof(::SCRAPIProtocol::ResponseQueryBuildingPlacement)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_RequestQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ResponseQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_RequestQueryPathing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ResponseQueryPathing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_RequestQueryAvailableAbilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ResponseQueryAvailableAbilities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_RequestQueryBuildingPlacement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ResponseQueryBuildingPlacement_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "query.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013query.proto\022\016SCRAPIProtocol\032\014common.pr"
      "oto\032\013error.proto\"\360\001\n\014RequestQuery\0224\n\007pat"
      "hing\030\001 \003(\0132#.SCRAPIProtocol.RequestQuery"
      "Pathing\022A\n\tabilities\030\002 \003(\0132..SCRAPIProto"
      "col.RequestQueryAvailableAbilities\022A\n\npl"
      "acements\030\003 \003(\0132-.SCRAPIProtocol.RequestQ"
      "ueryBuildingPlacement\022$\n\034ignore_resource"
      "_requirements\030\004 \001(\010\"\316\001\n\rResponseQuery\0225\n"
      "\007pathing\030\001 \003(\0132$.SCRAPIProtocol.Response"
      "QueryPathing\022B\n\tabilities\030\002 \003(\0132/.SCRAPI"
      "Protocol.ResponseQueryAvailableAbilities"
      "\022B\n\nplacements\030\003 \003(\0132..SCRAPIProtocol.Re"
      "sponseQueryBuildingPlacement\"\212\001\n\023Request"
      "QueryPathing\022,\n\tstart_pos\030\001 \001(\0132\027.SCRAPI"
      "Protocol.Point2DH\000\022\022\n\010unit_tag\030\002 \001(\004H\000\022("
      "\n\007end_pos\030\003 \001(\0132\027.SCRAPIProtocol.Point2D"
      "B\007\n\005start\"(\n\024ResponseQueryPathing\022\020\n\010dis"
      "tance\030\001 \001(\002\"2\n\036RequestQueryAvailableAbil"
      "ities\022\020\n\010unit_tag\030\001 \001(\004\"~\n\037ResponseQuery"
      "AvailableAbilities\0223\n\tabilities\030\001 \003(\0132 ."
      "SCRAPIProtocol.AvailableAbility\022\020\n\010unit_"
      "tag\030\002 \001(\004\022\024\n\014unit_type_id\030\003 \001(\r\"z\n\035Reque"
      "stQueryBuildingPlacement\022\022\n\nability_id\030\001"
      " \001(\005\022+\n\ntarget_pos\030\002 \001(\0132\027.SCRAPIProtoco"
      "l.Point2D\022\030\n\020placing_unit_tag\030\003 \001(\004\"N\n\036R"
      "esponseQueryBuildingPlacement\022,\n\006result\030"
      "\001 \001(\0162\034.SCRAPIProtocol.ActionResult"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1075);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "query.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
  ::protobuf_error_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_query_2eproto
namespace SCRAPIProtocol {

// ===================================================================

void RequestQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kPathingFieldNumber;
const int RequestQuery::kAbilitiesFieldNumber;
const int RequestQuery::kPlacementsFieldNumber;
const int RequestQuery::kIgnoreResourceRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_RequestQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.RequestQuery)
}
RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pathing_(from.pathing_),
      abilities_(from.abilities_),
      placements_(from.placements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignore_resource_requirements_ = from.ignore_resource_requirements_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.RequestQuery)
}

void RequestQuery::SharedCtor() {
  ignore_resource_requirements_ = false;
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
}

void RequestQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQuery::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQuery& RequestQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_RequestQuery.base);
  return *internal_default_instance();
}


void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathing_.Clear();
  abilities_.Clear();
  placements_.Clear();
  ignore_resource_requirements_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.RequestQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.RequestQueryPathing pathing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pathing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.RequestQueryAvailableAbilities abilities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.RequestQueryBuildingPlacement placements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_placements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_resource_requirements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ignore_resource_requirements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_resource_requirements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.RequestQuery)
  return false;
#undef DO_
}

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.RequestQueryPathing pathing = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathing_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pathing(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.RequestQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->abilities(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.RequestQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->placements(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_resource_requirements = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ignore_resource_requirements(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.RequestQuery)
}

::google::protobuf::uint8* RequestQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.RequestQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.RequestQueryPathing pathing = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathing_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pathing(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.RequestQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->abilities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.RequestQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->placements(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool ignore_resource_requirements = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ignore_resource_requirements(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.RequestQuery)
  return target;
}

size_t RequestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.RequestQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.RequestQueryPathing pathing = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pathing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pathing(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.RequestQueryAvailableAbilities abilities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.RequestQueryBuildingPlacement placements = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->placements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->placements(static_cast<int>(i)));
    }
  }

  // optional bool ignore_resource_requirements = 4;
  if (has_ignore_resource_requirements()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.RequestQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.RequestQuery)
    MergeFrom(*source);
  }
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.RequestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pathing_.MergeFrom(from.pathing_);
  abilities_.MergeFrom(from.abilities_);
  placements_.MergeFrom(from.placements_);
  if (from.has_ignore_resource_requirements()) {
    set_ignore_resource_requirements(from.ignore_resource_requirements());
  }
}

void RequestQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {
  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  using std::swap;
  CastToBase(&pathing_)->InternalSwap(CastToBase(&other->pathing_));
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  CastToBase(&placements_)->InternalSwap(CastToBase(&other->placements_));
  swap(ignore_resource_requirements_, other->ignore_resource_requirements_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQuery::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQuery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kPathingFieldNumber;
const int ResponseQuery::kAbilitiesFieldNumber;
const int ResponseQuery::kPlacementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_ResponseQuery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ResponseQuery)
}
ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pathing_(from.pathing_),
      abilities_(from.abilities_),
      placements_(from.placements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
}

void ResponseQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuery& ResponseQuery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_ResponseQuery.base);
  return *internal_default_instance();
}


void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathing_.Clear();
  abilities_.Clear();
  placements_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ResponseQuery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.ResponseQueryPathing pathing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pathing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.ResponseQueryAvailableAbilities abilities = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.ResponseQueryBuildingPlacement placements = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_placements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.ResponseQueryPathing pathing = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathing_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pathing(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->abilities(static_cast<int>(i)),
      output);
  }

  // repeated .SCRAPIProtocol.ResponseQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placements_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->placements(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ResponseQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.ResponseQueryPathing pathing = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pathing_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pathing(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->abilities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SCRAPIProtocol.ResponseQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->placements_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->placements(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ResponseQuery)
  return target;
}

size_t ResponseQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ResponseQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.ResponseQueryPathing pathing = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pathing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pathing(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.ResponseQueryBuildingPlacement placements = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->placements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->placements(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ResponseQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pathing_.MergeFrom(from.pathing_);
  abilities_.MergeFrom(from.abilities_);
  placements_.MergeFrom(from.placements_);
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {
  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  using std::swap;
  CastToBase(&pathing_)->InternalSwap(CastToBase(&other->pathing_));
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  CastToBase(&placements_)->InternalSwap(CastToBase(&other->placements_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQueryPathing::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_RequestQueryPathing_default_instance_.start_pos_ = const_cast< ::SCRAPIProtocol::Point2D*>(
      ::SCRAPIProtocol::Point2D::internal_default_instance());
  ::SCRAPIProtocol::_RequestQueryPathing_default_instance_.unit_tag_ = GOOGLE_ULONGLONG(0);
  ::SCRAPIProtocol::_RequestQueryPathing_default_instance_._instance.get_mutable()->end_pos_ = const_cast< ::SCRAPIProtocol::Point2D*>(
      ::SCRAPIProtocol::Point2D::internal_default_instance());
}
void RequestQueryPathing::set_allocated_start_pos(::SCRAPIProtocol::Point2D* start_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_start();
  if (start_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    set_has_start_pos();
    start_.start_pos_ = start_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.RequestQueryPathing.start_pos)
}
void RequestQueryPathing::clear_start_pos() {
  if (has_start_pos()) {
    delete start_.start_pos_;
    clear_has_start();
  }
}
void RequestQueryPathing::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->Clear();
  clear_has_end_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryPathing::kStartPosFieldNumber;
const int RequestQueryPathing::kUnitTagFieldNumber;
const int RequestQueryPathing::kEndPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryPathing::RequestQueryPathing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_RequestQueryPathing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.RequestQueryPathing)
}
RequestQueryPathing::RequestQueryPathing(const RequestQueryPathing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_end_pos()) {
    end_pos_ = new ::SCRAPIProtocol::Point2D(*from.end_pos_);
  } else {
    end_pos_ = NULL;
  }
  clear_has_start();
  switch (from.start_case()) {
    case kStartPos: {
      mutable_start_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.start_pos());
      break;
    }
    case kUnitTag: {
      set_unit_tag(from.unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.RequestQueryPathing)
}

void RequestQueryPathing::SharedCtor() {
  end_pos_ = NULL;
  clear_has_start();
}

RequestQueryPathing::~RequestQueryPathing() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.RequestQueryPathing)
  SharedDtor();
}

void RequestQueryPathing::SharedDtor() {
  if (this != internal_default_instance()) delete end_pos_;
  if (has_start()) {
    clear_start();
  }
}

void RequestQueryPathing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQueryPathing::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQueryPathing& RequestQueryPathing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_RequestQueryPathing.base);
  return *internal_default_instance();
}


void RequestQueryPathing::clear_start() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.RequestQueryPathing)
  switch (start_case()) {
    case kStartPos: {
      delete start_.start_pos_;
      break;
    }
    case kUnitTag: {
      // No need to clear
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_NOT_SET;
}


void RequestQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.RequestQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(end_pos_ != NULL);
    end_pos_->Clear();
  }
  clear_start();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQueryPathing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.RequestQueryPathing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Point2D start_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unit_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_.unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point2D end_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.RequestQueryPathing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.RequestQueryPathing)
  return false;
#undef DO_
}

void RequestQueryPathing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.RequestQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (start_case()) {
    case kStartPos:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_start_pos(), output);
      break;
    case kUnitTag:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unit_tag(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point2D end_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_end_pos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.RequestQueryPathing)
}

::google::protobuf::uint8* RequestQueryPathing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.RequestQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (start_case()) {
    case kStartPos:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_start_pos(), deterministic, target);
      break;
    case kUnitTag:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unit_tag(), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point2D end_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_end_pos(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.RequestQueryPathing)
  return target;
}

size_t RequestQueryPathing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.RequestQueryPathing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.Point2D end_pos = 3;
  if (has_end_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  switch (start_case()) {
    // optional .SCRAPIProtocol.Point2D start_pos = 1;
    case kStartPos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_.start_pos_);
      break;
    }
    // optional uint64 unit_tag = 2;
    case kUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQueryPathing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.RequestQueryPathing)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQueryPathing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryPathing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.RequestQueryPathing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.RequestQueryPathing)
    MergeFrom(*source);
  }
}

void RequestQueryPathing::MergeFrom(const RequestQueryPathing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.RequestQueryPathing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_end_pos()) {
    mutable_end_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.end_pos());
  }
  switch (from.start_case()) {
    case kStartPos: {
      mutable_start_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.start_pos());
      break;
    }
    case kUnitTag: {
      set_unit_tag(from.unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
}

void RequestQueryPathing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.RequestQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryPathing::CopyFrom(const RequestQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.RequestQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryPathing::IsInitialized() const {
  return true;
}

void RequestQueryPathing::Swap(RequestQueryPathing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryPathing::InternalSwap(RequestQueryPathing* other) {
  using std::swap;
  swap(end_pos_, other->end_pos_);
  swap(start_, other->start_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQueryPathing::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQueryPathing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryPathing::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryPathing::ResponseQueryPathing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_ResponseQueryPathing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ResponseQueryPathing)
}
ResponseQueryPathing::ResponseQueryPathing(const ResponseQueryPathing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ResponseQueryPathing)
}

void ResponseQueryPathing::SharedCtor() {
  distance_ = 0;
}

ResponseQueryPathing::~ResponseQueryPathing() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ResponseQueryPathing)
  SharedDtor();
}

void ResponseQueryPathing::SharedDtor() {
}

void ResponseQueryPathing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQueryPathing::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQueryPathing& ResponseQueryPathing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_ResponseQueryPathing.base);
  return *internal_default_instance();
}


void ResponseQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ResponseQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQueryPathing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ResponseQueryPathing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ResponseQueryPathing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ResponseQueryPathing)
  return false;
#undef DO_
}

void ResponseQueryPathing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ResponseQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ResponseQueryPathing)
}

::google::protobuf::uint8* ResponseQueryPathing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ResponseQueryPathing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ResponseQueryPathing)
  return target;
}

size_t ResponseQueryPathing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ResponseQueryPathing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional float distance = 1;
  if (has_distance()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQueryPathing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ResponseQueryPathing)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQueryPathing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryPathing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ResponseQueryPathing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ResponseQueryPathing)
    MergeFrom(*source);
  }
}

void ResponseQueryPathing::MergeFrom(const ResponseQueryPathing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ResponseQueryPathing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_distance()) {
    set_distance(from.distance());
  }
}

void ResponseQueryPathing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ResponseQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryPathing::CopyFrom(const ResponseQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ResponseQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryPathing::IsInitialized() const {
  return true;
}

void ResponseQueryPathing::Swap(ResponseQueryPathing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryPathing::InternalSwap(ResponseQueryPathing* other) {
  using std::swap;
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQueryPathing::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQueryAvailableAbilities::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryAvailableAbilities::kUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryAvailableAbilities::RequestQueryAvailableAbilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_RequestQueryAvailableAbilities.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.RequestQueryAvailableAbilities)
}
RequestQueryAvailableAbilities::RequestQueryAvailableAbilities(const RequestQueryAvailableAbilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_tag_ = from.unit_tag_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.RequestQueryAvailableAbilities)
}

void RequestQueryAvailableAbilities::SharedCtor() {
  unit_tag_ = GOOGLE_ULONGLONG(0);
}

RequestQueryAvailableAbilities::~RequestQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.RequestQueryAvailableAbilities)
  SharedDtor();
}

void RequestQueryAvailableAbilities::SharedDtor() {
}

void RequestQueryAvailableAbilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQueryAvailableAbilities::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQueryAvailableAbilities& RequestQueryAvailableAbilities::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_RequestQueryAvailableAbilities.base);
  return *internal_default_instance();
}


void RequestQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_tag_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQueryAvailableAbilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unit_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.RequestQueryAvailableAbilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.RequestQueryAvailableAbilities)
  return false;
#undef DO_
}

void RequestQueryAvailableAbilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.RequestQueryAvailableAbilities)
}

::google::protobuf::uint8* RequestQueryAvailableAbilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.RequestQueryAvailableAbilities)
  return target;
}

size_t RequestQueryAvailableAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unit_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQueryAvailableAbilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQueryAvailableAbilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryAvailableAbilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.RequestQueryAvailableAbilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.RequestQueryAvailableAbilities)
    MergeFrom(*source);
  }
}

void RequestQueryAvailableAbilities::MergeFrom(const RequestQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unit_tag()) {
    set_unit_tag(from.unit_tag());
  }
}

void RequestQueryAvailableAbilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryAvailableAbilities::CopyFrom(const RequestQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.RequestQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryAvailableAbilities::IsInitialized() const {
  return true;
}

void RequestQueryAvailableAbilities::Swap(RequestQueryAvailableAbilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryAvailableAbilities::InternalSwap(RequestQueryAvailableAbilities* other) {
  using std::swap;
  swap(unit_tag_, other->unit_tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQueryAvailableAbilities::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQueryAvailableAbilities::InitAsDefaultInstance() {
}
void ResponseQueryAvailableAbilities::clear_abilities() {
  abilities_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryAvailableAbilities::kAbilitiesFieldNumber;
const int ResponseQueryAvailableAbilities::kUnitTagFieldNumber;
const int ResponseQueryAvailableAbilities::kUnitTypeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_ResponseQueryAvailableAbilities.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ResponseQueryAvailableAbilities)
}
ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities(const ResponseQueryAvailableAbilities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_tag_, &from.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_type_id_) -
    reinterpret_cast<char*>(&unit_tag_)) + sizeof(unit_type_id_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ResponseQueryAvailableAbilities)
}

void ResponseQueryAvailableAbilities::SharedCtor() {
  ::memset(&unit_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_type_id_) -
      reinterpret_cast<char*>(&unit_tag_)) + sizeof(unit_type_id_));
}

ResponseQueryAvailableAbilities::~ResponseQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  SharedDtor();
}

void ResponseQueryAvailableAbilities::SharedDtor() {
}

void ResponseQueryAvailableAbilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQueryAvailableAbilities::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQueryAvailableAbilities& ResponseQueryAvailableAbilities::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_ResponseQueryAvailableAbilities.base);
  return *internal_default_instance();
}


void ResponseQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_type_id_) -
        reinterpret_cast<char*>(&unit_tag_)) + sizeof(unit_type_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQueryAvailableAbilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.AvailableAbility abilities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 unit_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_unit_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_unit_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  return false;
#undef DO_
}

void ResponseQueryAvailableAbilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.AvailableAbility abilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->abilities(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unit_tag(), output);
  }

  // optional uint32 unit_type_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unit_type_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ResponseQueryAvailableAbilities)
}

::google::protobuf::uint8* ResponseQueryAvailableAbilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.AvailableAbility abilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->abilities(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unit_tag(), target);
  }

  // optional uint32 unit_type_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unit_type_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  return target;
}

size_t ResponseQueryAvailableAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.AvailableAbility abilities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 unit_tag = 2;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

    // optional uint32 unit_type_id = 3;
    if (has_unit_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQueryAvailableAbilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQueryAvailableAbilities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryAvailableAbilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ResponseQueryAvailableAbilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ResponseQueryAvailableAbilities)
    MergeFrom(*source);
  }
}

void ResponseQueryAvailableAbilities::MergeFrom(const ResponseQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      unit_tag_ = from.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      unit_type_id_ = from.unit_type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseQueryAvailableAbilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryAvailableAbilities::CopyFrom(const ResponseQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ResponseQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryAvailableAbilities::IsInitialized() const {
  return true;
}

void ResponseQueryAvailableAbilities::Swap(ResponseQueryAvailableAbilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryAvailableAbilities::InternalSwap(ResponseQueryAvailableAbilities* other) {
  using std::swap;
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  swap(unit_tag_, other->unit_tag_);
  swap(unit_type_id_, other->unit_type_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQueryAvailableAbilities::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQueryBuildingPlacement::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_RequestQueryBuildingPlacement_default_instance_._instance.get_mutable()->target_pos_ = const_cast< ::SCRAPIProtocol::Point2D*>(
      ::SCRAPIProtocol::Point2D::internal_default_instance());
}
void RequestQueryBuildingPlacement::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->Clear();
  clear_has_target_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryBuildingPlacement::kAbilityIdFieldNumber;
const int RequestQueryBuildingPlacement::kTargetPosFieldNumber;
const int RequestQueryBuildingPlacement::kPlacingUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryBuildingPlacement::RequestQueryBuildingPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_RequestQueryBuildingPlacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.RequestQueryBuildingPlacement)
}
RequestQueryBuildingPlacement::RequestQueryBuildingPlacement(const RequestQueryBuildingPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_pos()) {
    target_pos_ = new ::SCRAPIProtocol::Point2D(*from.target_pos_);
  } else {
    target_pos_ = NULL;
  }
  ::memcpy(&placing_unit_tag_, &from.placing_unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&placing_unit_tag_)) + sizeof(ability_id_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.RequestQueryBuildingPlacement)
}

void RequestQueryBuildingPlacement::SharedCtor() {
  ::memset(&target_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_id_) -
      reinterpret_cast<char*>(&target_pos_)) + sizeof(ability_id_));
}

RequestQueryBuildingPlacement::~RequestQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.RequestQueryBuildingPlacement)
  SharedDtor();
}

void RequestQueryBuildingPlacement::SharedDtor() {
  if (this != internal_default_instance()) delete target_pos_;
}

void RequestQueryBuildingPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQueryBuildingPlacement::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQueryBuildingPlacement& RequestQueryBuildingPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_RequestQueryBuildingPlacement.base);
  return *internal_default_instance();
}


void RequestQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_pos_ != NULL);
    target_pos_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&placing_unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_id_) -
        reinterpret_cast<char*>(&placing_unit_tag_)) + sizeof(ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQueryBuildingPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point2D target_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 placing_unit_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_placing_unit_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &placing_unit_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.RequestQueryBuildingPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.RequestQueryBuildingPlacement)
  return false;
#undef DO_
}

void RequestQueryBuildingPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // optional .SCRAPIProtocol.Point2D target_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_target_pos(), output);
  }

  // optional uint64 placing_unit_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->placing_unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.RequestQueryBuildingPlacement)
}

::google::protobuf::uint8* RequestQueryBuildingPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // optional .SCRAPIProtocol.Point2D target_pos = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_target_pos(), deterministic, target);
  }

  // optional uint64 placing_unit_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->placing_unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.RequestQueryBuildingPlacement)
  return target;
}

size_t RequestQueryBuildingPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SCRAPIProtocol.Point2D target_pos = 2;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_pos_);
    }

    // optional uint64 placing_unit_tag = 3;
    if (has_placing_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->placing_unit_tag());
    }

    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQueryBuildingPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQueryBuildingPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryBuildingPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.RequestQueryBuildingPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.RequestQueryBuildingPlacement)
    MergeFrom(*source);
  }
}

void RequestQueryBuildingPlacement::MergeFrom(const RequestQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.target_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      placing_unit_tag_ = from.placing_unit_tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_id_ = from.ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestQueryBuildingPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryBuildingPlacement::CopyFrom(const RequestQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.RequestQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryBuildingPlacement::IsInitialized() const {
  return true;
}

void RequestQueryBuildingPlacement::Swap(RequestQueryBuildingPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryBuildingPlacement::InternalSwap(RequestQueryBuildingPlacement* other) {
  using std::swap;
  swap(target_pos_, other->target_pos_);
  swap(placing_unit_tag_, other->placing_unit_tag_);
  swap(ability_id_, other->ability_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQueryBuildingPlacement::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQueryBuildingPlacement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryBuildingPlacement::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_query_2eproto::scc_info_ResponseQueryBuildingPlacement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ResponseQueryBuildingPlacement)
}
ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement(const ResponseQueryBuildingPlacement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ResponseQueryBuildingPlacement)
}

void ResponseQueryBuildingPlacement::SharedCtor() {
  result_ = 1;
}

ResponseQueryBuildingPlacement::~ResponseQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  SharedDtor();
}

void ResponseQueryBuildingPlacement::SharedDtor() {
}

void ResponseQueryBuildingPlacement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQueryBuildingPlacement::descriptor() {
  ::protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQueryBuildingPlacement& ResponseQueryBuildingPlacement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_query_2eproto::scc_info_ResponseQueryBuildingPlacement.base);
  return *internal_default_instance();
}


void ResponseQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQueryBuildingPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::ActionResult_IsValid(value)) {
            set_result(static_cast< ::SCRAPIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  return false;
#undef DO_
}

void ResponseQueryBuildingPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ResponseQueryBuildingPlacement)
}

::google::protobuf::uint8* ResponseQueryBuildingPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionResult result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  return target;
}

size_t ResponseQueryBuildingPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.ActionResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQueryBuildingPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQueryBuildingPlacement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryBuildingPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ResponseQueryBuildingPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ResponseQueryBuildingPlacement)
    MergeFrom(*source);
  }
}

void ResponseQueryBuildingPlacement::MergeFrom(const ResponseQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void ResponseQueryBuildingPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryBuildingPlacement::CopyFrom(const ResponseQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ResponseQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryBuildingPlacement::IsInitialized() const {
  return true;
}

void ResponseQueryBuildingPlacement::Swap(ResponseQueryBuildingPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryBuildingPlacement::InternalSwap(ResponseQueryBuildingPlacement* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQueryBuildingPlacement::GetMetadata() const {
  protobuf_query_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_query_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::RequestQuery* Arena::CreateMaybeMessage< ::SCRAPIProtocol::RequestQuery >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::RequestQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ResponseQuery* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ResponseQuery >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ResponseQuery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::RequestQueryPathing* Arena::CreateMaybeMessage< ::SCRAPIProtocol::RequestQueryPathing >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::RequestQueryPathing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ResponseQueryPathing* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ResponseQueryPathing >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ResponseQueryPathing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::RequestQueryAvailableAbilities* Arena::CreateMaybeMessage< ::SCRAPIProtocol::RequestQueryAvailableAbilities >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::RequestQueryAvailableAbilities >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ResponseQueryAvailableAbilities* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ResponseQueryAvailableAbilities >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ResponseQueryAvailableAbilities >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::RequestQueryBuildingPlacement* Arena::CreateMaybeMessage< ::SCRAPIProtocol::RequestQueryBuildingPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::RequestQueryBuildingPlacement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ResponseQueryBuildingPlacement* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ResponseQueryBuildingPlacement >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ResponseQueryBuildingPlacement >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
