// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw.proto

#include "raw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Size2DI;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImageData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RectangleI;
}  // namespace protobuf_common_2eproto
namespace protobuf_raw_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionRawToggleAutocast;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Event;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PassengerUnit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionRawCameraMove;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionRawUnitCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Effect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PowerSource;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UnitOrder;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerRaw;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raw_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Unit;
}  // namespace protobuf_raw_2eproto
namespace SCRAPIProtocol {
class StartRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartRaw>
      _instance;
} _StartRaw_default_instance_;
class ObservationRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservationRaw>
      _instance;
} _ObservationRaw_default_instance_;
class PowerSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PowerSource>
      _instance;
} _PowerSource_default_instance_;
class PlayerRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerRaw>
      _instance;
} _PlayerRaw_default_instance_;
class UnitOrderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnitOrder>
      _instance;
  const ::SCRAPIProtocol::Point* target_world_space_pos_;
  ::google::protobuf::uint64 target_unit_tag_;
} _UnitOrder_default_instance_;
class PassengerUnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PassengerUnit>
      _instance;
} _PassengerUnit_default_instance_;
class UnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unit>
      _instance;
} _Unit_default_instance_;
class MapStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapState>
      _instance;
} _MapState_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
class EffectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Effect>
      _instance;
} _Effect_default_instance_;
class ActionRawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionRaw>
      _instance;
  const ::SCRAPIProtocol::ActionRawUnitCommand* unit_command_;
  const ::SCRAPIProtocol::ActionRawCameraMove* camera_move_;
  const ::SCRAPIProtocol::ActionRawToggleAutocast* toggle_autocast_;
} _ActionRaw_default_instance_;
class ActionRawUnitCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionRawUnitCommand>
      _instance;
  const ::SCRAPIProtocol::Point2D* target_world_space_pos_;
  ::google::protobuf::uint64 target_unit_tag_;
} _ActionRawUnitCommand_default_instance_;
class ActionRawCameraMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionRawCameraMove>
      _instance;
} _ActionRawCameraMove_default_instance_;
class ActionRawToggleAutocastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionRawToggleAutocast>
      _instance;
} _ActionRawToggleAutocast_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_raw_2eproto {
static void InitDefaultsStartRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_StartRaw_default_instance_;
    new (ptr) ::SCRAPIProtocol::StartRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::StartRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_StartRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsStartRaw}, {
      &protobuf_common_2eproto::scc_info_Size2DI.base,
      &protobuf_common_2eproto::scc_info_ImageData.base,
      &protobuf_common_2eproto::scc_info_RectangleI.base,
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsObservationRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ObservationRaw_default_instance_;
    new (ptr) ::SCRAPIProtocol::ObservationRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ObservationRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ObservationRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsObservationRaw}, {
      &protobuf_raw_2eproto::scc_info_PlayerRaw.base,
      &protobuf_raw_2eproto::scc_info_Unit.base,
      &protobuf_raw_2eproto::scc_info_MapState.base,
      &protobuf_raw_2eproto::scc_info_Event.base,
      &protobuf_raw_2eproto::scc_info_Effect.base,}};

static void InitDefaultsPowerSource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_PowerSource_default_instance_;
    new (ptr) ::SCRAPIProtocol::PowerSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::PowerSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PowerSource =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPowerSource}, {
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsPlayerRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_PlayerRaw_default_instance_;
    new (ptr) ::SCRAPIProtocol::PlayerRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::PlayerRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerRaw}, {
      &protobuf_raw_2eproto::scc_info_PowerSource.base,
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsUnitOrder() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_UnitOrder_default_instance_;
    new (ptr) ::SCRAPIProtocol::UnitOrder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::UnitOrder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_UnitOrder =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnitOrder}, {
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsPassengerUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_PassengerUnit_default_instance_;
    new (ptr) ::SCRAPIProtocol::PassengerUnit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::PassengerUnit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PassengerUnit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPassengerUnit}, {}};

static void InitDefaultsUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Unit_default_instance_;
    new (ptr) ::SCRAPIProtocol::Unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUnit}, {
      &protobuf_common_2eproto::scc_info_Point.base,
      &protobuf_raw_2eproto::scc_info_UnitOrder.base,
      &protobuf_raw_2eproto::scc_info_PassengerUnit.base,}};

static void InitDefaultsMapState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_MapState_default_instance_;
    new (ptr) ::SCRAPIProtocol::MapState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::MapState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapState}, {
      &protobuf_common_2eproto::scc_info_ImageData.base,}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Event_default_instance_;
    new (ptr) ::SCRAPIProtocol::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvent}, {}};

static void InitDefaultsEffect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_Effect_default_instance_;
    new (ptr) ::SCRAPIProtocol::Effect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::Effect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Effect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEffect}, {
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsActionRaw() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionRaw_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionRaw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionRaw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ActionRaw =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsActionRaw}, {
      &protobuf_raw_2eproto::scc_info_ActionRawUnitCommand.base,
      &protobuf_raw_2eproto::scc_info_ActionRawCameraMove.base,
      &protobuf_raw_2eproto::scc_info_ActionRawToggleAutocast.base,}};

static void InitDefaultsActionRawUnitCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionRawUnitCommand_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionRawUnitCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionRawUnitCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionRawUnitCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionRawUnitCommand}, {
      &protobuf_common_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsActionRawCameraMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionRawCameraMove_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionRawCameraMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionRawCameraMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionRawCameraMove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionRawCameraMove}, {
      &protobuf_common_2eproto::scc_info_Point.base,}};

static void InitDefaultsActionRawToggleAutocast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionRawToggleAutocast_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionRawToggleAutocast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionRawToggleAutocast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionRawToggleAutocast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionRawToggleAutocast}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_StartRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservationRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PowerSource.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnitOrder.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PassengerUnit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Effect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionRaw.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionRawUnitCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionRawCameraMove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionRawToggleAutocast.base);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, map_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, pathing_grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, terrain_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, placement_grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, playable_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::StartRaw, start_locations_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, map_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRaw, effects_),
  0,
  ~0u,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PowerSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PowerSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PowerSource, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PowerSource, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PowerSource, tag_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PlayerRaw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PlayerRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PlayerRaw, power_sources_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PlayerRaw, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PlayerRaw, upgrade_ids_),
  ~0u,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, ability_id_),
  offsetof(::SCRAPIProtocol::UnitOrderDefaultTypeInternal, target_world_space_pos_),
  offsetof(::SCRAPIProtocol::UnitOrderDefaultTypeInternal, target_unit_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitOrder, target_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, health_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, shield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, shield_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, energy_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::PassengerUnit, unit_type_),
  0,
  1,
  2,
  3,
  6,
  4,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, display_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, alliance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, facing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, build_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, cloak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, detect_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, radar_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_selected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_on_screen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_blip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_powered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, health_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, shield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, shield_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, energy_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, mineral_contents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, vespene_contents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_flying_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, is_burrowed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, orders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, add_on_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, passengers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, cargo_space_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, cargo_space_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, buff_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, assigned_harvesters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, ideal_harvesters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, weapon_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Unit, engaged_target_tag_),
  31,
  32,
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  30,
  25,
  26,
  11,
  12,
  13,
  14,
  7,
  8,
  9,
  28,
  10,
  29,
  15,
  16,
  17,
  18,
  ~0u,
  20,
  ~0u,
  19,
  21,
  ~0u,
  22,
  23,
  24,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MapState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MapState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MapState, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MapState, creep_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Event, dead_units_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Effect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Effect, effect_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::Effect, pos_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRaw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRaw, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SCRAPIProtocol::ActionRawDefaultTypeInternal, unit_command_),
  offsetof(::SCRAPIProtocol::ActionRawDefaultTypeInternal, camera_move_),
  offsetof(::SCRAPIProtocol::ActionRawDefaultTypeInternal, toggle_autocast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRaw, action_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, ability_id_),
  offsetof(::SCRAPIProtocol::ActionRawUnitCommandDefaultTypeInternal, target_world_space_pos_),
  offsetof(::SCRAPIProtocol::ActionRawUnitCommandDefaultTypeInternal, target_unit_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, unit_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, queue_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawUnitCommand, target_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawCameraMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawCameraMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawCameraMove, center_world_space_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawToggleAutocast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawToggleAutocast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawToggleAutocast, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionRawToggleAutocast, unit_tags_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::SCRAPIProtocol::StartRaw)},
  { 17, 27, sizeof(::SCRAPIProtocol::ObservationRaw)},
  { 32, 40, sizeof(::SCRAPIProtocol::PowerSource)},
  { 43, 51, sizeof(::SCRAPIProtocol::PlayerRaw)},
  { 54, 64, sizeof(::SCRAPIProtocol::UnitOrder)},
  { 68, 81, sizeof(::SCRAPIProtocol::PassengerUnit)},
  { 89, 130, sizeof(::SCRAPIProtocol::Unit)},
  { 166, 173, sizeof(::SCRAPIProtocol::MapState)},
  { 175, 181, sizeof(::SCRAPIProtocol::Event)},
  { 182, 189, sizeof(::SCRAPIProtocol::Effect)},
  { 191, 200, sizeof(::SCRAPIProtocol::ActionRaw)},
  { 203, 214, sizeof(::SCRAPIProtocol::ActionRawUnitCommand)},
  { 219, 225, sizeof(::SCRAPIProtocol::ActionRawCameraMove)},
  { 226, 233, sizeof(::SCRAPIProtocol::ActionRawToggleAutocast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_StartRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ObservationRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_PowerSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_PlayerRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_UnitOrder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_PassengerUnit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_MapState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_Effect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionRaw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionRawUnitCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionRawCameraMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionRawToggleAutocast_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "raw.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\traw.proto\022\016SCRAPIProtocol\032\014common.prot"
      "o\"\261\002\n\010StartRaw\022)\n\010map_size\030\001 \001(\0132\027.SCRAP"
      "IProtocol.Size2DI\022/\n\014pathing_grid\030\002 \001(\0132"
      "\031.SCRAPIProtocol.ImageData\0221\n\016terrain_he"
      "ight\030\003 \001(\0132\031.SCRAPIProtocol.ImageData\0221\n"
      "\016placement_grid\030\004 \001(\0132\031.SCRAPIProtocol.I"
      "mageData\0221\n\rplayable_area\030\005 \001(\0132\032.SCRAPI"
      "Protocol.RectangleI\0220\n\017start_locations\030\006"
      " \003(\0132\027.SCRAPIProtocol.Point2D\"\334\001\n\016Observ"
      "ationRaw\022)\n\006player\030\001 \001(\0132\031.SCRAPIProtoco"
      "l.PlayerRaw\022#\n\005units\030\002 \003(\0132\024.SCRAPIProto"
      "col.Unit\022+\n\tmap_state\030\003 \001(\0132\030.SCRAPIProt"
      "ocol.MapState\022$\n\005event\030\004 \001(\0132\025.SCRAPIPro"
      "tocol.Event\022\'\n\007effects\030\005 \003(\0132\026.SCRAPIPro"
      "tocol.Effect\"N\n\013PowerSource\022\"\n\003pos\030\001 \001(\013"
      "2\025.SCRAPIProtocol.Point\022\016\n\006radius\030\002 \001(\002\022"
      "\013\n\003tag\030\003 \001(\004\"{\n\tPlayerRaw\0222\n\rpower_sourc"
      "es\030\001 \003(\0132\033.SCRAPIProtocol.PowerSource\022%\n"
      "\006camera\030\002 \001(\0132\025.SCRAPIProtocol.Point\022\023\n\013"
      "upgrade_ids\030\003 \003(\r\"\217\001\n\tUnitOrder\022\022\n\nabili"
      "ty_id\030\001 \001(\r\0227\n\026target_world_space_pos\030\002 "
      "\001(\0132\025.SCRAPIProtocol.PointH\000\022\031\n\017target_u"
      "nit_tag\030\003 \001(\004H\000\022\020\n\010progress\030\004 \001(\002B\010\n\006tar"
      "get\"\233\001\n\rPassengerUnit\022\013\n\003tag\030\001 \001(\004\022\016\n\006he"
      "alth\030\002 \001(\002\022\022\n\nhealth_max\030\003 \001(\002\022\016\n\006shield"
      "\030\004 \001(\002\022\022\n\nshield_max\030\007 \001(\002\022\016\n\006energy\030\005 \001"
      "(\002\022\022\n\nenergy_max\030\010 \001(\002\022\021\n\tunit_type\030\006 \001("
      "\r\"\202\007\n\004Unit\0221\n\014display_type\030\001 \001(\0162\033.SCRAP"
      "IProtocol.DisplayType\022*\n\010alliance\030\002 \001(\0162"
      "\030.SCRAPIProtocol.Alliance\022\013\n\003tag\030\003 \001(\004\022\021"
      "\n\tunit_type\030\004 \001(\r\022\r\n\005owner\030\005 \001(\005\022\"\n\003pos\030"
      "\006 \001(\0132\025.SCRAPIProtocol.Point\022\016\n\006facing\030\007"
      " \001(\002\022\016\n\006radius\030\010 \001(\002\022\026\n\016build_progress\030\t"
      " \001(\002\022)\n\005cloak\030\n \001(\0162\032.SCRAPIProtocol.Clo"
      "akState\022\024\n\014detect_range\030\037 \001(\002\022\023\n\013radar_r"
      "ange\030  \001(\002\022\023\n\013is_selected\030\013 \001(\010\022\024\n\014is_on"
      "_screen\030\014 \001(\010\022\017\n\007is_blip\030\r \001(\010\022\022\n\nis_pow"
      "ered\030# \001(\010\022\016\n\006health\030\016 \001(\002\022\022\n\nhealth_max"
      "\030\017 \001(\002\022\016\n\006shield\030\020 \001(\002\022\022\n\nshield_max\030$ \001"
      "(\002\022\016\n\006energy\030\021 \001(\002\022\022\n\nenergy_max\030% \001(\002\022\030"
      "\n\020mineral_contents\030\022 \001(\005\022\030\n\020vespene_cont"
      "ents\030\023 \001(\005\022\021\n\tis_flying\030\024 \001(\010\022\023\n\013is_burr"
      "owed\030\025 \001(\010\022)\n\006orders\030\026 \003(\0132\031.SCRAPIProto"
      "col.UnitOrder\022\022\n\nadd_on_tag\030\027 \001(\004\0221\n\npas"
      "sengers\030\030 \003(\0132\035.SCRAPIProtocol.Passenger"
      "Unit\022\031\n\021cargo_space_taken\030\031 \001(\005\022\027\n\017cargo"
      "_space_max\030\032 \001(\005\022\020\n\010buff_ids\030\033 \003(\r\022\033\n\023as"
      "signed_harvesters\030\034 \001(\005\022\030\n\020ideal_harvest"
      "ers\030\035 \001(\005\022\027\n\017weapon_cooldown\030\036 \001(\002\022\032\n\022en"
      "gaged_target_tag\030\" \001(\004\"c\n\010MapState\022-\n\nvi"
      "sibility\030\001 \001(\0132\031.SCRAPIProtocol.ImageDat"
      "a\022(\n\005creep\030\002 \001(\0132\031.SCRAPIProtocol.ImageD"
      "ata\"\033\n\005Event\022\022\n\ndead_units\030\001 \003(\004\"A\n\006Effe"
      "ct\022\021\n\teffect_id\030\001 \001(\r\022$\n\003pos\030\002 \003(\0132\027.SCR"
      "APIProtocol.Point2D\"\323\001\n\tActionRaw\022<\n\014uni"
      "t_command\030\001 \001(\0132$.SCRAPIProtocol.ActionR"
      "awUnitCommandH\000\022:\n\013camera_move\030\002 \001(\0132#.S"
      "CRAPIProtocol.ActionRawCameraMoveH\000\022B\n\017t"
      "oggle_autocast\030\003 \001(\0132\'.SCRAPIProtocol.Ac"
      "tionRawToggleAutocastH\000B\010\n\006action\"\264\001\n\024Ac"
      "tionRawUnitCommand\022\022\n\nability_id\030\001 \001(\005\0229"
      "\n\026target_world_space_pos\030\002 \001(\0132\027.SCRAPIP"
      "rotocol.Point2DH\000\022\031\n\017target_unit_tag\030\003 \001"
      "(\004H\000\022\021\n\tunit_tags\030\004 \003(\004\022\025\n\rqueue_command"
      "\030\005 \001(\010B\010\n\006target\"H\n\023ActionRawCameraMove\022"
      "1\n\022center_world_space\030\001 \001(\0132\025.SCRAPIProt"
      "ocol.Point\"@\n\027ActionRawToggleAutocast\022\022\n"
      "\nability_id\030\001 \001(\005\022\021\n\tunit_tags\030\002 \003(\004*4\n\013"
      "DisplayType\022\013\n\007Visible\020\001\022\014\n\010Snapshot\020\002\022\n"
      "\n\006Hidden\020\003*6\n\010Alliance\022\010\n\004Self\020\001\022\010\n\004Ally"
      "\020\002\022\013\n\007Neutral\020\003\022\t\n\005Enemy\020\004*>\n\nCloakState"
      "\022\013\n\007Cloaked\020\001\022\023\n\017CloakedDetected\020\002\022\016\n\nNo"
      "tCloaked\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raw.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raw_2eproto
namespace SCRAPIProtocol {
const ::google::protobuf::EnumDescriptor* DisplayType_descriptor() {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raw_2eproto::file_level_enum_descriptors[0];
}
bool DisplayType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Alliance_descriptor() {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raw_2eproto::file_level_enum_descriptors[1];
}
bool Alliance_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CloakState_descriptor() {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raw_2eproto::file_level_enum_descriptors[2];
}
bool CloakState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void StartRaw::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_StartRaw_default_instance_._instance.get_mutable()->map_size_ = const_cast< ::SCRAPIProtocol::Size2DI*>(
      ::SCRAPIProtocol::Size2DI::internal_default_instance());
  ::SCRAPIProtocol::_StartRaw_default_instance_._instance.get_mutable()->pathing_grid_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_StartRaw_default_instance_._instance.get_mutable()->terrain_height_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_StartRaw_default_instance_._instance.get_mutable()->placement_grid_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_StartRaw_default_instance_._instance.get_mutable()->playable_area_ = const_cast< ::SCRAPIProtocol::RectangleI*>(
      ::SCRAPIProtocol::RectangleI::internal_default_instance());
}
void StartRaw::clear_map_size() {
  if (map_size_ != NULL) map_size_->Clear();
  clear_has_map_size();
}
void StartRaw::clear_pathing_grid() {
  if (pathing_grid_ != NULL) pathing_grid_->Clear();
  clear_has_pathing_grid();
}
void StartRaw::clear_terrain_height() {
  if (terrain_height_ != NULL) terrain_height_->Clear();
  clear_has_terrain_height();
}
void StartRaw::clear_placement_grid() {
  if (placement_grid_ != NULL) placement_grid_->Clear();
  clear_has_placement_grid();
}
void StartRaw::clear_playable_area() {
  if (playable_area_ != NULL) playable_area_->Clear();
  clear_has_playable_area();
}
void StartRaw::clear_start_locations() {
  start_locations_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRaw::kMapSizeFieldNumber;
const int StartRaw::kPathingGridFieldNumber;
const int StartRaw::kTerrainHeightFieldNumber;
const int StartRaw::kPlacementGridFieldNumber;
const int StartRaw::kPlayableAreaFieldNumber;
const int StartRaw::kStartLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRaw::StartRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_StartRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.StartRaw)
}
StartRaw::StartRaw(const StartRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      start_locations_(from.start_locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_size()) {
    map_size_ = new ::SCRAPIProtocol::Size2DI(*from.map_size_);
  } else {
    map_size_ = NULL;
  }
  if (from.has_pathing_grid()) {
    pathing_grid_ = new ::SCRAPIProtocol::ImageData(*from.pathing_grid_);
  } else {
    pathing_grid_ = NULL;
  }
  if (from.has_terrain_height()) {
    terrain_height_ = new ::SCRAPIProtocol::ImageData(*from.terrain_height_);
  } else {
    terrain_height_ = NULL;
  }
  if (from.has_placement_grid()) {
    placement_grid_ = new ::SCRAPIProtocol::ImageData(*from.placement_grid_);
  } else {
    placement_grid_ = NULL;
  }
  if (from.has_playable_area()) {
    playable_area_ = new ::SCRAPIProtocol::RectangleI(*from.playable_area_);
  } else {
    playable_area_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.StartRaw)
}

void StartRaw::SharedCtor() {
  ::memset(&map_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playable_area_) -
      reinterpret_cast<char*>(&map_size_)) + sizeof(playable_area_));
}

StartRaw::~StartRaw() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.StartRaw)
  SharedDtor();
}

void StartRaw::SharedDtor() {
  if (this != internal_default_instance()) delete map_size_;
  if (this != internal_default_instance()) delete pathing_grid_;
  if (this != internal_default_instance()) delete terrain_height_;
  if (this != internal_default_instance()) delete placement_grid_;
  if (this != internal_default_instance()) delete playable_area_;
}

void StartRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartRaw::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartRaw& StartRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_StartRaw.base);
  return *internal_default_instance();
}


void StartRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.StartRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_locations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(map_size_ != NULL);
      map_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pathing_grid_ != NULL);
      pathing_grid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(terrain_height_ != NULL);
      terrain_height_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(placement_grid_ != NULL);
      placement_grid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(playable_area_ != NULL);
      playable_area_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.StartRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Size2DI map_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData pathing_grid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pathing_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData terrain_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terrain_height()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData placement_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_placement_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.RectangleI playable_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_playable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Point2D start_locations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_start_locations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.StartRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.StartRaw)
  return false;
#undef DO_
}

void StartRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.StartRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Size2DI map_size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_map_size(), output);
  }

  // optional .SCRAPIProtocol.ImageData pathing_grid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_pathing_grid(), output);
  }

  // optional .SCRAPIProtocol.ImageData terrain_height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_terrain_height(), output);
  }

  // optional .SCRAPIProtocol.ImageData placement_grid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_placement_grid(), output);
  }

  // optional .SCRAPIProtocol.RectangleI playable_area = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_playable_area(), output);
  }

  // repeated .SCRAPIProtocol.Point2D start_locations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->start_locations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->start_locations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.StartRaw)
}

::google::protobuf::uint8* StartRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.StartRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Size2DI map_size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_map_size(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData pathing_grid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_pathing_grid(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData terrain_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_terrain_height(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData placement_grid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_placement_grid(), deterministic, target);
  }

  // optional .SCRAPIProtocol.RectangleI playable_area = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_playable_area(), deterministic, target);
  }

  // repeated .SCRAPIProtocol.Point2D start_locations = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->start_locations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->start_locations(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.StartRaw)
  return target;
}

size_t StartRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.StartRaw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.Point2D start_locations = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->start_locations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->start_locations(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .SCRAPIProtocol.Size2DI map_size = 1;
    if (has_map_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_size_);
    }

    // optional .SCRAPIProtocol.ImageData pathing_grid = 2;
    if (has_pathing_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pathing_grid_);
    }

    // optional .SCRAPIProtocol.ImageData terrain_height = 3;
    if (has_terrain_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *terrain_height_);
    }

    // optional .SCRAPIProtocol.ImageData placement_grid = 4;
    if (has_placement_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *placement_grid_);
    }

    // optional .SCRAPIProtocol.RectangleI playable_area = 5;
    if (has_playable_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *playable_area_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.StartRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.StartRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.StartRaw)
    MergeFrom(*source);
  }
}

void StartRaw::MergeFrom(const StartRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.StartRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  start_locations_.MergeFrom(from.start_locations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_map_size()->::SCRAPIProtocol::Size2DI::MergeFrom(from.map_size());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pathing_grid()->::SCRAPIProtocol::ImageData::MergeFrom(from.pathing_grid());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_terrain_height()->::SCRAPIProtocol::ImageData::MergeFrom(from.terrain_height());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_placement_grid()->::SCRAPIProtocol::ImageData::MergeFrom(from.placement_grid());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_playable_area()->::SCRAPIProtocol::RectangleI::MergeFrom(from.playable_area());
    }
  }
}

void StartRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.StartRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRaw::CopyFrom(const StartRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.StartRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRaw::IsInitialized() const {
  return true;
}

void StartRaw::Swap(StartRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRaw::InternalSwap(StartRaw* other) {
  using std::swap;
  CastToBase(&start_locations_)->InternalSwap(CastToBase(&other->start_locations_));
  swap(map_size_, other->map_size_);
  swap(pathing_grid_, other->pathing_grid_);
  swap(terrain_height_, other->terrain_height_);
  swap(placement_grid_, other->placement_grid_);
  swap(playable_area_, other->playable_area_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartRaw::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObservationRaw::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ObservationRaw_default_instance_._instance.get_mutable()->player_ = const_cast< ::SCRAPIProtocol::PlayerRaw*>(
      ::SCRAPIProtocol::PlayerRaw::internal_default_instance());
  ::SCRAPIProtocol::_ObservationRaw_default_instance_._instance.get_mutable()->map_state_ = const_cast< ::SCRAPIProtocol::MapState*>(
      ::SCRAPIProtocol::MapState::internal_default_instance());
  ::SCRAPIProtocol::_ObservationRaw_default_instance_._instance.get_mutable()->event_ = const_cast< ::SCRAPIProtocol::Event*>(
      ::SCRAPIProtocol::Event::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationRaw::kPlayerFieldNumber;
const int ObservationRaw::kUnitsFieldNumber;
const int ObservationRaw::kMapStateFieldNumber;
const int ObservationRaw::kEventFieldNumber;
const int ObservationRaw::kEffectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationRaw::ObservationRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_ObservationRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ObservationRaw)
}
ObservationRaw::ObservationRaw(const ObservationRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      units_(from.units_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::SCRAPIProtocol::PlayerRaw(*from.player_);
  } else {
    player_ = NULL;
  }
  if (from.has_map_state()) {
    map_state_ = new ::SCRAPIProtocol::MapState(*from.map_state_);
  } else {
    map_state_ = NULL;
  }
  if (from.has_event()) {
    event_ = new ::SCRAPIProtocol::Event(*from.event_);
  } else {
    event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ObservationRaw)
}

void ObservationRaw::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_) -
      reinterpret_cast<char*>(&player_)) + sizeof(event_));
}

ObservationRaw::~ObservationRaw() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ObservationRaw)
  SharedDtor();
}

void ObservationRaw::SharedDtor() {
  if (this != internal_default_instance()) delete player_;
  if (this != internal_default_instance()) delete map_state_;
  if (this != internal_default_instance()) delete event_;
}

void ObservationRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObservationRaw::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObservationRaw& ObservationRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_ObservationRaw.base);
  return *internal_default_instance();
}


void ObservationRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ObservationRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  effects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_ != NULL);
      player_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(map_state_ != NULL);
      map_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(event_ != NULL);
      event_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObservationRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ObservationRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.PlayerRaw player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Unit units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.MapState map_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Event event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Effect effects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ObservationRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ObservationRaw)
  return false;
#undef DO_
}

void ObservationRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ObservationRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PlayerRaw player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player(), output);
  }

  // repeated .SCRAPIProtocol.Unit units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->units(static_cast<int>(i)),
      output);
  }

  // optional .SCRAPIProtocol.MapState map_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_map_state(), output);
  }

  // optional .SCRAPIProtocol.Event event = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_event(), output);
  }

  // repeated .SCRAPIProtocol.Effect effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->effects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ObservationRaw)
}

::google::protobuf::uint8* ObservationRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ObservationRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PlayerRaw player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player(), deterministic, target);
  }

  // repeated .SCRAPIProtocol.Unit units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->units(static_cast<int>(i)), deterministic, target);
  }

  // optional .SCRAPIProtocol.MapState map_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_map_state(), deterministic, target);
  }

  // optional .SCRAPIProtocol.Event event = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_event(), deterministic, target);
  }

  // repeated .SCRAPIProtocol.Effect effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->effects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ObservationRaw)
  return target;
}

size_t ObservationRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ObservationRaw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.Unit units = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->units(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.Effect effects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SCRAPIProtocol.PlayerRaw player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_);
    }

    // optional .SCRAPIProtocol.MapState map_state = 3;
    if (has_map_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_state_);
    }

    // optional .SCRAPIProtocol.Event event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ObservationRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ObservationRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ObservationRaw)
    MergeFrom(*source);
  }
}

void ObservationRaw::MergeFrom(const ObservationRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ObservationRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  effects_.MergeFrom(from.effects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player()->::SCRAPIProtocol::PlayerRaw::MergeFrom(from.player());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_map_state()->::SCRAPIProtocol::MapState::MergeFrom(from.map_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_event()->::SCRAPIProtocol::Event::MergeFrom(from.event());
    }
  }
}

void ObservationRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ObservationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationRaw::CopyFrom(const ObservationRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ObservationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationRaw::IsInitialized() const {
  return true;
}

void ObservationRaw::Swap(ObservationRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationRaw::InternalSwap(ObservationRaw* other) {
  using std::swap;
  CastToBase(&units_)->InternalSwap(CastToBase(&other->units_));
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  swap(player_, other->player_);
  swap(map_state_, other->map_state_);
  swap(event_, other->event_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObservationRaw::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PowerSource::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_PowerSource_default_instance_._instance.get_mutable()->pos_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void PowerSource::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerSource::kPosFieldNumber;
const int PowerSource::kRadiusFieldNumber;
const int PowerSource::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerSource::PowerSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_PowerSource.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.PowerSource)
}
PowerSource::PowerSource(const PowerSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::SCRAPIProtocol::Point(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.PowerSource)
}

void PowerSource::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(radius_));
}

PowerSource::~PowerSource() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.PowerSource)
  SharedDtor();
}

void PowerSource::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void PowerSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PowerSource::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PowerSource& PowerSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_PowerSource.base);
  return *internal_default_instance();
}


void PowerSource::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.PowerSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PowerSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.PowerSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Point pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.PowerSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.PowerSource)
  return false;
#undef DO_
}

void PowerSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.PowerSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // optional float radius = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional uint64 tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.PowerSource)
}

::google::protobuf::uint8* PowerSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.PowerSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // optional float radius = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional uint64 tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.PowerSource)
  return target;
}

size_t PowerSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.PowerSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SCRAPIProtocol.Point pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint64 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.PowerSource)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.PowerSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.PowerSource)
    MergeFrom(*source);
  }
}

void PowerSource::MergeFrom(const PowerSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.PowerSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::SCRAPIProtocol::Point::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.PowerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerSource::CopyFrom(const PowerSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.PowerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerSource::IsInitialized() const {
  return true;
}

void PowerSource::Swap(PowerSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerSource::InternalSwap(PowerSource* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(tag_, other->tag_);
  swap(radius_, other->radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PowerSource::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerRaw::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_PlayerRaw_default_instance_._instance.get_mutable()->camera_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void PlayerRaw::clear_camera() {
  if (camera_ != NULL) camera_->Clear();
  clear_has_camera();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRaw::kPowerSourcesFieldNumber;
const int PlayerRaw::kCameraFieldNumber;
const int PlayerRaw::kUpgradeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRaw::PlayerRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_PlayerRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.PlayerRaw)
}
PlayerRaw::PlayerRaw(const PlayerRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      power_sources_(from.power_sources_),
      upgrade_ids_(from.upgrade_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_camera()) {
    camera_ = new ::SCRAPIProtocol::Point(*from.camera_);
  } else {
    camera_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.PlayerRaw)
}

void PlayerRaw::SharedCtor() {
  camera_ = NULL;
}

PlayerRaw::~PlayerRaw() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.PlayerRaw)
  SharedDtor();
}

void PlayerRaw::SharedDtor() {
  if (this != internal_default_instance()) delete camera_;
}

void PlayerRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerRaw::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerRaw& PlayerRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_PlayerRaw.base);
  return *internal_default_instance();
}


void PlayerRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.PlayerRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  power_sources_.Clear();
  upgrade_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(camera_ != NULL);
    camera_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.PlayerRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.PowerSource power_sources = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_power_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point camera = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 upgrade_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_upgrade_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_upgrade_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.PlayerRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.PlayerRaw)
  return false;
#undef DO_
}

void PlayerRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.PlayerRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.PowerSource power_sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->power_sources_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->power_sources(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point camera = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_camera(), output);
  }

  // repeated uint32 upgrade_ids = 3;
  for (int i = 0, n = this->upgrade_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->upgrade_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.PlayerRaw)
}

::google::protobuf::uint8* PlayerRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.PlayerRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.PowerSource power_sources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->power_sources_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->power_sources(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point camera = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_camera(), deterministic, target);
  }

  // repeated uint32 upgrade_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->upgrade_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.PlayerRaw)
  return target;
}

size_t PlayerRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.PlayerRaw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.PowerSource power_sources = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->power_sources_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->power_sources(static_cast<int>(i)));
    }
  }

  // repeated uint32 upgrade_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->upgrade_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->upgrade_ids_size());
    total_size += data_size;
  }

  // optional .SCRAPIProtocol.Point camera = 2;
  if (has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.PlayerRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.PlayerRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.PlayerRaw)
    MergeFrom(*source);
  }
}

void PlayerRaw::MergeFrom(const PlayerRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.PlayerRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  power_sources_.MergeFrom(from.power_sources_);
  upgrade_ids_.MergeFrom(from.upgrade_ids_);
  if (from.has_camera()) {
    mutable_camera()->::SCRAPIProtocol::Point::MergeFrom(from.camera());
  }
}

void PlayerRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.PlayerRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRaw::CopyFrom(const PlayerRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.PlayerRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRaw::IsInitialized() const {
  return true;
}

void PlayerRaw::Swap(PlayerRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRaw::InternalSwap(PlayerRaw* other) {
  using std::swap;
  CastToBase(&power_sources_)->InternalSwap(CastToBase(&other->power_sources_));
  upgrade_ids_.InternalSwap(&other->upgrade_ids_);
  swap(camera_, other->camera_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerRaw::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnitOrder::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_UnitOrder_default_instance_.target_world_space_pos_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
  ::SCRAPIProtocol::_UnitOrder_default_instance_.target_unit_tag_ = GOOGLE_ULONGLONG(0);
}
void UnitOrder::set_allocated_target_world_space_pos(::SCRAPIProtocol::Point* target_world_space_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (target_world_space_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_world_space_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_world_space_pos, submessage_arena);
    }
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = target_world_space_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.UnitOrder.target_world_space_pos)
}
void UnitOrder::clear_target_world_space_pos() {
  if (has_target_world_space_pos()) {
    delete target_.target_world_space_pos_;
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitOrder::kAbilityIdFieldNumber;
const int UnitOrder::kTargetWorldSpacePosFieldNumber;
const int UnitOrder::kTargetUnitTagFieldNumber;
const int UnitOrder::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitOrder::UnitOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_UnitOrder.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.UnitOrder)
}
UnitOrder::UnitOrder(const UnitOrder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(progress_));
  clear_has_target();
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SCRAPIProtocol::Point::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.UnitOrder)
}

void UnitOrder::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(progress_));
  clear_has_target();
}

UnitOrder::~UnitOrder() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.UnitOrder)
  SharedDtor();
}

void UnitOrder::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
}

void UnitOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnitOrder::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitOrder& UnitOrder::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_UnitOrder.base);
  return *internal_default_instance();
}


void UnitOrder::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.UnitOrder)
  switch (target_case()) {
    case kTargetWorldSpacePos: {
      delete target_.target_world_space_pos_;
      break;
    }
    case kTargetUnitTag: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void UnitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.UnitOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&progress_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(progress_));
  }
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnitOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.UnitOrder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point target_world_space_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_world_space_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_unit_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_.target_unit_tag_)));
          set_has_target_unit_tag();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.UnitOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.UnitOrder)
  return false;
#undef DO_
}

void UnitOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.UnitOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  switch (target_case()) {
    case kTargetWorldSpacePos:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_target_world_space_pos(), output);
      break;
    case kTargetUnitTag:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_unit_tag(), output);
      break;
    default: ;
  }
  // optional float progress = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.UnitOrder)
}

::google::protobuf::uint8* UnitOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.UnitOrder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  switch (target_case()) {
    case kTargetWorldSpacePos:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_target_world_space_pos(), deterministic, target);
      break;
    case kTargetUnitTag:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_unit_tag(), target);
      break;
    default: ;
  }
  // optional float progress = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.UnitOrder)
  return target;
}

size_t UnitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.UnitOrder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional float progress = 4;
    if (has_progress()) {
      total_size += 1 + 4;
    }

  }
  switch (target_case()) {
    // optional .SCRAPIProtocol.Point target_world_space_pos = 2;
    case kTargetWorldSpacePos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.target_world_space_pos_);
      break;
    }
    // optional uint64 target_unit_tag = 3;
    case kTargetUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitOrder* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.UnitOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.UnitOrder)
    MergeFrom(*source);
  }
}

void UnitOrder::MergeFrom(const UnitOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.UnitOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SCRAPIProtocol::Point::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void UnitOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOrder::CopyFrom(const UnitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOrder::IsInitialized() const {
  return true;
}

void UnitOrder::Swap(UnitOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitOrder::InternalSwap(UnitOrder* other) {
  using std::swap;
  swap(ability_id_, other->ability_id_);
  swap(progress_, other->progress_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnitOrder::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PassengerUnit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassengerUnit::kTagFieldNumber;
const int PassengerUnit::kHealthFieldNumber;
const int PassengerUnit::kHealthMaxFieldNumber;
const int PassengerUnit::kShieldFieldNumber;
const int PassengerUnit::kShieldMaxFieldNumber;
const int PassengerUnit::kEnergyFieldNumber;
const int PassengerUnit::kEnergyMaxFieldNumber;
const int PassengerUnit::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassengerUnit::PassengerUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_PassengerUnit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.PassengerUnit)
}
PassengerUnit::PassengerUnit(const PassengerUnit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&energy_max_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(energy_max_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.PassengerUnit)
}

void PassengerUnit::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&energy_max_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(energy_max_));
}

PassengerUnit::~PassengerUnit() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.PassengerUnit)
  SharedDtor();
}

void PassengerUnit::SharedDtor() {
}

void PassengerUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PassengerUnit::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassengerUnit& PassengerUnit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_PassengerUnit.base);
  return *internal_default_instance();
}


void PassengerUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.PassengerUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&energy_max_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(energy_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PassengerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.PassengerUnit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_health_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shield = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_shield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float energy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_energy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_unit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shield_max = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_shield_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float energy_max = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_energy_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.PassengerUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.PassengerUnit)
  return false;
#undef DO_
}

void PassengerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.PassengerUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tag(), output);
  }

  // optional float health = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health(), output);
  }

  // optional float health_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->health_max(), output);
  }

  // optional float shield = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->shield(), output);
  }

  // optional float energy = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energy(), output);
  }

  // optional uint32 unit_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unit_type(), output);
  }

  // optional float shield_max = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->shield_max(), output);
  }

  // optional float energy_max = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->energy_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.PassengerUnit)
}

::google::protobuf::uint8* PassengerUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.PassengerUnit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tag(), target);
  }

  // optional float health = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health(), target);
  }

  // optional float health_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->health_max(), target);
  }

  // optional float shield = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->shield(), target);
  }

  // optional float energy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energy(), target);
  }

  // optional uint32 unit_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unit_type(), target);
  }

  // optional float shield_max = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->shield_max(), target);
  }

  // optional float energy_max = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->energy_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.PassengerUnit)
  return target;
}

size_t PassengerUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.PassengerUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

    // optional float health = 2;
    if (has_health()) {
      total_size += 1 + 4;
    }

    // optional float health_max = 3;
    if (has_health_max()) {
      total_size += 1 + 4;
    }

    // optional float shield = 4;
    if (has_shield()) {
      total_size += 1 + 4;
    }

    // optional float energy = 5;
    if (has_energy()) {
      total_size += 1 + 4;
    }

    // optional uint32 unit_type = 6;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional float shield_max = 7;
    if (has_shield_max()) {
      total_size += 1 + 4;
    }

    // optional float energy_max = 8;
    if (has_energy_max()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassengerUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.PassengerUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const PassengerUnit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassengerUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.PassengerUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.PassengerUnit)
    MergeFrom(*source);
  }
}

void PassengerUnit::MergeFrom(const PassengerUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.PassengerUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000004u) {
      health_max_ = from.health_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      shield_ = from.shield_;
    }
    if (cached_has_bits & 0x00000010u) {
      energy_ = from.energy_;
    }
    if (cached_has_bits & 0x00000020u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      shield_max_ = from.shield_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      energy_max_ = from.energy_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PassengerUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.PassengerUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassengerUnit::CopyFrom(const PassengerUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.PassengerUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassengerUnit::IsInitialized() const {
  return true;
}

void PassengerUnit::Swap(PassengerUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassengerUnit::InternalSwap(PassengerUnit* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(health_, other->health_);
  swap(health_max_, other->health_max_);
  swap(shield_, other->shield_);
  swap(energy_, other->energy_);
  swap(unit_type_, other->unit_type_);
  swap(shield_max_, other->shield_max_);
  swap(energy_max_, other->energy_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PassengerUnit::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unit::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_Unit_default_instance_._instance.get_mutable()->pos_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void Unit::clear_pos() {
  if (pos_ != NULL) pos_->Clear();
  clear_has_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kDisplayTypeFieldNumber;
const int Unit::kAllianceFieldNumber;
const int Unit::kTagFieldNumber;
const int Unit::kUnitTypeFieldNumber;
const int Unit::kOwnerFieldNumber;
const int Unit::kPosFieldNumber;
const int Unit::kFacingFieldNumber;
const int Unit::kRadiusFieldNumber;
const int Unit::kBuildProgressFieldNumber;
const int Unit::kCloakFieldNumber;
const int Unit::kDetectRangeFieldNumber;
const int Unit::kRadarRangeFieldNumber;
const int Unit::kIsSelectedFieldNumber;
const int Unit::kIsOnScreenFieldNumber;
const int Unit::kIsBlipFieldNumber;
const int Unit::kIsPoweredFieldNumber;
const int Unit::kHealthFieldNumber;
const int Unit::kHealthMaxFieldNumber;
const int Unit::kShieldFieldNumber;
const int Unit::kShieldMaxFieldNumber;
const int Unit::kEnergyFieldNumber;
const int Unit::kEnergyMaxFieldNumber;
const int Unit::kMineralContentsFieldNumber;
const int Unit::kVespeneContentsFieldNumber;
const int Unit::kIsFlyingFieldNumber;
const int Unit::kIsBurrowedFieldNumber;
const int Unit::kOrdersFieldNumber;
const int Unit::kAddOnTagFieldNumber;
const int Unit::kPassengersFieldNumber;
const int Unit::kCargoSpaceTakenFieldNumber;
const int Unit::kCargoSpaceMaxFieldNumber;
const int Unit::kBuffIdsFieldNumber;
const int Unit::kAssignedHarvestersFieldNumber;
const int Unit::kIdealHarvestersFieldNumber;
const int Unit::kWeaponCooldownFieldNumber;
const int Unit::kEngagedTargetTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_Unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Unit)
}
Unit::Unit(const Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      orders_(from.orders_),
      passengers_(from.passengers_),
      buff_ids_(from.buff_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::SCRAPIProtocol::Point(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&alliance_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(alliance_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Unit)
}

void Unit::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&energy_max_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(energy_max_));
  cloak_ = 1;
  display_type_ = 1;
  alliance_ = 1;
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unit& Unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_Unit.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orders_.Clear();
  passengers_.Clear();
  buff_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&health_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(health_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&health_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mineral_contents_) -
        reinterpret_cast<char*>(&health_max_)) + sizeof(mineral_contents_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&vespene_contents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ideal_harvesters_) -
        reinterpret_cast<char*>(&vespene_contents_)) + sizeof(ideal_harvesters_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&weapon_cooldown_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&energy_max_) -
        reinterpret_cast<char*>(&weapon_cooldown_)) + sizeof(energy_max_));
    cloak_ = 1;
    display_type_ = 1;
  }
  alliance_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.DisplayType display_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::SCRAPIProtocol::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Alliance alliance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::Alliance_IsValid(value)) {
            set_alliance(static_cast< ::SCRAPIProtocol::Alliance >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_unit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 owner = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float facing = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_facing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &facing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float build_progress = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_build_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.CloakState cloak = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::CloakState_IsValid(value)) {
            set_cloak(static_cast< ::SCRAPIProtocol::CloakState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_selected = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_selected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_on_screen = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_on_screen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_blip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_blip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_max = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_health_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shield = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_shield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float energy = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_energy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mineral_contents = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_mineral_contents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mineral_contents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vespene_contents = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_vespene_contents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vespene_contents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_flying = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_is_flying();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_flying_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_burrowed = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_burrowed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_burrowed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.UnitOrder orders = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 add_on_tag = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_add_on_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_on_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.PassengerUnit passengers = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passengers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cargo_space_taken = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_cargo_space_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargo_space_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cargo_space_max = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_cargo_space_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargo_space_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 buff_ids = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216u, input, this->mutable_buff_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buff_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 assigned_harvesters = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_assigned_harvesters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assigned_harvesters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ideal_harvesters = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_ideal_harvesters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ideal_harvesters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weapon_cooldown = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u /* 245 & 0xFF */)) {
          set_has_weapon_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weapon_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float detect_range = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
          set_has_detect_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detect_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radar_range = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          set_has_radar_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radar_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 engaged_target_tag = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_engaged_target_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &engaged_target_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_powered = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_is_powered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_powered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shield_max = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {
          set_has_shield_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float energy_max = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {
          set_has_energy_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DisplayType display_type = 1;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->display_type(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .SCRAPIProtocol.Alliance alliance = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->alliance(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tag(), output);
  }

  // optional uint32 unit_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unit_type(), output);
  }

  // optional int32 owner = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner(), output);
  }

  // optional .SCRAPIProtocol.Point pos = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_pos(), output);
  }

  // optional float facing = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->facing(), output);
  }

  // optional float radius = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->radius(), output);
  }

  // optional float build_progress = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->build_progress(), output);
  }

  // optional .SCRAPIProtocol.CloakState cloak = 10;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cloak(), output);
  }

  // optional bool is_selected = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_selected(), output);
  }

  // optional bool is_on_screen = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_on_screen(), output);
  }

  // optional bool is_blip = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_blip(), output);
  }

  // optional float health = 14;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->health(), output);
  }

  // optional float health_max = 15;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->health_max(), output);
  }

  // optional float shield = 16;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->shield(), output);
  }

  // optional float energy = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->energy(), output);
  }

  // optional int32 mineral_contents = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mineral_contents(), output);
  }

  // optional int32 vespene_contents = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->vespene_contents(), output);
  }

  // optional bool is_flying = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_flying(), output);
  }

  // optional bool is_burrowed = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_burrowed(), output);
  }

  // repeated .SCRAPIProtocol.UnitOrder orders = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->orders(static_cast<int>(i)),
      output);
  }

  // optional uint64 add_on_tag = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->add_on_tag(), output);
  }

  // repeated .SCRAPIProtocol.PassengerUnit passengers = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passengers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->passengers(static_cast<int>(i)),
      output);
  }

  // optional int32 cargo_space_taken = 25;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->cargo_space_taken(), output);
  }

  // optional int32 cargo_space_max = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->cargo_space_max(), output);
  }

  // repeated uint32 buff_ids = 27;
  for (int i = 0, n = this->buff_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->buff_ids(i), output);
  }

  // optional int32 assigned_harvesters = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->assigned_harvesters(), output);
  }

  // optional int32 ideal_harvesters = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->ideal_harvesters(), output);
  }

  // optional float weapon_cooldown = 30;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->weapon_cooldown(), output);
  }

  // optional float detect_range = 31;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->detect_range(), output);
  }

  // optional float radar_range = 32;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->radar_range(), output);
  }

  // optional uint64 engaged_target_tag = 34;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->engaged_target_tag(), output);
  }

  // optional bool is_powered = 35;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->is_powered(), output);
  }

  // optional float shield_max = 36;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->shield_max(), output);
  }

  // optional float energy_max = 37;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->energy_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Unit)
}

::google::protobuf::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.DisplayType display_type = 1;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->display_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .SCRAPIProtocol.Alliance alliance = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->alliance(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 tag = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tag(), target);
  }

  // optional uint32 unit_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unit_type(), target);
  }

  // optional int32 owner = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner(), target);
  }

  // optional .SCRAPIProtocol.Point pos = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_pos(), deterministic, target);
  }

  // optional float facing = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->facing(), target);
  }

  // optional float radius = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->radius(), target);
  }

  // optional float build_progress = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->build_progress(), target);
  }

  // optional .SCRAPIProtocol.CloakState cloak = 10;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cloak(), target);
  }

  // optional bool is_selected = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_selected(), target);
  }

  // optional bool is_on_screen = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_on_screen(), target);
  }

  // optional bool is_blip = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_blip(), target);
  }

  // optional float health = 14;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->health(), target);
  }

  // optional float health_max = 15;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->health_max(), target);
  }

  // optional float shield = 16;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->shield(), target);
  }

  // optional float energy = 17;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->energy(), target);
  }

  // optional int32 mineral_contents = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mineral_contents(), target);
  }

  // optional int32 vespene_contents = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->vespene_contents(), target);
  }

  // optional bool is_flying = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_flying(), target);
  }

  // optional bool is_burrowed = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_burrowed(), target);
  }

  // repeated .SCRAPIProtocol.UnitOrder orders = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->orders_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->orders(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 add_on_tag = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->add_on_tag(), target);
  }

  // repeated .SCRAPIProtocol.PassengerUnit passengers = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passengers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->passengers(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 cargo_space_taken = 25;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->cargo_space_taken(), target);
  }

  // optional int32 cargo_space_max = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->cargo_space_max(), target);
  }

  // repeated uint32 buff_ids = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(27, this->buff_ids_, target);

  // optional int32 assigned_harvesters = 28;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->assigned_harvesters(), target);
  }

  // optional int32 ideal_harvesters = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->ideal_harvesters(), target);
  }

  // optional float weapon_cooldown = 30;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->weapon_cooldown(), target);
  }

  // optional float detect_range = 31;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->detect_range(), target);
  }

  // optional float radar_range = 32;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->radar_range(), target);
  }

  // optional uint64 engaged_target_tag = 34;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->engaged_target_tag(), target);
  }

  // optional bool is_powered = 35;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->is_powered(), target);
  }

  // optional float shield_max = 36;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->shield_max(), target);
  }

  // optional float energy_max = 37;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->energy_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Unit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.UnitOrder orders = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->orders_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->orders(static_cast<int>(i)));
    }
  }

  // repeated .SCRAPIProtocol.PassengerUnit passengers = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->passengers_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passengers(static_cast<int>(i)));
    }
  }

  // repeated uint32 buff_ids = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->buff_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->buff_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SCRAPIProtocol.Point pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional uint64 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

    // optional uint32 unit_type = 4;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional int32 owner = 5;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional float facing = 7;
    if (has_facing()) {
      total_size += 1 + 4;
    }

    // optional float radius = 8;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional float build_progress = 9;
    if (has_build_progress()) {
      total_size += 1 + 4;
    }

    // optional float health = 14;
    if (has_health()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float health_max = 15;
    if (has_health_max()) {
      total_size += 1 + 4;
    }

    // optional float shield = 16;
    if (has_shield()) {
      total_size += 2 + 4;
    }

    // optional float energy = 17;
    if (has_energy()) {
      total_size += 2 + 4;
    }

    // optional bool is_selected = 11;
    if (has_is_selected()) {
      total_size += 1 + 1;
    }

    // optional bool is_on_screen = 12;
    if (has_is_on_screen()) {
      total_size += 1 + 1;
    }

    // optional bool is_blip = 13;
    if (has_is_blip()) {
      total_size += 1 + 1;
    }

    // optional bool is_powered = 35;
    if (has_is_powered()) {
      total_size += 2 + 1;
    }

    // optional int32 mineral_contents = 18;
    if (has_mineral_contents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mineral_contents());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 vespene_contents = 19;
    if (has_vespene_contents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vespene_contents());
    }

    // optional bool is_flying = 20;
    if (has_is_flying()) {
      total_size += 2 + 1;
    }

    // optional bool is_burrowed = 21;
    if (has_is_burrowed()) {
      total_size += 2 + 1;
    }

    // optional int32 cargo_space_taken = 25;
    if (has_cargo_space_taken()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargo_space_taken());
    }

    // optional uint64 add_on_tag = 23;
    if (has_add_on_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_on_tag());
    }

    // optional int32 cargo_space_max = 26;
    if (has_cargo_space_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargo_space_max());
    }

    // optional int32 assigned_harvesters = 28;
    if (has_assigned_harvesters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assigned_harvesters());
    }

    // optional int32 ideal_harvesters = 29;
    if (has_ideal_harvesters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ideal_harvesters());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float weapon_cooldown = 30;
    if (has_weapon_cooldown()) {
      total_size += 2 + 4;
    }

    // optional float detect_range = 31;
    if (has_detect_range()) {
      total_size += 2 + 4;
    }

    // optional float radar_range = 32;
    if (has_radar_range()) {
      total_size += 2 + 4;
    }

    // optional uint64 engaged_target_tag = 34;
    if (has_engaged_target_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->engaged_target_tag());
    }

    // optional float shield_max = 36;
    if (has_shield_max()) {
      total_size += 2 + 4;
    }

    // optional float energy_max = 37;
    if (has_energy_max()) {
      total_size += 2 + 4;
    }

    // optional .SCRAPIProtocol.CloakState cloak = 10;
    if (has_cloak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cloak());
    }

    // optional .SCRAPIProtocol.DisplayType display_type = 1;
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

  }
  // optional .SCRAPIProtocol.Alliance alliance = 2;
  if (has_alliance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->alliance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orders_.MergeFrom(from.orders_);
  passengers_.MergeFrom(from.passengers_);
  buff_ids_.MergeFrom(from.buff_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::SCRAPIProtocol::Point::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      owner_ = from.owner_;
    }
    if (cached_has_bits & 0x00000010u) {
      facing_ = from.facing_;
    }
    if (cached_has_bits & 0x00000020u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000040u) {
      build_progress_ = from.build_progress_;
    }
    if (cached_has_bits & 0x00000080u) {
      health_ = from.health_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      health_max_ = from.health_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      shield_ = from.shield_;
    }
    if (cached_has_bits & 0x00000400u) {
      energy_ = from.energy_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_selected_ = from.is_selected_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_on_screen_ = from.is_on_screen_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_blip_ = from.is_blip_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_powered_ = from.is_powered_;
    }
    if (cached_has_bits & 0x00008000u) {
      mineral_contents_ = from.mineral_contents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      vespene_contents_ = from.vespene_contents_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_flying_ = from.is_flying_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_burrowed_ = from.is_burrowed_;
    }
    if (cached_has_bits & 0x00080000u) {
      cargo_space_taken_ = from.cargo_space_taken_;
    }
    if (cached_has_bits & 0x00100000u) {
      add_on_tag_ = from.add_on_tag_;
    }
    if (cached_has_bits & 0x00200000u) {
      cargo_space_max_ = from.cargo_space_max_;
    }
    if (cached_has_bits & 0x00400000u) {
      assigned_harvesters_ = from.assigned_harvesters_;
    }
    if (cached_has_bits & 0x00800000u) {
      ideal_harvesters_ = from.ideal_harvesters_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      weapon_cooldown_ = from.weapon_cooldown_;
    }
    if (cached_has_bits & 0x02000000u) {
      detect_range_ = from.detect_range_;
    }
    if (cached_has_bits & 0x04000000u) {
      radar_range_ = from.radar_range_;
    }
    if (cached_has_bits & 0x08000000u) {
      engaged_target_tag_ = from.engaged_target_tag_;
    }
    if (cached_has_bits & 0x10000000u) {
      shield_max_ = from.shield_max_;
    }
    if (cached_has_bits & 0x20000000u) {
      energy_max_ = from.energy_max_;
    }
    if (cached_has_bits & 0x40000000u) {
      cloak_ = from.cloak_;
    }
    if (cached_has_bits & 0x80000000u) {
      display_type_ = from.display_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (from.has_alliance()) {
    set_alliance(from.alliance());
  }
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  CastToBase(&orders_)->InternalSwap(CastToBase(&other->orders_));
  CastToBase(&passengers_)->InternalSwap(CastToBase(&other->passengers_));
  buff_ids_.InternalSwap(&other->buff_ids_);
  swap(pos_, other->pos_);
  swap(tag_, other->tag_);
  swap(unit_type_, other->unit_type_);
  swap(owner_, other->owner_);
  swap(facing_, other->facing_);
  swap(radius_, other->radius_);
  swap(build_progress_, other->build_progress_);
  swap(health_, other->health_);
  swap(health_max_, other->health_max_);
  swap(shield_, other->shield_);
  swap(energy_, other->energy_);
  swap(is_selected_, other->is_selected_);
  swap(is_on_screen_, other->is_on_screen_);
  swap(is_blip_, other->is_blip_);
  swap(is_powered_, other->is_powered_);
  swap(mineral_contents_, other->mineral_contents_);
  swap(vespene_contents_, other->vespene_contents_);
  swap(is_flying_, other->is_flying_);
  swap(is_burrowed_, other->is_burrowed_);
  swap(cargo_space_taken_, other->cargo_space_taken_);
  swap(add_on_tag_, other->add_on_tag_);
  swap(cargo_space_max_, other->cargo_space_max_);
  swap(assigned_harvesters_, other->assigned_harvesters_);
  swap(ideal_harvesters_, other->ideal_harvesters_);
  swap(weapon_cooldown_, other->weapon_cooldown_);
  swap(detect_range_, other->detect_range_);
  swap(radar_range_, other->radar_range_);
  swap(engaged_target_tag_, other->engaged_target_tag_);
  swap(shield_max_, other->shield_max_);
  swap(energy_max_, other->energy_max_);
  swap(cloak_, other->cloak_);
  swap(display_type_, other->display_type_);
  swap(alliance_, other->alliance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapState::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_MapState_default_instance_._instance.get_mutable()->visibility_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_MapState_default_instance_._instance.get_mutable()->creep_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
}
void MapState::clear_visibility() {
  if (visibility_ != NULL) visibility_->Clear();
  clear_has_visibility();
}
void MapState::clear_creep() {
  if (creep_ != NULL) creep_->Clear();
  clear_has_creep();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapState::kVisibilityFieldNumber;
const int MapState::kCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapState::MapState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_MapState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.MapState)
}
MapState::MapState(const MapState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_visibility()) {
    visibility_ = new ::SCRAPIProtocol::ImageData(*from.visibility_);
  } else {
    visibility_ = NULL;
  }
  if (from.has_creep()) {
    creep_ = new ::SCRAPIProtocol::ImageData(*from.creep_);
  } else {
    creep_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.MapState)
}

void MapState::SharedCtor() {
  ::memset(&visibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creep_) -
      reinterpret_cast<char*>(&visibility_)) + sizeof(creep_));
}

MapState::~MapState() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.MapState)
  SharedDtor();
}

void MapState::SharedDtor() {
  if (this != internal_default_instance()) delete visibility_;
  if (this != internal_default_instance()) delete creep_;
}

void MapState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapState::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapState& MapState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_MapState.base);
  return *internal_default_instance();
}


void MapState::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.MapState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(visibility_ != NULL);
      visibility_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creep_ != NULL);
      creep_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.MapState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ImageData visibility = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData creep = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.MapState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.MapState)
  return false;
#undef DO_
}

void MapState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.MapState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData visibility = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_visibility(), output);
  }

  // optional .SCRAPIProtocol.ImageData creep = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_creep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.MapState)
}

::google::protobuf::uint8* MapState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.MapState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData visibility = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_visibility(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData creep = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_creep(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.MapState)
  return target;
}

size_t MapState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.MapState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.ImageData visibility = 1;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *visibility_);
    }

    // optional .SCRAPIProtocol.ImageData creep = 2;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *creep_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.MapState)
  GOOGLE_DCHECK_NE(&from, this);
  const MapState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.MapState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.MapState)
    MergeFrom(*source);
  }
}

void MapState::MergeFrom(const MapState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.MapState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_visibility()->::SCRAPIProtocol::ImageData::MergeFrom(from.visibility());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_creep()->::SCRAPIProtocol::ImageData::MergeFrom(from.creep());
    }
  }
}

void MapState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.MapState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapState::CopyFrom(const MapState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.MapState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapState::IsInitialized() const {
  return true;
}

void MapState::Swap(MapState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapState::InternalSwap(MapState* other) {
  using std::swap;
  swap(visibility_, other->visibility_);
  swap(creep_, other->creep_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapState::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Event::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kDeadUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      dead_units_(from.dead_units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Event)
}

void Event::SharedCtor() {
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Event)
  SharedDtor();
}

void Event::SharedDtor() {
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dead_units_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 dead_units = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_dead_units())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dead_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dead_units = 1;
  for (int i = 0, n = this->dead_units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->dead_units(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 dead_units = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->dead_units_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 dead_units = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->dead_units_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->dead_units_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dead_units_.MergeFrom(from.dead_units_);
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  dead_units_.InternalSwap(&other->dead_units_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Effect::InitAsDefaultInstance() {
}
void Effect::clear_pos() {
  pos_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Effect::kEffectIdFieldNumber;
const int Effect::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Effect::Effect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_Effect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.Effect)
}
Effect::Effect(const Effect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pos_(from.pos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  effect_id_ = from.effect_id_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.Effect)
}

void Effect::SharedCtor() {
  effect_id_ = 0u;
}

Effect::~Effect() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.Effect)
  SharedDtor();
}

void Effect::SharedDtor() {
}

void Effect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Effect::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Effect& Effect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_Effect.base);
  return *internal_default_instance();
}


void Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.Effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.Clear();
  effect_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.Effect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_effect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.Point2D pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.Effect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.Effect)
  return false;
#undef DO_
}

void Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.Effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 effect_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // repeated .SCRAPIProtocol.Point2D pos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.Effect)
}

::google::protobuf::uint8* Effect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.Effect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 effect_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // repeated .SCRAPIProtocol.Point2D pos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pos(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.Effect)
  return target;
}

size_t Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.Effect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.Point2D pos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pos(static_cast<int>(i)));
    }
  }

  // optional uint32 effect_id = 1;
  if (has_effect_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Effect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.Effect)
  GOOGLE_DCHECK_NE(&from, this);
  const Effect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Effect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.Effect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.Effect)
    MergeFrom(*source);
  }
}

void Effect::MergeFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.Effect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pos_.MergeFrom(from.pos_);
  if (from.has_effect_id()) {
    set_effect_id(from.effect_id());
  }
}

void Effect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Effect::CopyFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Effect::IsInitialized() const {
  return true;
}

void Effect::Swap(Effect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Effect::InternalSwap(Effect* other) {
  using std::swap;
  CastToBase(&pos_)->InternalSwap(CastToBase(&other->pos_));
  swap(effect_id_, other->effect_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Effect::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionRaw::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionRaw_default_instance_.unit_command_ = const_cast< ::SCRAPIProtocol::ActionRawUnitCommand*>(
      ::SCRAPIProtocol::ActionRawUnitCommand::internal_default_instance());
  ::SCRAPIProtocol::_ActionRaw_default_instance_.camera_move_ = const_cast< ::SCRAPIProtocol::ActionRawCameraMove*>(
      ::SCRAPIProtocol::ActionRawCameraMove::internal_default_instance());
  ::SCRAPIProtocol::_ActionRaw_default_instance_.toggle_autocast_ = const_cast< ::SCRAPIProtocol::ActionRawToggleAutocast*>(
      ::SCRAPIProtocol::ActionRawToggleAutocast::internal_default_instance());
}
void ActionRaw::set_allocated_unit_command(::SCRAPIProtocol::ActionRawUnitCommand* unit_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (unit_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit_command, submessage_arena);
    }
    set_has_unit_command();
    action_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionRaw.unit_command)
}
void ActionRaw::set_allocated_camera_move(::SCRAPIProtocol::ActionRawCameraMove* camera_move) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (camera_move) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_move = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_move, submessage_arena);
    }
    set_has_camera_move();
    action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionRaw.camera_move)
}
void ActionRaw::set_allocated_toggle_autocast(::SCRAPIProtocol::ActionRawToggleAutocast* toggle_autocast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (toggle_autocast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      toggle_autocast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toggle_autocast, submessage_arena);
    }
    set_has_toggle_autocast();
    action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionRaw.toggle_autocast)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRaw::kUnitCommandFieldNumber;
const int ActionRaw::kCameraMoveFieldNumber;
const int ActionRaw::kToggleAutocastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRaw::ActionRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_ActionRaw.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionRaw)
}
ActionRaw::ActionRaw(const ActionRaw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SCRAPIProtocol::ActionRawUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SCRAPIProtocol::ActionRawCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SCRAPIProtocol::ActionRawToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionRaw)
}

void ActionRaw::SharedCtor() {
  clear_has_action();
}

ActionRaw::~ActionRaw() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionRaw)
  SharedDtor();
}

void ActionRaw::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void ActionRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionRaw::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionRaw& ActionRaw::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_ActionRaw.base);
  return *internal_default_instance();
}


void ActionRaw::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ActionRaw)
  switch (action_case()) {
    case kUnitCommand: {
      delete action_.unit_command_;
      break;
    }
    case kCameraMove: {
      delete action_.camera_move_;
      break;
    }
    case kToggleAutocast: {
      delete action_.toggle_autocast_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionRaw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionRawUnitCommand unit_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionRawCameraMove camera_move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_toggle_autocast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionRaw)
  return false;
#undef DO_
}

void ActionRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kUnitCommand:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_unit_command(), output);
      break;
    case kCameraMove:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_camera_move(), output);
      break;
    case kToggleAutocast:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_toggle_autocast(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionRaw)
}

::google::protobuf::uint8* ActionRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionRaw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kUnitCommand:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_unit_command(), deterministic, target);
      break;
    case kCameraMove:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_camera_move(), deterministic, target);
      break;
    case kToggleAutocast:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_toggle_autocast(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionRaw)
  return target;
}

size_t ActionRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionRaw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (action_case()) {
    // optional .SCRAPIProtocol.ActionRawUnitCommand unit_command = 1;
    case kUnitCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.unit_command_);
      break;
    }
    // optional .SCRAPIProtocol.ActionRawCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.camera_move_);
      break;
    }
    // optional .SCRAPIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
    case kToggleAutocast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.toggle_autocast_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionRaw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionRaw)
    MergeFrom(*source);
  }
}

void ActionRaw::MergeFrom(const ActionRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SCRAPIProtocol::ActionRawUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SCRAPIProtocol::ActionRawCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SCRAPIProtocol::ActionRawToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRaw::CopyFrom(const ActionRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRaw::IsInitialized() const {
  return true;
}

void ActionRaw::Swap(ActionRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRaw::InternalSwap(ActionRaw* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionRaw::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionRawUnitCommand::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionRawUnitCommand_default_instance_.target_world_space_pos_ = const_cast< ::SCRAPIProtocol::Point2D*>(
      ::SCRAPIProtocol::Point2D::internal_default_instance());
  ::SCRAPIProtocol::_ActionRawUnitCommand_default_instance_.target_unit_tag_ = GOOGLE_ULONGLONG(0);
}
void ActionRawUnitCommand::set_allocated_target_world_space_pos(::SCRAPIProtocol::Point2D* target_world_space_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (target_world_space_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_world_space_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_world_space_pos, submessage_arena);
    }
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = target_world_space_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionRawUnitCommand.target_world_space_pos)
}
void ActionRawUnitCommand::clear_target_world_space_pos() {
  if (has_target_world_space_pos()) {
    delete target_.target_world_space_pos_;
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawUnitCommand::kAbilityIdFieldNumber;
const int ActionRawUnitCommand::kTargetWorldSpacePosFieldNumber;
const int ActionRawUnitCommand::kTargetUnitTagFieldNumber;
const int ActionRawUnitCommand::kUnitTagsFieldNumber;
const int ActionRawUnitCommand::kQueueCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawUnitCommand::ActionRawUnitCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_ActionRawUnitCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionRawUnitCommand)
}
ActionRawUnitCommand::ActionRawUnitCommand(const ActionRawUnitCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      unit_tags_(from.unit_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_command_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  clear_has_target();
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionRawUnitCommand)
}

void ActionRawUnitCommand::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_command_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  clear_has_target();
}

ActionRawUnitCommand::~ActionRawUnitCommand() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionRawUnitCommand)
  SharedDtor();
}

void ActionRawUnitCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
}

void ActionRawUnitCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionRawUnitCommand::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionRawUnitCommand& ActionRawUnitCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_ActionRawUnitCommand.base);
  return *internal_default_instance();
}


void ActionRawUnitCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ActionRawUnitCommand)
  switch (target_case()) {
    case kTargetWorldSpacePos: {
      delete target_.target_world_space_pos_;
      break;
    }
    case kTargetUnitTag: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ActionRawUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionRawUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_command_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  }
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionRawUnitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionRawUnitCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.Point2D target_world_space_pos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_world_space_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 target_unit_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_.target_unit_tag_)));
          set_has_target_unit_tag();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 unit_tags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_unit_tags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unit_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool queue_command = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_queue_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionRawUnitCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionRawUnitCommand)
  return false;
#undef DO_
}

void ActionRawUnitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionRawUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  switch (target_case()) {
    case kTargetWorldSpacePos:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_target_world_space_pos(), output);
      break;
    case kTargetUnitTag:
      ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_unit_tag(), output);
      break;
    default: ;
  }
  // repeated uint64 unit_tags = 4;
  for (int i = 0, n = this->unit_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->unit_tags(i), output);
  }

  // optional bool queue_command = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->queue_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionRawUnitCommand)
}

::google::protobuf::uint8* ActionRawUnitCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionRawUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  switch (target_case()) {
    case kTargetWorldSpacePos:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_target_world_space_pos(), deterministic, target);
      break;
    case kTargetUnitTag:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_unit_tag(), target);
      break;
    default: ;
  }
  // repeated uint64 unit_tags = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->unit_tags_, target);

  // optional bool queue_command = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->queue_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionRawUnitCommand)
  return target;
}

size_t ActionRawUnitCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionRawUnitCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 unit_tags = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->unit_tags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unit_tags_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional bool queue_command = 5;
    if (has_queue_command()) {
      total_size += 1 + 1;
    }

  }
  switch (target_case()) {
    // optional .SCRAPIProtocol.Point2D target_world_space_pos = 2;
    case kTargetWorldSpacePos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.target_world_space_pos_);
      break;
    }
    // optional uint64 target_unit_tag = 3;
    case kTargetUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionRawUnitCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionRawUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionRawUnitCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawUnitCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionRawUnitCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionRawUnitCommand)
    MergeFrom(*source);
  }
}

void ActionRawUnitCommand::MergeFrom(const ActionRawUnitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionRawUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_tags_.MergeFrom(from.unit_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      queue_command_ = from.queue_command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SCRAPIProtocol::Point2D::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void ActionRawUnitCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionRawUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawUnitCommand::CopyFrom(const ActionRawUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionRawUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawUnitCommand::IsInitialized() const {
  return true;
}

void ActionRawUnitCommand::Swap(ActionRawUnitCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawUnitCommand::InternalSwap(ActionRawUnitCommand* other) {
  using std::swap;
  unit_tags_.InternalSwap(&other->unit_tags_);
  swap(ability_id_, other->ability_id_);
  swap(queue_command_, other->queue_command_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionRawUnitCommand::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionRawCameraMove::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionRawCameraMove_default_instance_._instance.get_mutable()->center_world_space_ = const_cast< ::SCRAPIProtocol::Point*>(
      ::SCRAPIProtocol::Point::internal_default_instance());
}
void ActionRawCameraMove::clear_center_world_space() {
  if (center_world_space_ != NULL) center_world_space_->Clear();
  clear_has_center_world_space();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawCameraMove::kCenterWorldSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawCameraMove::ActionRawCameraMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_ActionRawCameraMove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionRawCameraMove)
}
ActionRawCameraMove::ActionRawCameraMove(const ActionRawCameraMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center_world_space()) {
    center_world_space_ = new ::SCRAPIProtocol::Point(*from.center_world_space_);
  } else {
    center_world_space_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionRawCameraMove)
}

void ActionRawCameraMove::SharedCtor() {
  center_world_space_ = NULL;
}

ActionRawCameraMove::~ActionRawCameraMove() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionRawCameraMove)
  SharedDtor();
}

void ActionRawCameraMove::SharedDtor() {
  if (this != internal_default_instance()) delete center_world_space_;
}

void ActionRawCameraMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionRawCameraMove::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionRawCameraMove& ActionRawCameraMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_ActionRawCameraMove.base);
  return *internal_default_instance();
}


void ActionRawCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionRawCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_world_space_ != NULL);
    center_world_space_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionRawCameraMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionRawCameraMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.Point center_world_space = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_world_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionRawCameraMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionRawCameraMove)
  return false;
#undef DO_
}

void ActionRawCameraMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionRawCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point center_world_space = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center_world_space(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionRawCameraMove)
}

::google::protobuf::uint8* ActionRawCameraMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionRawCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.Point center_world_space = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center_world_space(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionRawCameraMove)
  return target;
}

size_t ActionRawCameraMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionRawCameraMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.Point center_world_space = 1;
  if (has_center_world_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_world_space_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionRawCameraMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionRawCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionRawCameraMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawCameraMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionRawCameraMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionRawCameraMove)
    MergeFrom(*source);
  }
}

void ActionRawCameraMove::MergeFrom(const ActionRawCameraMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionRawCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_world_space()) {
    mutable_center_world_space()->::SCRAPIProtocol::Point::MergeFrom(from.center_world_space());
  }
}

void ActionRawCameraMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionRawCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawCameraMove::CopyFrom(const ActionRawCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionRawCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawCameraMove::IsInitialized() const {
  return true;
}

void ActionRawCameraMove::Swap(ActionRawCameraMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawCameraMove::InternalSwap(ActionRawCameraMove* other) {
  using std::swap;
  swap(center_world_space_, other->center_world_space_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionRawCameraMove::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionRawToggleAutocast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawToggleAutocast::kAbilityIdFieldNumber;
const int ActionRawToggleAutocast::kUnitTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawToggleAutocast::ActionRawToggleAutocast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raw_2eproto::scc_info_ActionRawToggleAutocast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionRawToggleAutocast)
}
ActionRawToggleAutocast::ActionRawToggleAutocast(const ActionRawToggleAutocast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      unit_tags_(from.unit_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ability_id_ = from.ability_id_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionRawToggleAutocast)
}

void ActionRawToggleAutocast::SharedCtor() {
  ability_id_ = 0;
}

ActionRawToggleAutocast::~ActionRawToggleAutocast() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionRawToggleAutocast)
  SharedDtor();
}

void ActionRawToggleAutocast::SharedDtor() {
}

void ActionRawToggleAutocast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionRawToggleAutocast::descriptor() {
  ::protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionRawToggleAutocast& ActionRawToggleAutocast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raw_2eproto::scc_info_ActionRawToggleAutocast.base);
  return *internal_default_instance();
}


void ActionRawToggleAutocast::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionRawToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_tags_.Clear();
  ability_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionRawToggleAutocast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionRawToggleAutocast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 unit_tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_unit_tags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unit_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionRawToggleAutocast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionRawToggleAutocast)
  return false;
#undef DO_
}

void ActionRawToggleAutocast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionRawToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // repeated uint64 unit_tags = 2;
  for (int i = 0, n = this->unit_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->unit_tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionRawToggleAutocast)
}

::google::protobuf::uint8* ActionRawToggleAutocast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionRawToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // repeated uint64 unit_tags = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->unit_tags_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionRawToggleAutocast)
  return target;
}

size_t ActionRawToggleAutocast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionRawToggleAutocast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 unit_tags = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->unit_tags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unit_tags_size());
    total_size += data_size;
  }

  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ability_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionRawToggleAutocast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionRawToggleAutocast)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionRawToggleAutocast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawToggleAutocast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionRawToggleAutocast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionRawToggleAutocast)
    MergeFrom(*source);
  }
}

void ActionRawToggleAutocast::MergeFrom(const ActionRawToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionRawToggleAutocast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_tags_.MergeFrom(from.unit_tags_);
  if (from.has_ability_id()) {
    set_ability_id(from.ability_id());
  }
}

void ActionRawToggleAutocast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionRawToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawToggleAutocast::CopyFrom(const ActionRawToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionRawToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawToggleAutocast::IsInitialized() const {
  return true;
}

void ActionRawToggleAutocast::Swap(ActionRawToggleAutocast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawToggleAutocast::InternalSwap(ActionRawToggleAutocast* other) {
  using std::swap;
  unit_tags_.InternalSwap(&other->unit_tags_);
  swap(ability_id_, other->ability_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionRawToggleAutocast::GetMetadata() const {
  protobuf_raw_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raw_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::StartRaw* Arena::CreateMaybeMessage< ::SCRAPIProtocol::StartRaw >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::StartRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ObservationRaw* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ObservationRaw >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ObservationRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::PowerSource* Arena::CreateMaybeMessage< ::SCRAPIProtocol::PowerSource >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::PowerSource >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::PlayerRaw* Arena::CreateMaybeMessage< ::SCRAPIProtocol::PlayerRaw >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::PlayerRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::UnitOrder* Arena::CreateMaybeMessage< ::SCRAPIProtocol::UnitOrder >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::UnitOrder >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::PassengerUnit* Arena::CreateMaybeMessage< ::SCRAPIProtocol::PassengerUnit >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::PassengerUnit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Unit* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Unit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::MapState* Arena::CreateMaybeMessage< ::SCRAPIProtocol::MapState >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::MapState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Event* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Event >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::Effect* Arena::CreateMaybeMessage< ::SCRAPIProtocol::Effect >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::Effect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionRaw* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionRaw >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionRaw >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionRawUnitCommand* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionRawUnitCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionRawUnitCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionRawCameraMove* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionRawCameraMove >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionRawCameraMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionRawToggleAutocast* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionRawToggleAutocast >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionRawToggleAutocast >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
