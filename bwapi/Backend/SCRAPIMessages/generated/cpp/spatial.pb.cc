// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spatial.proto

#include "spatial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointI;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImageData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RectangleI;
}  // namespace protobuf_common_2eproto
namespace protobuf_spatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialCameraMove;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitSelectionPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitSelectionRect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FeatureLayers;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_spatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FeatureLayersMinimap;
}  // namespace protobuf_spatial_2eproto
namespace SCRAPIProtocol {
class ObservationFeatureLayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservationFeatureLayer>
      _instance;
} _ObservationFeatureLayer_default_instance_;
class FeatureLayersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeatureLayers>
      _instance;
} _FeatureLayers_default_instance_;
class FeatureLayersMinimapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FeatureLayersMinimap>
      _instance;
} _FeatureLayersMinimap_default_instance_;
class ObservationRenderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservationRender>
      _instance;
} _ObservationRender_default_instance_;
class ActionSpatialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSpatial>
      _instance;
  const ::SCRAPIProtocol::ActionSpatialUnitCommand* unit_command_;
  const ::SCRAPIProtocol::ActionSpatialCameraMove* camera_move_;
  const ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint* unit_selection_point_;
  const ::SCRAPIProtocol::ActionSpatialUnitSelectionRect* unit_selection_rect_;
} _ActionSpatial_default_instance_;
class ActionSpatialUnitCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSpatialUnitCommand>
      _instance;
  const ::SCRAPIProtocol::PointI* target_screen_coord_;
  const ::SCRAPIProtocol::PointI* target_minimap_coord_;
} _ActionSpatialUnitCommand_default_instance_;
class ActionSpatialCameraMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSpatialCameraMove>
      _instance;
} _ActionSpatialCameraMove_default_instance_;
class ActionSpatialUnitSelectionPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSpatialUnitSelectionPoint>
      _instance;
} _ActionSpatialUnitSelectionPoint_default_instance_;
class ActionSpatialUnitSelectionRectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSpatialUnitSelectionRect>
      _instance;
} _ActionSpatialUnitSelectionRect_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_spatial_2eproto {
static void InitDefaultsObservationFeatureLayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ObservationFeatureLayer_default_instance_;
    new (ptr) ::SCRAPIProtocol::ObservationFeatureLayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ObservationFeatureLayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ObservationFeatureLayer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObservationFeatureLayer}, {
      &protobuf_spatial_2eproto::scc_info_FeatureLayers.base,
      &protobuf_spatial_2eproto::scc_info_FeatureLayersMinimap.base,}};

static void InitDefaultsFeatureLayers() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_FeatureLayers_default_instance_;
    new (ptr) ::SCRAPIProtocol::FeatureLayers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::FeatureLayers::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FeatureLayers =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFeatureLayers}, {
      &protobuf_common_2eproto::scc_info_ImageData.base,}};

static void InitDefaultsFeatureLayersMinimap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_;
    new (ptr) ::SCRAPIProtocol::FeatureLayersMinimap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::FeatureLayersMinimap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FeatureLayersMinimap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFeatureLayersMinimap}, {
      &protobuf_common_2eproto::scc_info_ImageData.base,}};

static void InitDefaultsObservationRender() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ObservationRender_default_instance_;
    new (ptr) ::SCRAPIProtocol::ObservationRender();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ObservationRender::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObservationRender =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObservationRender}, {
      &protobuf_common_2eproto::scc_info_ImageData.base,}};

static void InitDefaultsActionSpatial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSpatial_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSpatial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSpatial::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ActionSpatial =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsActionSpatial}, {
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitCommand.base,
      &protobuf_spatial_2eproto::scc_info_ActionSpatialCameraMove.base,
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionPoint.base,
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionRect.base,}};

static void InitDefaultsActionSpatialUnitCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSpatialUnitCommand_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSpatialUnitCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSpatialUnitCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionSpatialUnitCommand}, {
      &protobuf_common_2eproto::scc_info_PointI.base,}};

static void InitDefaultsActionSpatialCameraMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSpatialCameraMove_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSpatialCameraMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSpatialCameraMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialCameraMove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionSpatialCameraMove}, {
      &protobuf_common_2eproto::scc_info_PointI.base,}};

static void InitDefaultsActionSpatialUnitSelectionPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSpatialUnitSelectionPoint_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitSelectionPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionSpatialUnitSelectionPoint}, {
      &protobuf_common_2eproto::scc_info_PointI.base,}};

static void InitDefaultsActionSpatialUnitSelectionRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSpatialUnitSelectionRect_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSpatialUnitSelectionRect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSpatialUnitSelectionRect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionSpatialUnitSelectionRect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionSpatialUnitSelectionRect}, {
      &protobuf_common_2eproto::scc_info_RectangleI.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObservationFeatureLayer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeatureLayers.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FeatureLayersMinimap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObservationRender.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSpatial.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSpatialUnitCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSpatialCameraMove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSpatialUnitSelectionPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSpatialUnitSelectionRect.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationFeatureLayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationFeatureLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationFeatureLayer, renders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationFeatureLayer, minimap_renders_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, height_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, visibility_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, creep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, selected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_hit_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_hit_points_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_energy_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_shields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_shields_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, player_relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_density_aa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, unit_density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayers, effects_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  14,
  9,
  15,
  10,
  11,
  12,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, height_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, visibility_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, creep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, camera_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, player_relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, selected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::FeatureLayersMinimap, unit_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRender, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRender, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationRender, minimap_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatial, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatial, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatial, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SCRAPIProtocol::ActionSpatialDefaultTypeInternal, unit_command_),
  offsetof(::SCRAPIProtocol::ActionSpatialDefaultTypeInternal, camera_move_),
  offsetof(::SCRAPIProtocol::ActionSpatialDefaultTypeInternal, unit_selection_point_),
  offsetof(::SCRAPIProtocol::ActionSpatialDefaultTypeInternal, unit_selection_rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatial, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, ability_id_),
  offsetof(::SCRAPIProtocol::ActionSpatialUnitCommandDefaultTypeInternal, target_screen_coord_),
  offsetof(::SCRAPIProtocol::ActionSpatialUnitCommandDefaultTypeInternal, target_minimap_coord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, queue_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitCommand, target_),
  0,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialCameraMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialCameraMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialCameraMove, center_minimap_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint, selection_screen_coord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionRect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionRect, selection_screen_coord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSpatialUnitSelectionRect, selection_add_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SCRAPIProtocol::ObservationFeatureLayer)},
  { 9, 31, sizeof(::SCRAPIProtocol::FeatureLayers)},
  { 48, 61, sizeof(::SCRAPIProtocol::FeatureLayersMinimap)},
  { 69, 76, sizeof(::SCRAPIProtocol::ObservationRender)},
  { 78, 88, sizeof(::SCRAPIProtocol::ActionSpatial)},
  { 92, 102, sizeof(::SCRAPIProtocol::ActionSpatialUnitCommand)},
  { 106, 112, sizeof(::SCRAPIProtocol::ActionSpatialCameraMove)},
  { 113, 120, sizeof(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint)},
  { 122, 129, sizeof(::SCRAPIProtocol::ActionSpatialUnitSelectionRect)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ObservationFeatureLayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_FeatureLayers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ObservationRender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSpatial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSpatialUnitCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSpatialCameraMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSpatialUnitSelectionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSpatialUnitSelectionRect_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "spatial.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rspatial.proto\022\016SCRAPIProtocol\032\014common."
      "proto\"\210\001\n\027ObservationFeatureLayer\022.\n\007ren"
      "ders\030\001 \001(\0132\035.SCRAPIProtocol.FeatureLayer"
      "s\022=\n\017minimap_renders\030\002 \001(\0132$.SCRAPIProto"
      "col.FeatureLayersMinimap\"\317\006\n\rFeatureLaye"
      "rs\022-\n\nheight_map\030\001 \001(\0132\031.SCRAPIProtocol."
      "ImageData\0221\n\016visibility_map\030\002 \001(\0132\031.SCRA"
      "PIProtocol.ImageData\022(\n\005creep\030\003 \001(\0132\031.SC"
      "RAPIProtocol.ImageData\022(\n\005power\030\004 \001(\0132\031."
      "SCRAPIProtocol.ImageData\022,\n\tplayer_id\030\005 "
      "\001(\0132\031.SCRAPIProtocol.ImageData\022,\n\tunit_t"
      "ype\030\006 \001(\0132\031.SCRAPIProtocol.ImageData\022+\n\010"
      "selected\030\007 \001(\0132\031.SCRAPIProtocol.ImageDat"
      "a\0222\n\017unit_hit_points\030\010 \001(\0132\031.SCRAPIProto"
      "col.ImageData\0228\n\025unit_hit_points_ratio\030\021"
      " \001(\0132\031.SCRAPIProtocol.ImageData\022.\n\013unit_"
      "energy\030\t \001(\0132\031.SCRAPIProtocol.ImageData\022"
      "4\n\021unit_energy_ratio\030\022 \001(\0132\031.SCRAPIProto"
      "col.ImageData\022/\n\014unit_shields\030\n \001(\0132\031.SC"
      "RAPIProtocol.ImageData\0225\n\022unit_shields_r"
      "atio\030\023 \001(\0132\031.SCRAPIProtocol.ImageData\0222\n"
      "\017player_relative\030\013 \001(\0132\031.SCRAPIProtocol."
      "ImageData\0222\n\017unit_density_aa\030\016 \001(\0132\031.SCR"
      "APIProtocol.ImageData\022/\n\014unit_density\030\017 "
      "\001(\0132\031.SCRAPIProtocol.ImageData\022*\n\007effect"
      "s\030\024 \001(\0132\031.SCRAPIProtocol.ImageData\"\212\003\n\024F"
      "eatureLayersMinimap\022-\n\nheight_map\030\001 \001(\0132"
      "\031.SCRAPIProtocol.ImageData\0221\n\016visibility"
      "_map\030\002 \001(\0132\031.SCRAPIProtocol.ImageData\022(\n"
      "\005creep\030\003 \001(\0132\031.SCRAPIProtocol.ImageData\022"
      ")\n\006camera\030\004 \001(\0132\031.SCRAPIProtocol.ImageDa"
      "ta\022,\n\tplayer_id\030\005 \001(\0132\031.SCRAPIProtocol.I"
      "mageData\0222\n\017player_relative\030\006 \001(\0132\031.SCRA"
      "PIProtocol.ImageData\022+\n\010selected\030\007 \001(\0132\031"
      ".SCRAPIProtocol.ImageData\022,\n\tunit_type\030\010"
      " \001(\0132\031.SCRAPIProtocol.ImageData\"g\n\021Obser"
      "vationRender\022&\n\003map\030\001 \001(\0132\031.SCRAPIProtoc"
      "ol.ImageData\022*\n\007minimap\030\002 \001(\0132\031.SCRAPIPr"
      "otocol.ImageData\"\273\002\n\rActionSpatial\022@\n\014un"
      "it_command\030\001 \001(\0132(.SCRAPIProtocol.Action"
      "SpatialUnitCommandH\000\022>\n\013camera_move\030\002 \001("
      "\0132\'.SCRAPIProtocol.ActionSpatialCameraMo"
      "veH\000\022O\n\024unit_selection_point\030\003 \001(\0132/.SCR"
      "APIProtocol.ActionSpatialUnitSelectionPo"
      "intH\000\022M\n\023unit_selection_rect\030\004 \001(\0132..SCR"
      "APIProtocol.ActionSpatialUnitSelectionRe"
      "ctH\000B\010\n\006action\"\276\001\n\030ActionSpatialUnitComm"
      "and\022\022\n\nability_id\030\001 \001(\005\0225\n\023target_screen"
      "_coord\030\002 \001(\0132\026.SCRAPIProtocol.PointIH\000\0226"
      "\n\024target_minimap_coord\030\003 \001(\0132\026.SCRAPIPro"
      "tocol.PointIH\000\022\025\n\rqueue_command\030\004 \001(\010B\010\n"
      "\006target\"I\n\027ActionSpatialCameraMove\022.\n\016ce"
      "nter_minimap\030\001 \001(\0132\026.SCRAPIProtocol.Poin"
      "tI\"\332\001\n\037ActionSpatialUnitSelectionPoint\0226"
      "\n\026selection_screen_coord\030\001 \001(\0132\026.SCRAPIP"
      "rotocol.PointI\022B\n\004type\030\002 \001(\01624.SCRAPIPro"
      "tocol.ActionSpatialUnitSelectionPoint.Ty"
      "pe\";\n\004Type\022\n\n\006Select\020\001\022\n\n\006Toggle\020\002\022\013\n\007Al"
      "lType\020\003\022\016\n\nAddAllType\020\004\"s\n\036ActionSpatial"
      "UnitSelectionRect\022:\n\026selection_screen_co"
      "ord\030\001 \003(\0132\032.SCRAPIProtocol.RectangleI\022\025\n"
      "\rselection_add\030\002 \001(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2460);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spatial.proto", &protobuf_RegisterTypes);
  ::protobuf_common_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_spatial_2eproto
namespace SCRAPIProtocol {
const ::google::protobuf::EnumDescriptor* ActionSpatialUnitSelectionPoint_Type_descriptor() {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_spatial_2eproto::file_level_enum_descriptors[0];
}
bool ActionSpatialUnitSelectionPoint_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Select;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Toggle;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AllType;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AddAllType;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MIN;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MAX;
const int ActionSpatialUnitSelectionPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ObservationFeatureLayer::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ObservationFeatureLayer_default_instance_._instance.get_mutable()->renders_ = const_cast< ::SCRAPIProtocol::FeatureLayers*>(
      ::SCRAPIProtocol::FeatureLayers::internal_default_instance());
  ::SCRAPIProtocol::_ObservationFeatureLayer_default_instance_._instance.get_mutable()->minimap_renders_ = const_cast< ::SCRAPIProtocol::FeatureLayersMinimap*>(
      ::SCRAPIProtocol::FeatureLayersMinimap::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationFeatureLayer::kRendersFieldNumber;
const int ObservationFeatureLayer::kMinimapRendersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationFeatureLayer::ObservationFeatureLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ObservationFeatureLayer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ObservationFeatureLayer)
}
ObservationFeatureLayer::ObservationFeatureLayer(const ObservationFeatureLayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_renders()) {
    renders_ = new ::SCRAPIProtocol::FeatureLayers(*from.renders_);
  } else {
    renders_ = NULL;
  }
  if (from.has_minimap_renders()) {
    minimap_renders_ = new ::SCRAPIProtocol::FeatureLayersMinimap(*from.minimap_renders_);
  } else {
    minimap_renders_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ObservationFeatureLayer)
}

void ObservationFeatureLayer::SharedCtor() {
  ::memset(&renders_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimap_renders_) -
      reinterpret_cast<char*>(&renders_)) + sizeof(minimap_renders_));
}

ObservationFeatureLayer::~ObservationFeatureLayer() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ObservationFeatureLayer)
  SharedDtor();
}

void ObservationFeatureLayer::SharedDtor() {
  if (this != internal_default_instance()) delete renders_;
  if (this != internal_default_instance()) delete minimap_renders_;
}

void ObservationFeatureLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObservationFeatureLayer::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObservationFeatureLayer& ObservationFeatureLayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ObservationFeatureLayer.base);
  return *internal_default_instance();
}


void ObservationFeatureLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ObservationFeatureLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(renders_ != NULL);
      renders_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minimap_renders_ != NULL);
      minimap_renders_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObservationFeatureLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ObservationFeatureLayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.FeatureLayers renders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_renders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.FeatureLayersMinimap minimap_renders = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minimap_renders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ObservationFeatureLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ObservationFeatureLayer)
  return false;
#undef DO_
}

void ObservationFeatureLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ObservationFeatureLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.FeatureLayers renders = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_renders(), output);
  }

  // optional .SCRAPIProtocol.FeatureLayersMinimap minimap_renders = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_minimap_renders(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ObservationFeatureLayer)
}

::google::protobuf::uint8* ObservationFeatureLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ObservationFeatureLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.FeatureLayers renders = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_renders(), deterministic, target);
  }

  // optional .SCRAPIProtocol.FeatureLayersMinimap minimap_renders = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_minimap_renders(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ObservationFeatureLayer)
  return target;
}

size_t ObservationFeatureLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ObservationFeatureLayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.FeatureLayers renders = 1;
    if (has_renders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *renders_);
    }

    // optional .SCRAPIProtocol.FeatureLayersMinimap minimap_renders = 2;
    if (has_minimap_renders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *minimap_renders_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationFeatureLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ObservationFeatureLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationFeatureLayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationFeatureLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ObservationFeatureLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ObservationFeatureLayer)
    MergeFrom(*source);
  }
}

void ObservationFeatureLayer::MergeFrom(const ObservationFeatureLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ObservationFeatureLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_renders()->::SCRAPIProtocol::FeatureLayers::MergeFrom(from.renders());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_minimap_renders()->::SCRAPIProtocol::FeatureLayersMinimap::MergeFrom(from.minimap_renders());
    }
  }
}

void ObservationFeatureLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ObservationFeatureLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationFeatureLayer::CopyFrom(const ObservationFeatureLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ObservationFeatureLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationFeatureLayer::IsInitialized() const {
  return true;
}

void ObservationFeatureLayer::Swap(ObservationFeatureLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationFeatureLayer::InternalSwap(ObservationFeatureLayer* other) {
  using std::swap;
  swap(renders_, other->renders_);
  swap(minimap_renders_, other->minimap_renders_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObservationFeatureLayer::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FeatureLayers::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->height_map_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->visibility_map_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->creep_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->power_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_type_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->selected_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_hit_points_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_hit_points_ratio_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_energy_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_energy_ratio_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_shields_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_shields_ratio_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->player_relative_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_density_aa_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->unit_density_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayers_default_instance_._instance.get_mutable()->effects_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
}
void FeatureLayers::clear_height_map() {
  if (height_map_ != NULL) height_map_->Clear();
  clear_has_height_map();
}
void FeatureLayers::clear_visibility_map() {
  if (visibility_map_ != NULL) visibility_map_->Clear();
  clear_has_visibility_map();
}
void FeatureLayers::clear_creep() {
  if (creep_ != NULL) creep_->Clear();
  clear_has_creep();
}
void FeatureLayers::clear_power() {
  if (power_ != NULL) power_->Clear();
  clear_has_power();
}
void FeatureLayers::clear_player_id() {
  if (player_id_ != NULL) player_id_->Clear();
  clear_has_player_id();
}
void FeatureLayers::clear_unit_type() {
  if (unit_type_ != NULL) unit_type_->Clear();
  clear_has_unit_type();
}
void FeatureLayers::clear_selected() {
  if (selected_ != NULL) selected_->Clear();
  clear_has_selected();
}
void FeatureLayers::clear_unit_hit_points() {
  if (unit_hit_points_ != NULL) unit_hit_points_->Clear();
  clear_has_unit_hit_points();
}
void FeatureLayers::clear_unit_hit_points_ratio() {
  if (unit_hit_points_ratio_ != NULL) unit_hit_points_ratio_->Clear();
  clear_has_unit_hit_points_ratio();
}
void FeatureLayers::clear_unit_energy() {
  if (unit_energy_ != NULL) unit_energy_->Clear();
  clear_has_unit_energy();
}
void FeatureLayers::clear_unit_energy_ratio() {
  if (unit_energy_ratio_ != NULL) unit_energy_ratio_->Clear();
  clear_has_unit_energy_ratio();
}
void FeatureLayers::clear_unit_shields() {
  if (unit_shields_ != NULL) unit_shields_->Clear();
  clear_has_unit_shields();
}
void FeatureLayers::clear_unit_shields_ratio() {
  if (unit_shields_ratio_ != NULL) unit_shields_ratio_->Clear();
  clear_has_unit_shields_ratio();
}
void FeatureLayers::clear_player_relative() {
  if (player_relative_ != NULL) player_relative_->Clear();
  clear_has_player_relative();
}
void FeatureLayers::clear_unit_density_aa() {
  if (unit_density_aa_ != NULL) unit_density_aa_->Clear();
  clear_has_unit_density_aa();
}
void FeatureLayers::clear_unit_density() {
  if (unit_density_ != NULL) unit_density_->Clear();
  clear_has_unit_density();
}
void FeatureLayers::clear_effects() {
  if (effects_ != NULL) effects_->Clear();
  clear_has_effects();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureLayers::kHeightMapFieldNumber;
const int FeatureLayers::kVisibilityMapFieldNumber;
const int FeatureLayers::kCreepFieldNumber;
const int FeatureLayers::kPowerFieldNumber;
const int FeatureLayers::kPlayerIdFieldNumber;
const int FeatureLayers::kUnitTypeFieldNumber;
const int FeatureLayers::kSelectedFieldNumber;
const int FeatureLayers::kUnitHitPointsFieldNumber;
const int FeatureLayers::kUnitHitPointsRatioFieldNumber;
const int FeatureLayers::kUnitEnergyFieldNumber;
const int FeatureLayers::kUnitEnergyRatioFieldNumber;
const int FeatureLayers::kUnitShieldsFieldNumber;
const int FeatureLayers::kUnitShieldsRatioFieldNumber;
const int FeatureLayers::kPlayerRelativeFieldNumber;
const int FeatureLayers::kUnitDensityAaFieldNumber;
const int FeatureLayers::kUnitDensityFieldNumber;
const int FeatureLayers::kEffectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureLayers::FeatureLayers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_FeatureLayers.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.FeatureLayers)
}
FeatureLayers::FeatureLayers(const FeatureLayers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_height_map()) {
    height_map_ = new ::SCRAPIProtocol::ImageData(*from.height_map_);
  } else {
    height_map_ = NULL;
  }
  if (from.has_visibility_map()) {
    visibility_map_ = new ::SCRAPIProtocol::ImageData(*from.visibility_map_);
  } else {
    visibility_map_ = NULL;
  }
  if (from.has_creep()) {
    creep_ = new ::SCRAPIProtocol::ImageData(*from.creep_);
  } else {
    creep_ = NULL;
  }
  if (from.has_power()) {
    power_ = new ::SCRAPIProtocol::ImageData(*from.power_);
  } else {
    power_ = NULL;
  }
  if (from.has_player_id()) {
    player_id_ = new ::SCRAPIProtocol::ImageData(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  if (from.has_unit_type()) {
    unit_type_ = new ::SCRAPIProtocol::ImageData(*from.unit_type_);
  } else {
    unit_type_ = NULL;
  }
  if (from.has_selected()) {
    selected_ = new ::SCRAPIProtocol::ImageData(*from.selected_);
  } else {
    selected_ = NULL;
  }
  if (from.has_unit_hit_points()) {
    unit_hit_points_ = new ::SCRAPIProtocol::ImageData(*from.unit_hit_points_);
  } else {
    unit_hit_points_ = NULL;
  }
  if (from.has_unit_energy()) {
    unit_energy_ = new ::SCRAPIProtocol::ImageData(*from.unit_energy_);
  } else {
    unit_energy_ = NULL;
  }
  if (from.has_unit_shields()) {
    unit_shields_ = new ::SCRAPIProtocol::ImageData(*from.unit_shields_);
  } else {
    unit_shields_ = NULL;
  }
  if (from.has_player_relative()) {
    player_relative_ = new ::SCRAPIProtocol::ImageData(*from.player_relative_);
  } else {
    player_relative_ = NULL;
  }
  if (from.has_unit_density_aa()) {
    unit_density_aa_ = new ::SCRAPIProtocol::ImageData(*from.unit_density_aa_);
  } else {
    unit_density_aa_ = NULL;
  }
  if (from.has_unit_density()) {
    unit_density_ = new ::SCRAPIProtocol::ImageData(*from.unit_density_);
  } else {
    unit_density_ = NULL;
  }
  if (from.has_unit_hit_points_ratio()) {
    unit_hit_points_ratio_ = new ::SCRAPIProtocol::ImageData(*from.unit_hit_points_ratio_);
  } else {
    unit_hit_points_ratio_ = NULL;
  }
  if (from.has_unit_energy_ratio()) {
    unit_energy_ratio_ = new ::SCRAPIProtocol::ImageData(*from.unit_energy_ratio_);
  } else {
    unit_energy_ratio_ = NULL;
  }
  if (from.has_unit_shields_ratio()) {
    unit_shields_ratio_ = new ::SCRAPIProtocol::ImageData(*from.unit_shields_ratio_);
  } else {
    unit_shields_ratio_ = NULL;
  }
  if (from.has_effects()) {
    effects_ = new ::SCRAPIProtocol::ImageData(*from.effects_);
  } else {
    effects_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.FeatureLayers)
}

void FeatureLayers::SharedCtor() {
  ::memset(&height_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effects_) -
      reinterpret_cast<char*>(&height_map_)) + sizeof(effects_));
}

FeatureLayers::~FeatureLayers() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.FeatureLayers)
  SharedDtor();
}

void FeatureLayers::SharedDtor() {
  if (this != internal_default_instance()) delete height_map_;
  if (this != internal_default_instance()) delete visibility_map_;
  if (this != internal_default_instance()) delete creep_;
  if (this != internal_default_instance()) delete power_;
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete unit_type_;
  if (this != internal_default_instance()) delete selected_;
  if (this != internal_default_instance()) delete unit_hit_points_;
  if (this != internal_default_instance()) delete unit_energy_;
  if (this != internal_default_instance()) delete unit_shields_;
  if (this != internal_default_instance()) delete player_relative_;
  if (this != internal_default_instance()) delete unit_density_aa_;
  if (this != internal_default_instance()) delete unit_density_;
  if (this != internal_default_instance()) delete unit_hit_points_ratio_;
  if (this != internal_default_instance()) delete unit_energy_ratio_;
  if (this != internal_default_instance()) delete unit_shields_ratio_;
  if (this != internal_default_instance()) delete effects_;
}

void FeatureLayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FeatureLayers::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureLayers& FeatureLayers::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_FeatureLayers.base);
  return *internal_default_instance();
}


void FeatureLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.FeatureLayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(height_map_ != NULL);
      height_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(visibility_map_ != NULL);
      visibility_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creep_ != NULL);
      creep_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(power_ != NULL);
      power_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(unit_type_ != NULL);
      unit_type_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(selected_ != NULL);
      selected_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(unit_hit_points_ != NULL);
      unit_hit_points_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(unit_energy_ != NULL);
      unit_energy_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(unit_shields_ != NULL);
      unit_shields_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(player_relative_ != NULL);
      player_relative_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(unit_density_aa_ != NULL);
      unit_density_aa_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(unit_density_ != NULL);
      unit_density_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(unit_hit_points_ratio_ != NULL);
      unit_hit_points_ratio_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(unit_energy_ratio_ != NULL);
      unit_energy_ratio_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(unit_shields_ratio_ != NULL);
      unit_shields_ratio_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(effects_ != NULL);
    effects_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureLayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.FeatureLayers)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ImageData height_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData visibility_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData creep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData power = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_power()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData player_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData selected = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_hit_points = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_hit_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_energy = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_energy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_shields = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_shields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData player_relative = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_relative()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_density_aa = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_density_aa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_density = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_density()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_hit_points_ratio = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_hit_points_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_energy_ratio = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_energy_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_shields_ratio = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_shields_ratio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData effects = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.FeatureLayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.FeatureLayers)
  return false;
#undef DO_
}

void FeatureLayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.FeatureLayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_height_map(), output);
  }

  // optional .SCRAPIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_visibility_map(), output);
  }

  // optional .SCRAPIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_creep(), output);
  }

  // optional .SCRAPIProtocol.ImageData power = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_power(), output);
  }

  // optional .SCRAPIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_player_id(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_unit_type(), output);
  }

  // optional .SCRAPIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_selected(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_hit_points = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_unit_hit_points(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_energy = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_unit_energy(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_shields = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_unit_shields(), output);
  }

  // optional .SCRAPIProtocol.ImageData player_relative = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_player_relative(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_density_aa = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_unit_density_aa(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_density = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_unit_density(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_hit_points_ratio = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_unit_hit_points_ratio(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_energy_ratio = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_unit_energy_ratio(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_shields_ratio = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_unit_shields_ratio(), output);
  }

  // optional .SCRAPIProtocol.ImageData effects = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_effects(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.FeatureLayers)
}

::google::protobuf::uint8* FeatureLayers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.FeatureLayers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_height_map(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_visibility_map(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_creep(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData power = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_power(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_player_id(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_unit_type(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_selected(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_hit_points = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_unit_hit_points(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_energy = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_unit_energy(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_shields = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_unit_shields(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData player_relative = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_player_relative(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_density_aa = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_unit_density_aa(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_density = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_unit_density(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_hit_points_ratio = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_unit_hit_points_ratio(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_energy_ratio = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_unit_energy_ratio(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_shields_ratio = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_unit_shields_ratio(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData effects = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_effects(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.FeatureLayers)
  return target;
}

size_t FeatureLayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.FeatureLayers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .SCRAPIProtocol.ImageData height_map = 1;
    if (has_height_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *height_map_);
    }

    // optional .SCRAPIProtocol.ImageData visibility_map = 2;
    if (has_visibility_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *visibility_map_);
    }

    // optional .SCRAPIProtocol.ImageData creep = 3;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *creep_);
    }

    // optional .SCRAPIProtocol.ImageData power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *power_);
    }

    // optional .SCRAPIProtocol.ImageData player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_id_);
    }

    // optional .SCRAPIProtocol.ImageData unit_type = 6;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_type_);
    }

    // optional .SCRAPIProtocol.ImageData selected = 7;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *selected_);
    }

    // optional .SCRAPIProtocol.ImageData unit_hit_points = 8;
    if (has_unit_hit_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_hit_points_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .SCRAPIProtocol.ImageData unit_energy = 9;
    if (has_unit_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_energy_);
    }

    // optional .SCRAPIProtocol.ImageData unit_shields = 10;
    if (has_unit_shields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_shields_);
    }

    // optional .SCRAPIProtocol.ImageData player_relative = 11;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_relative_);
    }

    // optional .SCRAPIProtocol.ImageData unit_density_aa = 14;
    if (has_unit_density_aa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_density_aa_);
    }

    // optional .SCRAPIProtocol.ImageData unit_density = 15;
    if (has_unit_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_density_);
    }

    // optional .SCRAPIProtocol.ImageData unit_hit_points_ratio = 17;
    if (has_unit_hit_points_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_hit_points_ratio_);
    }

    // optional .SCRAPIProtocol.ImageData unit_energy_ratio = 18;
    if (has_unit_energy_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_energy_ratio_);
    }

    // optional .SCRAPIProtocol.ImageData unit_shields_ratio = 19;
    if (has_unit_shields_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_shields_ratio_);
    }

  }
  // optional .SCRAPIProtocol.ImageData effects = 20;
  if (has_effects()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *effects_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureLayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.FeatureLayers)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureLayers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureLayers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.FeatureLayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.FeatureLayers)
    MergeFrom(*source);
  }
}

void FeatureLayers::MergeFrom(const FeatureLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.FeatureLayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_height_map()->::SCRAPIProtocol::ImageData::MergeFrom(from.height_map());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_visibility_map()->::SCRAPIProtocol::ImageData::MergeFrom(from.visibility_map());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_creep()->::SCRAPIProtocol::ImageData::MergeFrom(from.creep());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_power()->::SCRAPIProtocol::ImageData::MergeFrom(from.power());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_player_id()->::SCRAPIProtocol::ImageData::MergeFrom(from.player_id());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_unit_type()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_type());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_selected()->::SCRAPIProtocol::ImageData::MergeFrom(from.selected());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_unit_hit_points()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_hit_points());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_unit_energy()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_energy());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_unit_shields()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_shields());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_player_relative()->::SCRAPIProtocol::ImageData::MergeFrom(from.player_relative());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_unit_density_aa()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_density_aa());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_unit_density()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_density());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_unit_hit_points_ratio()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_hit_points_ratio());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_unit_energy_ratio()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_energy_ratio());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_unit_shields_ratio()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_shields_ratio());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    mutable_effects()->::SCRAPIProtocol::ImageData::MergeFrom(from.effects());
  }
}

void FeatureLayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.FeatureLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureLayers::CopyFrom(const FeatureLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.FeatureLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayers::IsInitialized() const {
  return true;
}

void FeatureLayers::Swap(FeatureLayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureLayers::InternalSwap(FeatureLayers* other) {
  using std::swap;
  swap(height_map_, other->height_map_);
  swap(visibility_map_, other->visibility_map_);
  swap(creep_, other->creep_);
  swap(power_, other->power_);
  swap(player_id_, other->player_id_);
  swap(unit_type_, other->unit_type_);
  swap(selected_, other->selected_);
  swap(unit_hit_points_, other->unit_hit_points_);
  swap(unit_energy_, other->unit_energy_);
  swap(unit_shields_, other->unit_shields_);
  swap(player_relative_, other->player_relative_);
  swap(unit_density_aa_, other->unit_density_aa_);
  swap(unit_density_, other->unit_density_);
  swap(unit_hit_points_ratio_, other->unit_hit_points_ratio_);
  swap(unit_energy_ratio_, other->unit_energy_ratio_);
  swap(unit_shields_ratio_, other->unit_shields_ratio_);
  swap(effects_, other->effects_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FeatureLayers::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FeatureLayersMinimap::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->height_map_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->visibility_map_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->creep_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->camera_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->player_relative_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->selected_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_FeatureLayersMinimap_default_instance_._instance.get_mutable()->unit_type_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
}
void FeatureLayersMinimap::clear_height_map() {
  if (height_map_ != NULL) height_map_->Clear();
  clear_has_height_map();
}
void FeatureLayersMinimap::clear_visibility_map() {
  if (visibility_map_ != NULL) visibility_map_->Clear();
  clear_has_visibility_map();
}
void FeatureLayersMinimap::clear_creep() {
  if (creep_ != NULL) creep_->Clear();
  clear_has_creep();
}
void FeatureLayersMinimap::clear_camera() {
  if (camera_ != NULL) camera_->Clear();
  clear_has_camera();
}
void FeatureLayersMinimap::clear_player_id() {
  if (player_id_ != NULL) player_id_->Clear();
  clear_has_player_id();
}
void FeatureLayersMinimap::clear_player_relative() {
  if (player_relative_ != NULL) player_relative_->Clear();
  clear_has_player_relative();
}
void FeatureLayersMinimap::clear_selected() {
  if (selected_ != NULL) selected_->Clear();
  clear_has_selected();
}
void FeatureLayersMinimap::clear_unit_type() {
  if (unit_type_ != NULL) unit_type_->Clear();
  clear_has_unit_type();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureLayersMinimap::kHeightMapFieldNumber;
const int FeatureLayersMinimap::kVisibilityMapFieldNumber;
const int FeatureLayersMinimap::kCreepFieldNumber;
const int FeatureLayersMinimap::kCameraFieldNumber;
const int FeatureLayersMinimap::kPlayerIdFieldNumber;
const int FeatureLayersMinimap::kPlayerRelativeFieldNumber;
const int FeatureLayersMinimap::kSelectedFieldNumber;
const int FeatureLayersMinimap::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureLayersMinimap::FeatureLayersMinimap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_FeatureLayersMinimap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.FeatureLayersMinimap)
}
FeatureLayersMinimap::FeatureLayersMinimap(const FeatureLayersMinimap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_height_map()) {
    height_map_ = new ::SCRAPIProtocol::ImageData(*from.height_map_);
  } else {
    height_map_ = NULL;
  }
  if (from.has_visibility_map()) {
    visibility_map_ = new ::SCRAPIProtocol::ImageData(*from.visibility_map_);
  } else {
    visibility_map_ = NULL;
  }
  if (from.has_creep()) {
    creep_ = new ::SCRAPIProtocol::ImageData(*from.creep_);
  } else {
    creep_ = NULL;
  }
  if (from.has_camera()) {
    camera_ = new ::SCRAPIProtocol::ImageData(*from.camera_);
  } else {
    camera_ = NULL;
  }
  if (from.has_player_id()) {
    player_id_ = new ::SCRAPIProtocol::ImageData(*from.player_id_);
  } else {
    player_id_ = NULL;
  }
  if (from.has_player_relative()) {
    player_relative_ = new ::SCRAPIProtocol::ImageData(*from.player_relative_);
  } else {
    player_relative_ = NULL;
  }
  if (from.has_selected()) {
    selected_ = new ::SCRAPIProtocol::ImageData(*from.selected_);
  } else {
    selected_ = NULL;
  }
  if (from.has_unit_type()) {
    unit_type_ = new ::SCRAPIProtocol::ImageData(*from.unit_type_);
  } else {
    unit_type_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.FeatureLayersMinimap)
}

void FeatureLayersMinimap::SharedCtor() {
  ::memset(&height_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_type_) -
      reinterpret_cast<char*>(&height_map_)) + sizeof(unit_type_));
}

FeatureLayersMinimap::~FeatureLayersMinimap() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.FeatureLayersMinimap)
  SharedDtor();
}

void FeatureLayersMinimap::SharedDtor() {
  if (this != internal_default_instance()) delete height_map_;
  if (this != internal_default_instance()) delete visibility_map_;
  if (this != internal_default_instance()) delete creep_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete player_relative_;
  if (this != internal_default_instance()) delete selected_;
  if (this != internal_default_instance()) delete unit_type_;
}

void FeatureLayersMinimap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FeatureLayersMinimap::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FeatureLayersMinimap& FeatureLayersMinimap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_FeatureLayersMinimap.base);
  return *internal_default_instance();
}


void FeatureLayersMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.FeatureLayersMinimap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(height_map_ != NULL);
      height_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(visibility_map_ != NULL);
      visibility_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(creep_ != NULL);
      creep_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(camera_ != NULL);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_id_ != NULL);
      player_id_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(player_relative_ != NULL);
      player_relative_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(selected_ != NULL);
      selected_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(unit_type_ != NULL);
      unit_type_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureLayersMinimap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.FeatureLayersMinimap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ImageData height_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_height_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData visibility_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_visibility_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData creep = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData camera = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData player_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData player_relative = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_relative()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData selected = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData unit_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.FeatureLayersMinimap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.FeatureLayersMinimap)
  return false;
#undef DO_
}

void FeatureLayersMinimap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.FeatureLayersMinimap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_height_map(), output);
  }

  // optional .SCRAPIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_visibility_map(), output);
  }

  // optional .SCRAPIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_creep(), output);
  }

  // optional .SCRAPIProtocol.ImageData camera = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_camera(), output);
  }

  // optional .SCRAPIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_player_id(), output);
  }

  // optional .SCRAPIProtocol.ImageData player_relative = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_player_relative(), output);
  }

  // optional .SCRAPIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_selected(), output);
  }

  // optional .SCRAPIProtocol.ImageData unit_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_unit_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.FeatureLayersMinimap)
}

::google::protobuf::uint8* FeatureLayersMinimap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.FeatureLayersMinimap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData height_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_height_map(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData visibility_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_visibility_map(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData creep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_creep(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData camera = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_camera(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData player_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_player_id(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData player_relative = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_player_relative(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData selected = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_selected(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData unit_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_unit_type(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.FeatureLayersMinimap)
  return target;
}

size_t FeatureLayersMinimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.FeatureLayersMinimap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .SCRAPIProtocol.ImageData height_map = 1;
    if (has_height_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *height_map_);
    }

    // optional .SCRAPIProtocol.ImageData visibility_map = 2;
    if (has_visibility_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *visibility_map_);
    }

    // optional .SCRAPIProtocol.ImageData creep = 3;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *creep_);
    }

    // optional .SCRAPIProtocol.ImageData camera = 4;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *camera_);
    }

    // optional .SCRAPIProtocol.ImageData player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_id_);
    }

    // optional .SCRAPIProtocol.ImageData player_relative = 6;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_relative_);
    }

    // optional .SCRAPIProtocol.ImageData selected = 7;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *selected_);
    }

    // optional .SCRAPIProtocol.ImageData unit_type = 8;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_type_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureLayersMinimap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.FeatureLayersMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureLayersMinimap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureLayersMinimap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.FeatureLayersMinimap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.FeatureLayersMinimap)
    MergeFrom(*source);
  }
}

void FeatureLayersMinimap::MergeFrom(const FeatureLayersMinimap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.FeatureLayersMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_height_map()->::SCRAPIProtocol::ImageData::MergeFrom(from.height_map());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_visibility_map()->::SCRAPIProtocol::ImageData::MergeFrom(from.visibility_map());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_creep()->::SCRAPIProtocol::ImageData::MergeFrom(from.creep());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_camera()->::SCRAPIProtocol::ImageData::MergeFrom(from.camera());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_player_id()->::SCRAPIProtocol::ImageData::MergeFrom(from.player_id());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_player_relative()->::SCRAPIProtocol::ImageData::MergeFrom(from.player_relative());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_selected()->::SCRAPIProtocol::ImageData::MergeFrom(from.selected());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_unit_type()->::SCRAPIProtocol::ImageData::MergeFrom(from.unit_type());
    }
  }
}

void FeatureLayersMinimap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.FeatureLayersMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureLayersMinimap::CopyFrom(const FeatureLayersMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.FeatureLayersMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayersMinimap::IsInitialized() const {
  return true;
}

void FeatureLayersMinimap::Swap(FeatureLayersMinimap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureLayersMinimap::InternalSwap(FeatureLayersMinimap* other) {
  using std::swap;
  swap(height_map_, other->height_map_);
  swap(visibility_map_, other->visibility_map_);
  swap(creep_, other->creep_);
  swap(camera_, other->camera_);
  swap(player_id_, other->player_id_);
  swap(player_relative_, other->player_relative_);
  swap(selected_, other->selected_);
  swap(unit_type_, other->unit_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FeatureLayersMinimap::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObservationRender::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ObservationRender_default_instance_._instance.get_mutable()->map_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
  ::SCRAPIProtocol::_ObservationRender_default_instance_._instance.get_mutable()->minimap_ = const_cast< ::SCRAPIProtocol::ImageData*>(
      ::SCRAPIProtocol::ImageData::internal_default_instance());
}
void ObservationRender::clear_map() {
  if (map_ != NULL) map_->Clear();
  clear_has_map();
}
void ObservationRender::clear_minimap() {
  if (minimap_ != NULL) minimap_->Clear();
  clear_has_minimap();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationRender::kMapFieldNumber;
const int ObservationRender::kMinimapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationRender::ObservationRender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ObservationRender.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ObservationRender)
}
ObservationRender::ObservationRender(const ObservationRender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map()) {
    map_ = new ::SCRAPIProtocol::ImageData(*from.map_);
  } else {
    map_ = NULL;
  }
  if (from.has_minimap()) {
    minimap_ = new ::SCRAPIProtocol::ImageData(*from.minimap_);
  } else {
    minimap_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ObservationRender)
}

void ObservationRender::SharedCtor() {
  ::memset(&map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minimap_) -
      reinterpret_cast<char*>(&map_)) + sizeof(minimap_));
}

ObservationRender::~ObservationRender() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ObservationRender)
  SharedDtor();
}

void ObservationRender::SharedDtor() {
  if (this != internal_default_instance()) delete map_;
  if (this != internal_default_instance()) delete minimap_;
}

void ObservationRender::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObservationRender::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObservationRender& ObservationRender::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ObservationRender.base);
  return *internal_default_instance();
}


void ObservationRender::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ObservationRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(map_ != NULL);
      map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minimap_ != NULL);
      minimap_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObservationRender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ObservationRender)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ImageData map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ImageData minimap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minimap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ObservationRender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ObservationRender)
  return false;
#undef DO_
}

void ObservationRender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ObservationRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData map = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_map(), output);
  }

  // optional .SCRAPIProtocol.ImageData minimap = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_minimap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ObservationRender)
}

::google::protobuf::uint8* ObservationRender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ObservationRender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ImageData map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_map(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ImageData minimap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_minimap(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ObservationRender)
  return target;
}

size_t ObservationRender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ObservationRender)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.ImageData map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_);
    }

    // optional .SCRAPIProtocol.ImageData minimap = 2;
    if (has_minimap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *minimap_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationRender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ObservationRender)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationRender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationRender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ObservationRender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ObservationRender)
    MergeFrom(*source);
  }
}

void ObservationRender::MergeFrom(const ObservationRender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ObservationRender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_map()->::SCRAPIProtocol::ImageData::MergeFrom(from.map());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_minimap()->::SCRAPIProtocol::ImageData::MergeFrom(from.minimap());
    }
  }
}

void ObservationRender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ObservationRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationRender::CopyFrom(const ObservationRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ObservationRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationRender::IsInitialized() const {
  return true;
}

void ObservationRender::Swap(ObservationRender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationRender::InternalSwap(ObservationRender* other) {
  using std::swap;
  swap(map_, other->map_);
  swap(minimap_, other->minimap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObservationRender::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSpatial::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionSpatial_default_instance_.unit_command_ = const_cast< ::SCRAPIProtocol::ActionSpatialUnitCommand*>(
      ::SCRAPIProtocol::ActionSpatialUnitCommand::internal_default_instance());
  ::SCRAPIProtocol::_ActionSpatial_default_instance_.camera_move_ = const_cast< ::SCRAPIProtocol::ActionSpatialCameraMove*>(
      ::SCRAPIProtocol::ActionSpatialCameraMove::internal_default_instance());
  ::SCRAPIProtocol::_ActionSpatial_default_instance_.unit_selection_point_ = const_cast< ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint*>(
      ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint::internal_default_instance());
  ::SCRAPIProtocol::_ActionSpatial_default_instance_.unit_selection_rect_ = const_cast< ::SCRAPIProtocol::ActionSpatialUnitSelectionRect*>(
      ::SCRAPIProtocol::ActionSpatialUnitSelectionRect::internal_default_instance());
}
void ActionSpatial::set_allocated_unit_command(::SCRAPIProtocol::ActionSpatialUnitCommand* unit_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (unit_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit_command, submessage_arena);
    }
    set_has_unit_command();
    action_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatial.unit_command)
}
void ActionSpatial::set_allocated_camera_move(::SCRAPIProtocol::ActionSpatialCameraMove* camera_move) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (camera_move) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_move = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_move, submessage_arena);
    }
    set_has_camera_move();
    action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatial.camera_move)
}
void ActionSpatial::set_allocated_unit_selection_point(::SCRAPIProtocol::ActionSpatialUnitSelectionPoint* unit_selection_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (unit_selection_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit_selection_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit_selection_point, submessage_arena);
    }
    set_has_unit_selection_point();
    action_.unit_selection_point_ = unit_selection_point;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatial.unit_selection_point)
}
void ActionSpatial::set_allocated_unit_selection_rect(::SCRAPIProtocol::ActionSpatialUnitSelectionRect* unit_selection_rect) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (unit_selection_rect) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit_selection_rect = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit_selection_rect, submessage_arena);
    }
    set_has_unit_selection_rect();
    action_.unit_selection_rect_ = unit_selection_rect;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatial.unit_selection_rect)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatial::kUnitCommandFieldNumber;
const int ActionSpatial::kCameraMoveFieldNumber;
const int ActionSpatial::kUnitSelectionPointFieldNumber;
const int ActionSpatial::kUnitSelectionRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatial::ActionSpatial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ActionSpatial.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSpatial)
}
ActionSpatial::ActionSpatial(const ActionSpatial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SCRAPIProtocol::ActionSpatialUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SCRAPIProtocol::ActionSpatialCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kUnitSelectionPoint: {
      mutable_unit_selection_point()->::SCRAPIProtocol::ActionSpatialUnitSelectionPoint::MergeFrom(from.unit_selection_point());
      break;
    }
    case kUnitSelectionRect: {
      mutable_unit_selection_rect()->::SCRAPIProtocol::ActionSpatialUnitSelectionRect::MergeFrom(from.unit_selection_rect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSpatial)
}

void ActionSpatial::SharedCtor() {
  clear_has_action();
}

ActionSpatial::~ActionSpatial() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSpatial)
  SharedDtor();
}

void ActionSpatial::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void ActionSpatial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSpatial::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSpatial& ActionSpatial::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ActionSpatial.base);
  return *internal_default_instance();
}


void ActionSpatial::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ActionSpatial)
  switch (action_case()) {
    case kUnitCommand: {
      delete action_.unit_command_;
      break;
    }
    case kCameraMove: {
      delete action_.camera_move_;
      break;
    }
    case kUnitSelectionPoint: {
      delete action_.unit_selection_point_;
      break;
    }
    case kUnitSelectionRect: {
      delete action_.unit_selection_rect_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionSpatial::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSpatial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSpatial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSpatial)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionSpatialUnitCommand unit_command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSpatialCameraMove camera_move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_selection_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit_selection_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSpatial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSpatial)
  return false;
#undef DO_
}

void ActionSpatial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSpatial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kUnitCommand:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_unit_command(), output);
      break;
    case kCameraMove:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_camera_move(), output);
      break;
    case kUnitSelectionPoint:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_unit_selection_point(), output);
      break;
    case kUnitSelectionRect:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_unit_selection_rect(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSpatial)
}

::google::protobuf::uint8* ActionSpatial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSpatial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kUnitCommand:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_unit_command(), deterministic, target);
      break;
    case kCameraMove:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_camera_move(), deterministic, target);
      break;
    case kUnitSelectionPoint:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_unit_selection_point(), deterministic, target);
      break;
    case kUnitSelectionRect:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_unit_selection_rect(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSpatial)
  return target;
}

size_t ActionSpatial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSpatial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (action_case()) {
    // optional .SCRAPIProtocol.ActionSpatialUnitCommand unit_command = 1;
    case kUnitCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.unit_command_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSpatialCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.camera_move_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
    case kUnitSelectionPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.unit_selection_point_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
    case kUnitSelectionRect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.unit_selection_rect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpatial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSpatial)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpatial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSpatial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSpatial)
    MergeFrom(*source);
  }
}

void ActionSpatial::MergeFrom(const ActionSpatial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSpatial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SCRAPIProtocol::ActionSpatialUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SCRAPIProtocol::ActionSpatialCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kUnitSelectionPoint: {
      mutable_unit_selection_point()->::SCRAPIProtocol::ActionSpatialUnitSelectionPoint::MergeFrom(from.unit_selection_point());
      break;
    }
    case kUnitSelectionRect: {
      mutable_unit_selection_rect()->::SCRAPIProtocol::ActionSpatialUnitSelectionRect::MergeFrom(from.unit_selection_rect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionSpatial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSpatial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatial::CopyFrom(const ActionSpatial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSpatial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatial::IsInitialized() const {
  return true;
}

void ActionSpatial::Swap(ActionSpatial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatial::InternalSwap(ActionSpatial* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSpatial::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSpatialUnitCommand::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionSpatialUnitCommand_default_instance_.target_screen_coord_ = const_cast< ::SCRAPIProtocol::PointI*>(
      ::SCRAPIProtocol::PointI::internal_default_instance());
  ::SCRAPIProtocol::_ActionSpatialUnitCommand_default_instance_.target_minimap_coord_ = const_cast< ::SCRAPIProtocol::PointI*>(
      ::SCRAPIProtocol::PointI::internal_default_instance());
}
void ActionSpatialUnitCommand::set_allocated_target_screen_coord(::SCRAPIProtocol::PointI* target_screen_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (target_screen_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_screen_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_screen_coord, submessage_arena);
    }
    set_has_target_screen_coord();
    target_.target_screen_coord_ = target_screen_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatialUnitCommand.target_screen_coord)
}
void ActionSpatialUnitCommand::clear_target_screen_coord() {
  if (has_target_screen_coord()) {
    delete target_.target_screen_coord_;
    clear_has_target();
  }
}
void ActionSpatialUnitCommand::set_allocated_target_minimap_coord(::SCRAPIProtocol::PointI* target_minimap_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (target_minimap_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_minimap_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_minimap_coord, submessage_arena);
    }
    set_has_target_minimap_coord();
    target_.target_minimap_coord_ = target_minimap_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
}
void ActionSpatialUnitCommand::clear_target_minimap_coord() {
  if (has_target_minimap_coord()) {
    delete target_.target_minimap_coord_;
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitCommand::kAbilityIdFieldNumber;
const int ActionSpatialUnitCommand::kTargetScreenCoordFieldNumber;
const int ActionSpatialUnitCommand::kTargetMinimapCoordFieldNumber;
const int ActionSpatialUnitCommand::kQueueCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitCommand::ActionSpatialUnitCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSpatialUnitCommand)
}
ActionSpatialUnitCommand::ActionSpatialUnitCommand(const ActionSpatialUnitCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&queue_command_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  clear_has_target();
  switch (from.target_case()) {
    case kTargetScreenCoord: {
      mutable_target_screen_coord()->::SCRAPIProtocol::PointI::MergeFrom(from.target_screen_coord());
      break;
    }
    case kTargetMinimapCoord: {
      mutable_target_minimap_coord()->::SCRAPIProtocol::PointI::MergeFrom(from.target_minimap_coord());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSpatialUnitCommand)
}

void ActionSpatialUnitCommand::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&queue_command_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  clear_has_target();
}

ActionSpatialUnitCommand::~ActionSpatialUnitCommand() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSpatialUnitCommand)
  SharedDtor();
}

void ActionSpatialUnitCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
}

void ActionSpatialUnitCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSpatialUnitCommand::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSpatialUnitCommand& ActionSpatialUnitCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ActionSpatialUnitCommand.base);
  return *internal_default_instance();
}


void ActionSpatialUnitCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  switch (target_case()) {
    case kTargetScreenCoord: {
      delete target_.target_screen_coord_;
      break;
    }
    case kTargetMinimapCoord: {
      delete target_.target_minimap_coord_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ActionSpatialUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&queue_command_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(queue_command_));
  }
  clear_target();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSpatialUnitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.PointI target_screen_coord = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_screen_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.PointI target_minimap_coord = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_minimap_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool queue_command = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_queue_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSpatialUnitCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSpatialUnitCommand)
  return false;
#undef DO_
}

void ActionSpatialUnitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  switch (target_case()) {
    case kTargetScreenCoord:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_target_screen_coord(), output);
      break;
    case kTargetMinimapCoord:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_target_minimap_coord(), output);
      break;
    default: ;
  }
  // optional bool queue_command = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->queue_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSpatialUnitCommand)
}

::google::protobuf::uint8* ActionSpatialUnitCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  switch (target_case()) {
    case kTargetScreenCoord:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_target_screen_coord(), deterministic, target);
      break;
    case kTargetMinimapCoord:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_target_minimap_coord(), deterministic, target);
      break;
    default: ;
  }
  // optional bool queue_command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->queue_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSpatialUnitCommand)
  return target;
}

size_t ActionSpatialUnitCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional bool queue_command = 4;
    if (has_queue_command()) {
      total_size += 1 + 1;
    }

  }
  switch (target_case()) {
    // optional .SCRAPIProtocol.PointI target_screen_coord = 2;
    case kTargetScreenCoord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.target_screen_coord_);
      break;
    }
    // optional .SCRAPIProtocol.PointI target_minimap_coord = 3;
    case kTargetMinimapCoord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.target_minimap_coord_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpatialUnitCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpatialUnitCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSpatialUnitCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSpatialUnitCommand)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitCommand::MergeFrom(const ActionSpatialUnitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      queue_command_ = from.queue_command_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.target_case()) {
    case kTargetScreenCoord: {
      mutable_target_screen_coord()->::SCRAPIProtocol::PointI::MergeFrom(from.target_screen_coord());
      break;
    }
    case kTargetMinimapCoord: {
      mutable_target_minimap_coord()->::SCRAPIProtocol::PointI::MergeFrom(from.target_minimap_coord());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void ActionSpatialUnitCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitCommand::CopyFrom(const ActionSpatialUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSpatialUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitCommand::IsInitialized() const {
  return true;
}

void ActionSpatialUnitCommand::Swap(ActionSpatialUnitCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitCommand::InternalSwap(ActionSpatialUnitCommand* other) {
  using std::swap;
  swap(ability_id_, other->ability_id_);
  swap(queue_command_, other->queue_command_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSpatialUnitCommand::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSpatialCameraMove::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionSpatialCameraMove_default_instance_._instance.get_mutable()->center_minimap_ = const_cast< ::SCRAPIProtocol::PointI*>(
      ::SCRAPIProtocol::PointI::internal_default_instance());
}
void ActionSpatialCameraMove::clear_center_minimap() {
  if (center_minimap_ != NULL) center_minimap_->Clear();
  clear_has_center_minimap();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialCameraMove::kCenterMinimapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialCameraMove::ActionSpatialCameraMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ActionSpatialCameraMove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSpatialCameraMove)
}
ActionSpatialCameraMove::ActionSpatialCameraMove(const ActionSpatialCameraMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center_minimap()) {
    center_minimap_ = new ::SCRAPIProtocol::PointI(*from.center_minimap_);
  } else {
    center_minimap_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSpatialCameraMove)
}

void ActionSpatialCameraMove::SharedCtor() {
  center_minimap_ = NULL;
}

ActionSpatialCameraMove::~ActionSpatialCameraMove() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSpatialCameraMove)
  SharedDtor();
}

void ActionSpatialCameraMove::SharedDtor() {
  if (this != internal_default_instance()) delete center_minimap_;
}

void ActionSpatialCameraMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSpatialCameraMove::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSpatialCameraMove& ActionSpatialCameraMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ActionSpatialCameraMove.base);
  return *internal_default_instance();
}


void ActionSpatialCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSpatialCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_minimap_ != NULL);
    center_minimap_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSpatialCameraMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSpatialCameraMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.PointI center_minimap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center_minimap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSpatialCameraMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSpatialCameraMove)
  return false;
#undef DO_
}

void ActionSpatialCameraMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSpatialCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PointI center_minimap = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center_minimap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSpatialCameraMove)
}

::google::protobuf::uint8* ActionSpatialCameraMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSpatialCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PointI center_minimap = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center_minimap(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSpatialCameraMove)
  return target;
}

size_t ActionSpatialCameraMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSpatialCameraMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.PointI center_minimap = 1;
  if (has_center_minimap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_minimap_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpatialCameraMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSpatialCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpatialCameraMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialCameraMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSpatialCameraMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSpatialCameraMove)
    MergeFrom(*source);
  }
}

void ActionSpatialCameraMove::MergeFrom(const ActionSpatialCameraMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSpatialCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_minimap()) {
    mutable_center_minimap()->::SCRAPIProtocol::PointI::MergeFrom(from.center_minimap());
  }
}

void ActionSpatialCameraMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSpatialCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialCameraMove::CopyFrom(const ActionSpatialCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSpatialCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialCameraMove::IsInitialized() const {
  return true;
}

void ActionSpatialCameraMove::Swap(ActionSpatialCameraMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialCameraMove::InternalSwap(ActionSpatialCameraMove* other) {
  using std::swap;
  swap(center_minimap_, other->center_minimap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSpatialCameraMove::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSpatialUnitSelectionPoint::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionSpatialUnitSelectionPoint_default_instance_._instance.get_mutable()->selection_screen_coord_ = const_cast< ::SCRAPIProtocol::PointI*>(
      ::SCRAPIProtocol::PointI::internal_default_instance());
}
void ActionSpatialUnitSelectionPoint::clear_selection_screen_coord() {
  if (selection_screen_coord_ != NULL) selection_screen_coord_->Clear();
  clear_has_selection_screen_coord();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitSelectionPoint::kSelectionScreenCoordFieldNumber;
const int ActionSpatialUnitSelectionPoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
}
ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint(const ActionSpatialUnitSelectionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_selection_screen_coord()) {
    selection_screen_coord_ = new ::SCRAPIProtocol::PointI(*from.selection_screen_coord_);
  } else {
    selection_screen_coord_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
}

void ActionSpatialUnitSelectionPoint::SharedCtor() {
  selection_screen_coord_ = NULL;
  type_ = 1;
}

ActionSpatialUnitSelectionPoint::~ActionSpatialUnitSelectionPoint() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  SharedDtor();
}

void ActionSpatialUnitSelectionPoint::SharedDtor() {
  if (this != internal_default_instance()) delete selection_screen_coord_;
}

void ActionSpatialUnitSelectionPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionPoint::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSpatialUnitSelectionPoint& ActionSpatialUnitSelectionPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionPoint.base);
  return *internal_default_instance();
}


void ActionSpatialUnitSelectionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selection_screen_coord_ != NULL);
      selection_screen_coord_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSpatialUnitSelectionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.PointI selection_screen_coord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selection_screen_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::ActionSpatialUnitSelectionPoint_Type_IsValid(value)) {
            set_type(static_cast< ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  return false;
#undef DO_
}

void ActionSpatialUnitSelectionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PointI selection_screen_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_selection_screen_coord(), output);
  }

  // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
}

::google::protobuf::uint8* ActionSpatialUnitSelectionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.PointI selection_screen_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_selection_screen_coord(), deterministic, target);
  }

  // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  return target;
}

size_t ActionSpatialUnitSelectionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.PointI selection_screen_coord = 1;
    if (has_selection_screen_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *selection_screen_coord_);
    }

    // optional .SCRAPIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpatialUnitSelectionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpatialUnitSelectionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitSelectionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitSelectionPoint::MergeFrom(const ActionSpatialUnitSelectionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_selection_screen_coord()->::SCRAPIProtocol::PointI::MergeFrom(from.selection_screen_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionSpatialUnitSelectionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitSelectionPoint::CopyFrom(const ActionSpatialUnitSelectionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionPoint::IsInitialized() const {
  return true;
}

void ActionSpatialUnitSelectionPoint::Swap(ActionSpatialUnitSelectionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitSelectionPoint::InternalSwap(ActionSpatialUnitSelectionPoint* other) {
  using std::swap;
  swap(selection_screen_coord_, other->selection_screen_coord_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSpatialUnitSelectionPoint::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSpatialUnitSelectionRect::InitAsDefaultInstance() {
}
void ActionSpatialUnitSelectionRect::clear_selection_screen_coord() {
  selection_screen_coord_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitSelectionRect::kSelectionScreenCoordFieldNumber;
const int ActionSpatialUnitSelectionRect::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionRect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
}
ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect(const ActionSpatialUnitSelectionRect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      selection_screen_coord_(from.selection_screen_coord_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selection_add_ = from.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
}

void ActionSpatialUnitSelectionRect::SharedCtor() {
  selection_add_ = false;
}

ActionSpatialUnitSelectionRect::~ActionSpatialUnitSelectionRect() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  SharedDtor();
}

void ActionSpatialUnitSelectionRect::SharedDtor() {
}

void ActionSpatialUnitSelectionRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionRect::descriptor() {
  ::protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSpatialUnitSelectionRect& ActionSpatialUnitSelectionRect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_spatial_2eproto::scc_info_ActionSpatialUnitSelectionRect.base);
  return *internal_default_instance();
}


void ActionSpatialUnitSelectionRect::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_screen_coord_.Clear();
  selection_add_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSpatialUnitSelectionRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.RectangleI selection_screen_coord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_selection_screen_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selection_add = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_selection_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  return false;
#undef DO_
}

void ActionSpatialUnitSelectionRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.RectangleI selection_screen_coord = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selection_screen_coord_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->selection_screen_coord(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
}

::google::protobuf::uint8* ActionSpatialUnitSelectionRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.RectangleI selection_screen_coord = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->selection_screen_coord_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->selection_screen_coord(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  return target;
}

size_t ActionSpatialUnitSelectionRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.RectangleI selection_screen_coord = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->selection_screen_coord_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->selection_screen_coord(static_cast<int>(i)));
    }
  }

  // optional bool selection_add = 2;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpatialUnitSelectionRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpatialUnitSelectionRect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitSelectionRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitSelectionRect::MergeFrom(const ActionSpatialUnitSelectionRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  selection_screen_coord_.MergeFrom(from.selection_screen_coord_);
  if (from.has_selection_add()) {
    set_selection_add(from.selection_add());
  }
}

void ActionSpatialUnitSelectionRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitSelectionRect::CopyFrom(const ActionSpatialUnitSelectionRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSpatialUnitSelectionRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionRect::IsInitialized() const {
  return true;
}

void ActionSpatialUnitSelectionRect::Swap(ActionSpatialUnitSelectionRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitSelectionRect::InternalSwap(ActionSpatialUnitSelectionRect* other) {
  using std::swap;
  CastToBase(&selection_screen_coord_)->InternalSwap(CastToBase(&other->selection_screen_coord_));
  swap(selection_add_, other->selection_add_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSpatialUnitSelectionRect::GetMetadata() const {
  protobuf_spatial_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_spatial_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ObservationFeatureLayer* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ObservationFeatureLayer >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ObservationFeatureLayer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::FeatureLayers* Arena::CreateMaybeMessage< ::SCRAPIProtocol::FeatureLayers >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::FeatureLayers >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::FeatureLayersMinimap* Arena::CreateMaybeMessage< ::SCRAPIProtocol::FeatureLayersMinimap >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::FeatureLayersMinimap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ObservationRender* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ObservationRender >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ObservationRender >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSpatial* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSpatial >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSpatial >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSpatialUnitCommand* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSpatialUnitCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSpatialUnitCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSpatialCameraMove* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSpatialCameraMove >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSpatialCameraMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSpatialUnitSelectionPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSpatialUnitSelectionRect* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSpatialUnitSelectionRect >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSpatialUnitSelectionRect >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
