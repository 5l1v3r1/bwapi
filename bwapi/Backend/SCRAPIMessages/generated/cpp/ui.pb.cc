// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ui.proto

#include "ui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ui_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionCargoPanelUnload;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionControlGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionMultiPanel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionProductionPanelRemoveFromQueue;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectArmy;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectIdleWorker;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectLarva;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectWarpGates;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionToggleAutocast;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ControlGroup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UnitInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CargoPanel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MultiPanel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProductionPanel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ui_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SinglePanel;
}  // namespace protobuf_ui_2eproto
namespace SCRAPIProtocol {
class ObservationUIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObservationUI>
      _instance;
  const ::SCRAPIProtocol::SinglePanel* single_;
  const ::SCRAPIProtocol::MultiPanel* multi_;
  const ::SCRAPIProtocol::CargoPanel* cargo_;
  const ::SCRAPIProtocol::ProductionPanel* production_;
} _ObservationUI_default_instance_;
class ControlGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlGroup>
      _instance;
} _ControlGroup_default_instance_;
class UnitInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UnitInfo>
      _instance;
} _UnitInfo_default_instance_;
class SinglePanelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SinglePanel>
      _instance;
} _SinglePanel_default_instance_;
class MultiPanelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultiPanel>
      _instance;
} _MultiPanel_default_instance_;
class CargoPanelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CargoPanel>
      _instance;
} _CargoPanel_default_instance_;
class ProductionPanelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProductionPanel>
      _instance;
} _ProductionPanel_default_instance_;
class ActionUIDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionUI>
      _instance;
  const ::SCRAPIProtocol::ActionControlGroup* control_group_;
  const ::SCRAPIProtocol::ActionSelectArmy* select_army_;
  const ::SCRAPIProtocol::ActionSelectWarpGates* select_warp_gates_;
  const ::SCRAPIProtocol::ActionSelectLarva* select_larva_;
  const ::SCRAPIProtocol::ActionSelectIdleWorker* select_idle_worker_;
  const ::SCRAPIProtocol::ActionMultiPanel* multi_panel_;
  const ::SCRAPIProtocol::ActionCargoPanelUnload* cargo_panel_;
  const ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue* production_panel_;
  const ::SCRAPIProtocol::ActionToggleAutocast* toggle_autocast_;
} _ActionUI_default_instance_;
class ActionControlGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionControlGroup>
      _instance;
} _ActionControlGroup_default_instance_;
class ActionSelectArmyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSelectArmy>
      _instance;
} _ActionSelectArmy_default_instance_;
class ActionSelectWarpGatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSelectWarpGates>
      _instance;
} _ActionSelectWarpGates_default_instance_;
class ActionSelectLarvaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSelectLarva>
      _instance;
} _ActionSelectLarva_default_instance_;
class ActionSelectIdleWorkerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionSelectIdleWorker>
      _instance;
} _ActionSelectIdleWorker_default_instance_;
class ActionMultiPanelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionMultiPanel>
      _instance;
} _ActionMultiPanel_default_instance_;
class ActionCargoPanelUnloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionCargoPanelUnload>
      _instance;
} _ActionCargoPanelUnload_default_instance_;
class ActionProductionPanelRemoveFromQueueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionProductionPanelRemoveFromQueue>
      _instance;
} _ActionProductionPanelRemoveFromQueue_default_instance_;
class ActionToggleAutocastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionToggleAutocast>
      _instance;
} _ActionToggleAutocast_default_instance_;
}  // namespace SCRAPIProtocol
namespace protobuf_ui_2eproto {
static void InitDefaultsObservationUI() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ObservationUI_default_instance_;
    new (ptr) ::SCRAPIProtocol::ObservationUI();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ObservationUI::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ObservationUI =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsObservationUI}, {
      &protobuf_ui_2eproto::scc_info_ControlGroup.base,
      &protobuf_ui_2eproto::scc_info_SinglePanel.base,
      &protobuf_ui_2eproto::scc_info_MultiPanel.base,
      &protobuf_ui_2eproto::scc_info_CargoPanel.base,
      &protobuf_ui_2eproto::scc_info_ProductionPanel.base,}};

static void InitDefaultsControlGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ControlGroup_default_instance_;
    new (ptr) ::SCRAPIProtocol::ControlGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ControlGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControlGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsControlGroup}, {}};

static void InitDefaultsUnitInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_UnitInfo_default_instance_;
    new (ptr) ::SCRAPIProtocol::UnitInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::UnitInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UnitInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUnitInfo}, {}};

static void InitDefaultsSinglePanel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_SinglePanel_default_instance_;
    new (ptr) ::SCRAPIProtocol::SinglePanel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::SinglePanel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SinglePanel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSinglePanel}, {
      &protobuf_ui_2eproto::scc_info_UnitInfo.base,}};

static void InitDefaultsMultiPanel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_MultiPanel_default_instance_;
    new (ptr) ::SCRAPIProtocol::MultiPanel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::MultiPanel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultiPanel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultiPanel}, {
      &protobuf_ui_2eproto::scc_info_UnitInfo.base,}};

static void InitDefaultsCargoPanel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_CargoPanel_default_instance_;
    new (ptr) ::SCRAPIProtocol::CargoPanel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::CargoPanel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CargoPanel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCargoPanel}, {
      &protobuf_ui_2eproto::scc_info_UnitInfo.base,}};

static void InitDefaultsProductionPanel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ProductionPanel_default_instance_;
    new (ptr) ::SCRAPIProtocol::ProductionPanel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ProductionPanel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProductionPanel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProductionPanel}, {
      &protobuf_ui_2eproto::scc_info_UnitInfo.base,}};

static void InitDefaultsActionUI() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionUI_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionUI();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionUI::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_ActionUI =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsActionUI}, {
      &protobuf_ui_2eproto::scc_info_ActionControlGroup.base,
      &protobuf_ui_2eproto::scc_info_ActionSelectArmy.base,
      &protobuf_ui_2eproto::scc_info_ActionSelectWarpGates.base,
      &protobuf_ui_2eproto::scc_info_ActionSelectLarva.base,
      &protobuf_ui_2eproto::scc_info_ActionSelectIdleWorker.base,
      &protobuf_ui_2eproto::scc_info_ActionMultiPanel.base,
      &protobuf_ui_2eproto::scc_info_ActionCargoPanelUnload.base,
      &protobuf_ui_2eproto::scc_info_ActionProductionPanelRemoveFromQueue.base,
      &protobuf_ui_2eproto::scc_info_ActionToggleAutocast.base,}};

static void InitDefaultsActionControlGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionControlGroup_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionControlGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionControlGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionControlGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionControlGroup}, {}};

static void InitDefaultsActionSelectArmy() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSelectArmy_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSelectArmy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSelectArmy::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectArmy =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionSelectArmy}, {}};

static void InitDefaultsActionSelectWarpGates() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSelectWarpGates_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSelectWarpGates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSelectWarpGates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectWarpGates =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionSelectWarpGates}, {}};

static void InitDefaultsActionSelectLarva() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSelectLarva_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSelectLarva();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSelectLarva::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectLarva =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionSelectLarva}, {}};

static void InitDefaultsActionSelectIdleWorker() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionSelectIdleWorker_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionSelectIdleWorker();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionSelectIdleWorker::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionSelectIdleWorker =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionSelectIdleWorker}, {}};

static void InitDefaultsActionMultiPanel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionMultiPanel_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionMultiPanel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionMultiPanel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionMultiPanel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionMultiPanel}, {}};

static void InitDefaultsActionCargoPanelUnload() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionCargoPanelUnload_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionCargoPanelUnload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionCargoPanelUnload::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionCargoPanelUnload =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionCargoPanelUnload}, {}};

static void InitDefaultsActionProductionPanelRemoveFromQueue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionProductionPanelRemoveFromQueue_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionProductionPanelRemoveFromQueue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionProductionPanelRemoveFromQueue}, {}};

static void InitDefaultsActionToggleAutocast() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SCRAPIProtocol::_ActionToggleAutocast_default_instance_;
    new (ptr) ::SCRAPIProtocol::ActionToggleAutocast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SCRAPIProtocol::ActionToggleAutocast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionToggleAutocast =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionToggleAutocast}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ObservationUI.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UnitInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SinglePanel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultiPanel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CargoPanel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProductionPanel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionUI.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionControlGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSelectArmy.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSelectWarpGates.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSelectLarva.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionSelectIdleWorker.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionMultiPanel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionCargoPanelUnload.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionProductionPanelRemoveFromQueue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionToggleAutocast.base);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationUI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationUI, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationUI, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationUI, groups_),
  offsetof(::SCRAPIProtocol::ObservationUIDefaultTypeInternal, single_),
  offsetof(::SCRAPIProtocol::ObservationUIDefaultTypeInternal, multi_),
  offsetof(::SCRAPIProtocol::ObservationUIDefaultTypeInternal, cargo_),
  offsetof(::SCRAPIProtocol::ObservationUIDefaultTypeInternal, production_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ObservationUI, panel_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ControlGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ControlGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ControlGroup, control_group_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ControlGroup, leader_unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ControlGroup, count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, player_relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, shields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, transport_slots_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, build_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::UnitInfo, add_on_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::SinglePanel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::SinglePanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::SinglePanel, unit_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MultiPanel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MultiPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::MultiPanel, units_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::CargoPanel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::CargoPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::CargoPanel, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::CargoPanel, passengers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::CargoPanel, slots_available_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ProductionPanel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ProductionPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ProductionPanel, unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ProductionPanel, build_queue_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionUI, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionUI, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionUI, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, control_group_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, select_army_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, select_warp_gates_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, select_larva_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, select_idle_worker_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, multi_panel_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, cargo_panel_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, production_panel_),
  offsetof(::SCRAPIProtocol::ActionUIDefaultTypeInternal, toggle_autocast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionUI, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionControlGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionControlGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionControlGroup, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionControlGroup, control_group_index_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectArmy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectArmy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectArmy, selection_add_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectWarpGates, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectWarpGates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectWarpGates, selection_add_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectLarva, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectLarva, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectIdleWorker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectIdleWorker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionSelectIdleWorker, type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionMultiPanel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionMultiPanel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionMultiPanel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionMultiPanel, unit_index_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionCargoPanelUnload, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionCargoPanelUnload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionCargoPanelUnload, unit_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue, unit_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionToggleAutocast, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionToggleAutocast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SCRAPIProtocol::ActionToggleAutocast, ability_id_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::SCRAPIProtocol::ObservationUI)},
  { 16, 24, sizeof(::SCRAPIProtocol::ControlGroup)},
  { 27, 40, sizeof(::SCRAPIProtocol::UnitInfo)},
  { 48, 54, sizeof(::SCRAPIProtocol::SinglePanel)},
  { 55, 61, sizeof(::SCRAPIProtocol::MultiPanel)},
  { 62, 70, sizeof(::SCRAPIProtocol::CargoPanel)},
  { 73, 80, sizeof(::SCRAPIProtocol::ProductionPanel)},
  { 82, 97, sizeof(::SCRAPIProtocol::ActionUI)},
  { 106, 113, sizeof(::SCRAPIProtocol::ActionControlGroup)},
  { 115, 121, sizeof(::SCRAPIProtocol::ActionSelectArmy)},
  { 122, 128, sizeof(::SCRAPIProtocol::ActionSelectWarpGates)},
  { 129, 134, sizeof(::SCRAPIProtocol::ActionSelectLarva)},
  { 134, 140, sizeof(::SCRAPIProtocol::ActionSelectIdleWorker)},
  { 141, 148, sizeof(::SCRAPIProtocol::ActionMultiPanel)},
  { 150, 156, sizeof(::SCRAPIProtocol::ActionCargoPanelUnload)},
  { 157, 163, sizeof(::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue)},
  { 164, 170, sizeof(::SCRAPIProtocol::ActionToggleAutocast)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ObservationUI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ControlGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_UnitInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_SinglePanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_MultiPanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_CargoPanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ProductionPanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionUI_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionControlGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSelectArmy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSelectWarpGates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSelectLarva_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionSelectIdleWorker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionMultiPanel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionCargoPanelUnload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionProductionPanelRemoveFromQueue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SCRAPIProtocol::_ActionToggleAutocast_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ui.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\010ui.proto\022\016SCRAPIProtocol\"\206\002\n\rObservati"
      "onUI\022,\n\006groups\030\001 \003(\0132\034.SCRAPIProtocol.Co"
      "ntrolGroup\022-\n\006single\030\002 \001(\0132\033.SCRAPIProto"
      "col.SinglePanelH\000\022+\n\005multi\030\003 \001(\0132\032.SCRAP"
      "IProtocol.MultiPanelH\000\022+\n\005cargo\030\004 \001(\0132\032."
      "SCRAPIProtocol.CargoPanelH\000\0225\n\nproductio"
      "n\030\005 \001(\0132\037.SCRAPIProtocol.ProductionPanel"
      "H\000B\007\n\005panel\"T\n\014ControlGroup\022\033\n\023control_g"
      "roup_index\030\001 \001(\r\022\030\n\020leader_unit_type\030\002 \001"
      "(\r\022\r\n\005count\030\003 \001(\r\"\310\001\n\010UnitInfo\022\021\n\tunit_t"
      "ype\030\001 \001(\r\022\027\n\017player_relative\030\002 \001(\r\022\016\n\006he"
      "alth\030\003 \001(\005\022\017\n\007shields\030\004 \001(\005\022\016\n\006energy\030\005 "
      "\001(\005\022\035\n\025transport_slots_taken\030\006 \001(\005\022\026\n\016bu"
      "ild_progress\030\007 \001(\002\022(\n\006add_on\030\010 \001(\0132\030.SCR"
      "APIProtocol.UnitInfo\"5\n\013SinglePanel\022&\n\004u"
      "nit\030\001 \001(\0132\030.SCRAPIProtocol.UnitInfo\"5\n\nM"
      "ultiPanel\022\'\n\005units\030\001 \003(\0132\030.SCRAPIProtoco"
      "l.UnitInfo\"{\n\nCargoPanel\022&\n\004unit\030\001 \001(\0132\030"
      ".SCRAPIProtocol.UnitInfo\022,\n\npassengers\030\002"
      " \003(\0132\030.SCRAPIProtocol.UnitInfo\022\027\n\017slots_"
      "available\030\003 \001(\005\"h\n\017ProductionPanel\022&\n\004un"
      "it\030\001 \001(\0132\030.SCRAPIProtocol.UnitInfo\022-\n\013bu"
      "ild_queue\030\002 \003(\0132\030.SCRAPIProtocol.UnitInf"
      "o\"\332\004\n\010ActionUI\022;\n\rcontrol_group\030\001 \001(\0132\"."
      "SCRAPIProtocol.ActionControlGroupH\000\0227\n\013s"
      "elect_army\030\002 \001(\0132 .SCRAPIProtocol.Action"
      "SelectArmyH\000\022B\n\021select_warp_gates\030\003 \001(\0132"
      "%.SCRAPIProtocol.ActionSelectWarpGatesH\000"
      "\0229\n\014select_larva\030\004 \001(\0132!.SCRAPIProtocol."
      "ActionSelectLarvaH\000\022D\n\022select_idle_worke"
      "r\030\005 \001(\0132&.SCRAPIProtocol.ActionSelectIdl"
      "eWorkerH\000\0227\n\013multi_panel\030\006 \001(\0132 .SCRAPIP"
      "rotocol.ActionMultiPanelH\000\022=\n\013cargo_pane"
      "l\030\007 \001(\0132&.SCRAPIProtocol.ActionCargoPane"
      "lUnloadH\000\022P\n\020production_panel\030\010 \001(\01324.SC"
      "RAPIProtocol.ActionProductionPanelRemove"
      "FromQueueH\000\022\?\n\017toggle_autocast\030\t \001(\0132$.S"
      "CRAPIProtocol.ActionToggleAutocastH\000B\010\n\006"
      "action\"\324\001\n\022ActionControlGroup\022E\n\006action\030"
      "\001 \001(\01625.SCRAPIProtocol.ActionControlGrou"
      "p.ControlGroupAction\022\033\n\023control_group_in"
      "dex\030\002 \001(\r\"Z\n\022ControlGroupAction\022\n\n\006Recal"
      "l\020\001\022\007\n\003Set\020\002\022\n\n\006Append\020\003\022\017\n\013SetAndSteal\020"
      "\004\022\022\n\016AppendAndSteal\020\005\")\n\020ActionSelectArm"
      "y\022\025\n\rselection_add\030\001 \001(\010\".\n\025ActionSelect"
      "WarpGates\022\025\n\rselection_add\030\001 \001(\010\"\023\n\021Acti"
      "onSelectLarva\"\202\001\n\026ActionSelectIdleWorker"
      "\0229\n\004type\030\001 \001(\0162+.SCRAPIProtocol.ActionSe"
      "lectIdleWorker.Type\"-\n\004Type\022\007\n\003Set\020\001\022\007\n\003"
      "Add\020\002\022\007\n\003All\020\003\022\n\n\006AddAll\020\004\"\263\001\n\020ActionMul"
      "tiPanel\0223\n\004type\030\001 \001(\0162%.SCRAPIProtocol.A"
      "ctionMultiPanel.Type\022\022\n\nunit_index\030\002 \001(\005"
      "\"V\n\004Type\022\020\n\014SingleSelect\020\001\022\020\n\014DeselectUn"
      "it\020\002\022\023\n\017SelectAllOfType\020\003\022\025\n\021DeselectAll"
      "OfType\020\004\",\n\026ActionCargoPanelUnload\022\022\n\nun"
      "it_index\030\001 \001(\005\":\n$ActionProductionPanelR"
      "emoveFromQueue\022\022\n\nunit_index\030\001 \001(\005\"*\n\024Ac"
      "tionToggleAutocast\022\022\n\nability_id\030\001 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ui.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ui_2eproto
namespace SCRAPIProtocol {
const ::google::protobuf::EnumDescriptor* ActionControlGroup_ControlGroupAction_descriptor() {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ui_2eproto::file_level_enum_descriptors[0];
}
bool ActionControlGroup_ControlGroupAction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionControlGroup_ControlGroupAction ActionControlGroup::Recall;
const ActionControlGroup_ControlGroupAction ActionControlGroup::Set;
const ActionControlGroup_ControlGroupAction ActionControlGroup::Append;
const ActionControlGroup_ControlGroupAction ActionControlGroup::SetAndSteal;
const ActionControlGroup_ControlGroupAction ActionControlGroup::AppendAndSteal;
const ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MIN;
const ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MAX;
const int ActionControlGroup::ControlGroupAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActionSelectIdleWorker_Type_descriptor() {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ui_2eproto::file_level_enum_descriptors[1];
}
bool ActionSelectIdleWorker_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Set;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Add;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::All;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::AddAll;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MIN;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MAX;
const int ActionSelectIdleWorker::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActionMultiPanel_Type_descriptor() {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ui_2eproto::file_level_enum_descriptors[2];
}
bool ActionMultiPanel_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionMultiPanel_Type ActionMultiPanel::SingleSelect;
const ActionMultiPanel_Type ActionMultiPanel::DeselectUnit;
const ActionMultiPanel_Type ActionMultiPanel::SelectAllOfType;
const ActionMultiPanel_Type ActionMultiPanel::DeselectAllOfType;
const ActionMultiPanel_Type ActionMultiPanel::Type_MIN;
const ActionMultiPanel_Type ActionMultiPanel::Type_MAX;
const int ActionMultiPanel::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ObservationUI::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ObservationUI_default_instance_.single_ = const_cast< ::SCRAPIProtocol::SinglePanel*>(
      ::SCRAPIProtocol::SinglePanel::internal_default_instance());
  ::SCRAPIProtocol::_ObservationUI_default_instance_.multi_ = const_cast< ::SCRAPIProtocol::MultiPanel*>(
      ::SCRAPIProtocol::MultiPanel::internal_default_instance());
  ::SCRAPIProtocol::_ObservationUI_default_instance_.cargo_ = const_cast< ::SCRAPIProtocol::CargoPanel*>(
      ::SCRAPIProtocol::CargoPanel::internal_default_instance());
  ::SCRAPIProtocol::_ObservationUI_default_instance_.production_ = const_cast< ::SCRAPIProtocol::ProductionPanel*>(
      ::SCRAPIProtocol::ProductionPanel::internal_default_instance());
}
void ObservationUI::set_allocated_single(::SCRAPIProtocol::SinglePanel* single) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_panel();
  if (single) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      single = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    panel_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ObservationUI.single)
}
void ObservationUI::set_allocated_multi(::SCRAPIProtocol::MultiPanel* multi) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_panel();
  if (multi) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multi = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    panel_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ObservationUI.multi)
}
void ObservationUI::set_allocated_cargo(::SCRAPIProtocol::CargoPanel* cargo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_panel();
  if (cargo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cargo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cargo, submessage_arena);
    }
    set_has_cargo();
    panel_.cargo_ = cargo;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ObservationUI.cargo)
}
void ObservationUI::set_allocated_production(::SCRAPIProtocol::ProductionPanel* production) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_panel();
  if (production) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      production = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, production, submessage_arena);
    }
    set_has_production();
    panel_.production_ = production;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ObservationUI.production)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationUI::kGroupsFieldNumber;
const int ObservationUI::kSingleFieldNumber;
const int ObservationUI::kMultiFieldNumber;
const int ObservationUI::kCargoFieldNumber;
const int ObservationUI::kProductionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationUI::ObservationUI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ObservationUI.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ObservationUI)
}
ObservationUI::ObservationUI(const ObservationUI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_panel();
  switch (from.panel_case()) {
    case kSingle: {
      mutable_single()->::SCRAPIProtocol::SinglePanel::MergeFrom(from.single());
      break;
    }
    case kMulti: {
      mutable_multi()->::SCRAPIProtocol::MultiPanel::MergeFrom(from.multi());
      break;
    }
    case kCargo: {
      mutable_cargo()->::SCRAPIProtocol::CargoPanel::MergeFrom(from.cargo());
      break;
    }
    case kProduction: {
      mutable_production()->::SCRAPIProtocol::ProductionPanel::MergeFrom(from.production());
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ObservationUI)
}

void ObservationUI::SharedCtor() {
  clear_has_panel();
}

ObservationUI::~ObservationUI() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ObservationUI)
  SharedDtor();
}

void ObservationUI::SharedDtor() {
  if (has_panel()) {
    clear_panel();
  }
}

void ObservationUI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObservationUI::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObservationUI& ObservationUI::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ObservationUI.base);
  return *internal_default_instance();
}


void ObservationUI::clear_panel() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ObservationUI)
  switch (panel_case()) {
    case kSingle: {
      delete panel_.single_;
      break;
    }
    case kMulti: {
      delete panel_.multi_;
      break;
    }
    case kCargo: {
      delete panel_.cargo_;
      break;
    }
    case kProduction: {
      delete panel_.production_;
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PANEL_NOT_SET;
}


void ObservationUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ObservationUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  clear_panel();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObservationUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ObservationUI)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.ControlGroup groups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.SinglePanel single = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_single()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.MultiPanel multi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.CargoPanel cargo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cargo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ProductionPanel production = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_production()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ObservationUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ObservationUI)
  return false;
#undef DO_
}

void ObservationUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ObservationUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.ControlGroup groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->groups(static_cast<int>(i)),
      output);
  }

  switch (panel_case()) {
    case kSingle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_single(), output);
      break;
    case kMulti:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_multi(), output);
      break;
    case kCargo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_cargo(), output);
      break;
    case kProduction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_production(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ObservationUI)
}

::google::protobuf::uint8* ObservationUI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ObservationUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.ControlGroup groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->groups(static_cast<int>(i)), deterministic, target);
  }

  switch (panel_case()) {
    case kSingle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_single(), deterministic, target);
      break;
    case kMulti:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_multi(), deterministic, target);
      break;
    case kCargo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_cargo(), deterministic, target);
      break;
    case kProduction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_production(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ObservationUI)
  return target;
}

size_t ObservationUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ObservationUI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.ControlGroup groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  switch (panel_case()) {
    // optional .SCRAPIProtocol.SinglePanel single = 2;
    case kSingle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *panel_.single_);
      break;
    }
    // optional .SCRAPIProtocol.MultiPanel multi = 3;
    case kMulti: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *panel_.multi_);
      break;
    }
    // optional .SCRAPIProtocol.CargoPanel cargo = 4;
    case kCargo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *panel_.cargo_);
      break;
    }
    // optional .SCRAPIProtocol.ProductionPanel production = 5;
    case kProduction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *panel_.production_);
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObservationUI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ObservationUI)
  GOOGLE_DCHECK_NE(&from, this);
  const ObservationUI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationUI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ObservationUI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ObservationUI)
    MergeFrom(*source);
  }
}

void ObservationUI::MergeFrom(const ObservationUI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ObservationUI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  switch (from.panel_case()) {
    case kSingle: {
      mutable_single()->::SCRAPIProtocol::SinglePanel::MergeFrom(from.single());
      break;
    }
    case kMulti: {
      mutable_multi()->::SCRAPIProtocol::MultiPanel::MergeFrom(from.multi());
      break;
    }
    case kCargo: {
      mutable_cargo()->::SCRAPIProtocol::CargoPanel::MergeFrom(from.cargo());
      break;
    }
    case kProduction: {
      mutable_production()->::SCRAPIProtocol::ProductionPanel::MergeFrom(from.production());
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
}

void ObservationUI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ObservationUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationUI::CopyFrom(const ObservationUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ObservationUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationUI::IsInitialized() const {
  return true;
}

void ObservationUI::Swap(ObservationUI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationUI::InternalSwap(ObservationUI* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  swap(panel_, other->panel_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObservationUI::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlGroup::kControlGroupIndexFieldNumber;
const int ControlGroup::kLeaderUnitTypeFieldNumber;
const int ControlGroup::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlGroup::ControlGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ControlGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ControlGroup)
}
ControlGroup::ControlGroup(const ControlGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&control_group_index_, &from.control_group_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&control_group_index_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ControlGroup)
}

void ControlGroup::SharedCtor() {
  ::memset(&control_group_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&control_group_index_)) + sizeof(count_));
}

ControlGroup::~ControlGroup() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ControlGroup)
  SharedDtor();
}

void ControlGroup::SharedDtor() {
}

void ControlGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlGroup::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlGroup& ControlGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ControlGroup.base);
  return *internal_default_instance();
}


void ControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&control_group_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&control_group_index_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ControlGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 control_group_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_control_group_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_group_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_unit_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_leader_unit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ControlGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ControlGroup)
  return false;
#undef DO_
}

void ControlGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 control_group_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->control_group_index(), output);
  }

  // optional uint32 leader_unit_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_unit_type(), output);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ControlGroup)
}

::google::protobuf::uint8* ControlGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 control_group_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->control_group_index(), target);
  }

  // optional uint32 leader_unit_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_unit_type(), target);
  }

  // optional uint32 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ControlGroup)
  return target;
}

size_t ControlGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ControlGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 control_group_index = 1;
    if (has_control_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_group_index());
    }

    // optional uint32 leader_unit_type = 2;
    if (has_leader_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_unit_type());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ControlGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ControlGroup)
    MergeFrom(*source);
  }
}

void ControlGroup::MergeFrom(const ControlGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      control_group_index_ = from.control_group_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      leader_unit_type_ = from.leader_unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlGroup::CopyFrom(const ControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGroup::IsInitialized() const {
  return true;
}

void ControlGroup::Swap(ControlGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlGroup::InternalSwap(ControlGroup* other) {
  using std::swap;
  swap(control_group_index_, other->control_group_index_);
  swap(leader_unit_type_, other->leader_unit_type_);
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlGroup::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UnitInfo::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_UnitInfo_default_instance_._instance.get_mutable()->add_on_ = const_cast< ::SCRAPIProtocol::UnitInfo*>(
      ::SCRAPIProtocol::UnitInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitInfo::kUnitTypeFieldNumber;
const int UnitInfo::kPlayerRelativeFieldNumber;
const int UnitInfo::kHealthFieldNumber;
const int UnitInfo::kShieldsFieldNumber;
const int UnitInfo::kEnergyFieldNumber;
const int UnitInfo::kTransportSlotsTakenFieldNumber;
const int UnitInfo::kBuildProgressFieldNumber;
const int UnitInfo::kAddOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitInfo::UnitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_UnitInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.UnitInfo)
}
UnitInfo::UnitInfo(const UnitInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_add_on()) {
    add_on_ = new ::SCRAPIProtocol::UnitInfo(*from.add_on_);
  } else {
    add_on_ = NULL;
  }
  ::memcpy(&unit_type_, &from.unit_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_progress_) -
    reinterpret_cast<char*>(&unit_type_)) + sizeof(build_progress_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.UnitInfo)
}

void UnitInfo::SharedCtor() {
  ::memset(&add_on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_progress_) -
      reinterpret_cast<char*>(&add_on_)) + sizeof(build_progress_));
}

UnitInfo::~UnitInfo() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.UnitInfo)
  SharedDtor();
}

void UnitInfo::SharedDtor() {
  if (this != internal_default_instance()) delete add_on_;
}

void UnitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UnitInfo::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitInfo& UnitInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_UnitInfo.base);
  return *internal_default_instance();
}


void UnitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.UnitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(add_on_ != NULL);
    add_on_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&unit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_progress_) -
        reinterpret_cast<char*>(&unit_type_)) + sizeof(build_progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.UnitInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_relative = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_player_relative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_relative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 health = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shields = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_shields();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 energy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_energy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_slots_taken = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_transport_slots_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_slots_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float build_progress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_build_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.UnitInfo add_on = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_add_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.UnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.UnitInfo)
  return false;
#undef DO_
}

void UnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.UnitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_type(), output);
  }

  // optional uint32 player_relative = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_relative(), output);
  }

  // optional int32 health = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health(), output);
  }

  // optional int32 shields = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shields(), output);
  }

  // optional int32 energy = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }

  // optional int32 transport_slots_taken = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->transport_slots_taken(), output);
  }

  // optional float build_progress = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->build_progress(), output);
  }

  // optional .SCRAPIProtocol.UnitInfo add_on = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_add_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.UnitInfo)
}

::google::protobuf::uint8* UnitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.UnitInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unit_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_type(), target);
  }

  // optional uint32 player_relative = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_relative(), target);
  }

  // optional int32 health = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health(), target);
  }

  // optional int32 shields = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shields(), target);
  }

  // optional int32 energy = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }

  // optional int32 transport_slots_taken = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->transport_slots_taken(), target);
  }

  // optional float build_progress = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->build_progress(), target);
  }

  // optional .SCRAPIProtocol.UnitInfo add_on = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_add_on(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.UnitInfo)
  return target;
}

size_t UnitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.UnitInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .SCRAPIProtocol.UnitInfo add_on = 8;
    if (has_add_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *add_on_);
    }

    // optional uint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional uint32 player_relative = 2;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_relative());
    }

    // optional int32 health = 3;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 shields = 4;
    if (has_shields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shields());
    }

    // optional int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

    // optional int32 transport_slots_taken = 6;
    if (has_transport_slots_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_slots_taken());
    }

    // optional float build_progress = 7;
    if (has_build_progress()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.UnitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.UnitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.UnitInfo)
    MergeFrom(*source);
  }
}

void UnitInfo::MergeFrom(const UnitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.UnitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_add_on()->::SCRAPIProtocol::UnitInfo::MergeFrom(from.add_on());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_relative_ = from.player_relative_;
    }
    if (cached_has_bits & 0x00000008u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000010u) {
      shields_ = from.shields_;
    }
    if (cached_has_bits & 0x00000020u) {
      energy_ = from.energy_;
    }
    if (cached_has_bits & 0x00000040u) {
      transport_slots_taken_ = from.transport_slots_taken_;
    }
    if (cached_has_bits & 0x00000080u) {
      build_progress_ = from.build_progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.UnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitInfo::CopyFrom(const UnitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.UnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInfo::IsInitialized() const {
  return true;
}

void UnitInfo::Swap(UnitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitInfo::InternalSwap(UnitInfo* other) {
  using std::swap;
  swap(add_on_, other->add_on_);
  swap(unit_type_, other->unit_type_);
  swap(player_relative_, other->player_relative_);
  swap(health_, other->health_);
  swap(shields_, other->shields_);
  swap(energy_, other->energy_);
  swap(transport_slots_taken_, other->transport_slots_taken_);
  swap(build_progress_, other->build_progress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UnitInfo::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SinglePanel::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_SinglePanel_default_instance_._instance.get_mutable()->unit_ = const_cast< ::SCRAPIProtocol::UnitInfo*>(
      ::SCRAPIProtocol::UnitInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePanel::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePanel::SinglePanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_SinglePanel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.SinglePanel)
}
SinglePanel::SinglePanel(const SinglePanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unit()) {
    unit_ = new ::SCRAPIProtocol::UnitInfo(*from.unit_);
  } else {
    unit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.SinglePanel)
}

void SinglePanel::SharedCtor() {
  unit_ = NULL;
}

SinglePanel::~SinglePanel() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.SinglePanel)
  SharedDtor();
}

void SinglePanel::SharedDtor() {
  if (this != internal_default_instance()) delete unit_;
}

void SinglePanel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SinglePanel::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SinglePanel& SinglePanel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_SinglePanel.base);
  return *internal_default_instance();
}


void SinglePanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.SinglePanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_ != NULL);
    unit_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SinglePanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.SinglePanel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.UnitInfo unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.SinglePanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.SinglePanel)
  return false;
#undef DO_
}

void SinglePanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.SinglePanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.SinglePanel)
}

::google::protobuf::uint8* SinglePanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.SinglePanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.SinglePanel)
  return target;
}

size_t SinglePanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.SinglePanel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SinglePanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.SinglePanel)
  GOOGLE_DCHECK_NE(&from, this);
  const SinglePanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SinglePanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.SinglePanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.SinglePanel)
    MergeFrom(*source);
  }
}

void SinglePanel::MergeFrom(const SinglePanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.SinglePanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unit()) {
    mutable_unit()->::SCRAPIProtocol::UnitInfo::MergeFrom(from.unit());
  }
}

void SinglePanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.SinglePanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePanel::CopyFrom(const SinglePanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.SinglePanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePanel::IsInitialized() const {
  return true;
}

void SinglePanel::Swap(SinglePanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePanel::InternalSwap(SinglePanel* other) {
  using std::swap;
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SinglePanel::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultiPanel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiPanel::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiPanel::MultiPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_MultiPanel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.MultiPanel)
}
MultiPanel::MultiPanel(const MultiPanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.MultiPanel)
}

void MultiPanel::SharedCtor() {
}

MultiPanel::~MultiPanel() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.MultiPanel)
  SharedDtor();
}

void MultiPanel::SharedDtor() {
}

void MultiPanel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultiPanel::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiPanel& MultiPanel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_MultiPanel.base);
  return *internal_default_instance();
}


void MultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.MultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultiPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.MultiPanel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SCRAPIProtocol.UnitInfo units = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.MultiPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.MultiPanel)
  return false;
#undef DO_
}

void MultiPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.MultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.UnitInfo units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->units(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.MultiPanel)
}

::google::protobuf::uint8* MultiPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.MultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SCRAPIProtocol.UnitInfo units = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->units(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.MultiPanel)
  return target;
}

size_t MultiPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.MultiPanel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.UnitInfo units = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->units(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.MultiPanel)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiPanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.MultiPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.MultiPanel)
    MergeFrom(*source);
  }
}

void MultiPanel::MergeFrom(const MultiPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.MultiPanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
}

void MultiPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.MultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiPanel::CopyFrom(const MultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.MultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPanel::IsInitialized() const {
  return true;
}

void MultiPanel::Swap(MultiPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiPanel::InternalSwap(MultiPanel* other) {
  using std::swap;
  CastToBase(&units_)->InternalSwap(CastToBase(&other->units_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultiPanel::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CargoPanel::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_CargoPanel_default_instance_._instance.get_mutable()->unit_ = const_cast< ::SCRAPIProtocol::UnitInfo*>(
      ::SCRAPIProtocol::UnitInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CargoPanel::kUnitFieldNumber;
const int CargoPanel::kPassengersFieldNumber;
const int CargoPanel::kSlotsAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CargoPanel::CargoPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_CargoPanel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.CargoPanel)
}
CargoPanel::CargoPanel(const CargoPanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      passengers_(from.passengers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unit()) {
    unit_ = new ::SCRAPIProtocol::UnitInfo(*from.unit_);
  } else {
    unit_ = NULL;
  }
  slots_available_ = from.slots_available_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.CargoPanel)
}

void CargoPanel::SharedCtor() {
  ::memset(&unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slots_available_) -
      reinterpret_cast<char*>(&unit_)) + sizeof(slots_available_));
}

CargoPanel::~CargoPanel() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.CargoPanel)
  SharedDtor();
}

void CargoPanel::SharedDtor() {
  if (this != internal_default_instance()) delete unit_;
}

void CargoPanel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CargoPanel::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CargoPanel& CargoPanel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_CargoPanel.base);
  return *internal_default_instance();
}


void CargoPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.CargoPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passengers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_ != NULL);
    unit_->Clear();
  }
  slots_available_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CargoPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.CargoPanel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.UnitInfo unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.UnitInfo passengers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passengers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slots_available = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_slots_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slots_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.CargoPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.CargoPanel)
  return false;
#undef DO_
}

void CargoPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.CargoPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  // repeated .SCRAPIProtocol.UnitInfo passengers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passengers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->passengers(static_cast<int>(i)),
      output);
  }

  // optional int32 slots_available = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slots_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.CargoPanel)
}

::google::protobuf::uint8* CargoPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.CargoPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  // repeated .SCRAPIProtocol.UnitInfo passengers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passengers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->passengers(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 slots_available = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slots_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.CargoPanel)
  return target;
}

size_t CargoPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.CargoPanel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.UnitInfo passengers = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->passengers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passengers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SCRAPIProtocol.UnitInfo unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *unit_);
    }

    // optional int32 slots_available = 3;
    if (has_slots_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slots_available());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CargoPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.CargoPanel)
  GOOGLE_DCHECK_NE(&from, this);
  const CargoPanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CargoPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.CargoPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.CargoPanel)
    MergeFrom(*source);
  }
}

void CargoPanel::MergeFrom(const CargoPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.CargoPanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passengers_.MergeFrom(from.passengers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_unit()->::SCRAPIProtocol::UnitInfo::MergeFrom(from.unit());
    }
    if (cached_has_bits & 0x00000002u) {
      slots_available_ = from.slots_available_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CargoPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.CargoPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CargoPanel::CopyFrom(const CargoPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.CargoPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoPanel::IsInitialized() const {
  return true;
}

void CargoPanel::Swap(CargoPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CargoPanel::InternalSwap(CargoPanel* other) {
  using std::swap;
  CastToBase(&passengers_)->InternalSwap(CastToBase(&other->passengers_));
  swap(unit_, other->unit_);
  swap(slots_available_, other->slots_available_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CargoPanel::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ProductionPanel::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ProductionPanel_default_instance_._instance.get_mutable()->unit_ = const_cast< ::SCRAPIProtocol::UnitInfo*>(
      ::SCRAPIProtocol::UnitInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductionPanel::kUnitFieldNumber;
const int ProductionPanel::kBuildQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductionPanel::ProductionPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ProductionPanel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ProductionPanel)
}
ProductionPanel::ProductionPanel(const ProductionPanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      build_queue_(from.build_queue_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unit()) {
    unit_ = new ::SCRAPIProtocol::UnitInfo(*from.unit_);
  } else {
    unit_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ProductionPanel)
}

void ProductionPanel::SharedCtor() {
  unit_ = NULL;
}

ProductionPanel::~ProductionPanel() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ProductionPanel)
  SharedDtor();
}

void ProductionPanel::SharedDtor() {
  if (this != internal_default_instance()) delete unit_;
}

void ProductionPanel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ProductionPanel::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductionPanel& ProductionPanel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ProductionPanel.base);
  return *internal_default_instance();
}


void ProductionPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ProductionPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_queue_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(unit_ != NULL);
    unit_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProductionPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ProductionPanel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.UnitInfo unit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SCRAPIProtocol.UnitInfo build_queue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_build_queue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ProductionPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ProductionPanel)
  return false;
#undef DO_
}

void ProductionPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ProductionPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_unit(), output);
  }

  // repeated .SCRAPIProtocol.UnitInfo build_queue = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->build_queue_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->build_queue(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ProductionPanel)
}

::google::protobuf::uint8* ProductionPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ProductionPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_unit(), deterministic, target);
  }

  // repeated .SCRAPIProtocol.UnitInfo build_queue = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->build_queue_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->build_queue(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ProductionPanel)
  return target;
}

size_t ProductionPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ProductionPanel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SCRAPIProtocol.UnitInfo build_queue = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->build_queue_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->build_queue(static_cast<int>(i)));
    }
  }

  // optional .SCRAPIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *unit_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductionPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ProductionPanel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductionPanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductionPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ProductionPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ProductionPanel)
    MergeFrom(*source);
  }
}

void ProductionPanel::MergeFrom(const ProductionPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ProductionPanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  build_queue_.MergeFrom(from.build_queue_);
  if (from.has_unit()) {
    mutable_unit()->::SCRAPIProtocol::UnitInfo::MergeFrom(from.unit());
  }
}

void ProductionPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ProductionPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductionPanel::CopyFrom(const ProductionPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ProductionPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductionPanel::IsInitialized() const {
  return true;
}

void ProductionPanel::Swap(ProductionPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductionPanel::InternalSwap(ProductionPanel* other) {
  using std::swap;
  CastToBase(&build_queue_)->InternalSwap(CastToBase(&other->build_queue_));
  swap(unit_, other->unit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProductionPanel::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionUI::InitAsDefaultInstance() {
  ::SCRAPIProtocol::_ActionUI_default_instance_.control_group_ = const_cast< ::SCRAPIProtocol::ActionControlGroup*>(
      ::SCRAPIProtocol::ActionControlGroup::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.select_army_ = const_cast< ::SCRAPIProtocol::ActionSelectArmy*>(
      ::SCRAPIProtocol::ActionSelectArmy::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.select_warp_gates_ = const_cast< ::SCRAPIProtocol::ActionSelectWarpGates*>(
      ::SCRAPIProtocol::ActionSelectWarpGates::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.select_larva_ = const_cast< ::SCRAPIProtocol::ActionSelectLarva*>(
      ::SCRAPIProtocol::ActionSelectLarva::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.select_idle_worker_ = const_cast< ::SCRAPIProtocol::ActionSelectIdleWorker*>(
      ::SCRAPIProtocol::ActionSelectIdleWorker::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.multi_panel_ = const_cast< ::SCRAPIProtocol::ActionMultiPanel*>(
      ::SCRAPIProtocol::ActionMultiPanel::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.cargo_panel_ = const_cast< ::SCRAPIProtocol::ActionCargoPanelUnload*>(
      ::SCRAPIProtocol::ActionCargoPanelUnload::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.production_panel_ = const_cast< ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue*>(
      ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue::internal_default_instance());
  ::SCRAPIProtocol::_ActionUI_default_instance_.toggle_autocast_ = const_cast< ::SCRAPIProtocol::ActionToggleAutocast*>(
      ::SCRAPIProtocol::ActionToggleAutocast::internal_default_instance());
}
void ActionUI::set_allocated_control_group(::SCRAPIProtocol::ActionControlGroup* control_group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (control_group) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      control_group = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, control_group, submessage_arena);
    }
    set_has_control_group();
    action_.control_group_ = control_group;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.control_group)
}
void ActionUI::set_allocated_select_army(::SCRAPIProtocol::ActionSelectArmy* select_army) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (select_army) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select_army = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select_army, submessage_arena);
    }
    set_has_select_army();
    action_.select_army_ = select_army;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.select_army)
}
void ActionUI::set_allocated_select_warp_gates(::SCRAPIProtocol::ActionSelectWarpGates* select_warp_gates) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (select_warp_gates) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select_warp_gates = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select_warp_gates, submessage_arena);
    }
    set_has_select_warp_gates();
    action_.select_warp_gates_ = select_warp_gates;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.select_warp_gates)
}
void ActionUI::set_allocated_select_larva(::SCRAPIProtocol::ActionSelectLarva* select_larva) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (select_larva) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select_larva = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select_larva, submessage_arena);
    }
    set_has_select_larva();
    action_.select_larva_ = select_larva;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.select_larva)
}
void ActionUI::set_allocated_select_idle_worker(::SCRAPIProtocol::ActionSelectIdleWorker* select_idle_worker) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (select_idle_worker) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      select_idle_worker = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, select_idle_worker, submessage_arena);
    }
    set_has_select_idle_worker();
    action_.select_idle_worker_ = select_idle_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.select_idle_worker)
}
void ActionUI::set_allocated_multi_panel(::SCRAPIProtocol::ActionMultiPanel* multi_panel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (multi_panel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      multi_panel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, multi_panel, submessage_arena);
    }
    set_has_multi_panel();
    action_.multi_panel_ = multi_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.multi_panel)
}
void ActionUI::set_allocated_cargo_panel(::SCRAPIProtocol::ActionCargoPanelUnload* cargo_panel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (cargo_panel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cargo_panel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cargo_panel, submessage_arena);
    }
    set_has_cargo_panel();
    action_.cargo_panel_ = cargo_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.cargo_panel)
}
void ActionUI::set_allocated_production_panel(::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue* production_panel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (production_panel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      production_panel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, production_panel, submessage_arena);
    }
    set_has_production_panel();
    action_.production_panel_ = production_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.production_panel)
}
void ActionUI::set_allocated_toggle_autocast(::SCRAPIProtocol::ActionToggleAutocast* toggle_autocast) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (toggle_autocast) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      toggle_autocast = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, toggle_autocast, submessage_arena);
    }
    set_has_toggle_autocast();
    action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SCRAPIProtocol.ActionUI.toggle_autocast)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionUI::kControlGroupFieldNumber;
const int ActionUI::kSelectArmyFieldNumber;
const int ActionUI::kSelectWarpGatesFieldNumber;
const int ActionUI::kSelectLarvaFieldNumber;
const int ActionUI::kSelectIdleWorkerFieldNumber;
const int ActionUI::kMultiPanelFieldNumber;
const int ActionUI::kCargoPanelFieldNumber;
const int ActionUI::kProductionPanelFieldNumber;
const int ActionUI::kToggleAutocastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionUI::ActionUI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionUI.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionUI)
}
ActionUI::ActionUI(const ActionUI& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kControlGroup: {
      mutable_control_group()->::SCRAPIProtocol::ActionControlGroup::MergeFrom(from.control_group());
      break;
    }
    case kSelectArmy: {
      mutable_select_army()->::SCRAPIProtocol::ActionSelectArmy::MergeFrom(from.select_army());
      break;
    }
    case kSelectWarpGates: {
      mutable_select_warp_gates()->::SCRAPIProtocol::ActionSelectWarpGates::MergeFrom(from.select_warp_gates());
      break;
    }
    case kSelectLarva: {
      mutable_select_larva()->::SCRAPIProtocol::ActionSelectLarva::MergeFrom(from.select_larva());
      break;
    }
    case kSelectIdleWorker: {
      mutable_select_idle_worker()->::SCRAPIProtocol::ActionSelectIdleWorker::MergeFrom(from.select_idle_worker());
      break;
    }
    case kMultiPanel: {
      mutable_multi_panel()->::SCRAPIProtocol::ActionMultiPanel::MergeFrom(from.multi_panel());
      break;
    }
    case kCargoPanel: {
      mutable_cargo_panel()->::SCRAPIProtocol::ActionCargoPanelUnload::MergeFrom(from.cargo_panel());
      break;
    }
    case kProductionPanel: {
      mutable_production_panel()->::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue::MergeFrom(from.production_panel());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SCRAPIProtocol::ActionToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionUI)
}

void ActionUI::SharedCtor() {
  clear_has_action();
}

ActionUI::~ActionUI() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionUI)
  SharedDtor();
}

void ActionUI::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void ActionUI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionUI::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionUI& ActionUI::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionUI.base);
  return *internal_default_instance();
}


void ActionUI::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SCRAPIProtocol.ActionUI)
  switch (action_case()) {
    case kControlGroup: {
      delete action_.control_group_;
      break;
    }
    case kSelectArmy: {
      delete action_.select_army_;
      break;
    }
    case kSelectWarpGates: {
      delete action_.select_warp_gates_;
      break;
    }
    case kSelectLarva: {
      delete action_.select_larva_;
      break;
    }
    case kSelectIdleWorker: {
      delete action_.select_idle_worker_;
      break;
    }
    case kMultiPanel: {
      delete action_.multi_panel_;
      break;
    }
    case kCargoPanel: {
      delete action_.cargo_panel_;
      break;
    }
    case kProductionPanel: {
      delete action_.production_panel_;
      break;
    }
    case kToggleAutocast: {
      delete action_.toggle_autocast_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionUI)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionControlGroup control_group = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_control_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSelectArmy select_army = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select_army()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSelectWarpGates select_warp_gates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select_warp_gates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSelectLarva select_larva = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select_larva()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_select_idle_worker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionMultiPanel multi_panel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_panel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionCargoPanelUnload cargo_panel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cargo_panel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_production_panel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SCRAPIProtocol.ActionToggleAutocast toggle_autocast = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_toggle_autocast()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionUI)
  return false;
#undef DO_
}

void ActionUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kControlGroup:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_control_group(), output);
      break;
    case kSelectArmy:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_select_army(), output);
      break;
    case kSelectWarpGates:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_select_warp_gates(), output);
      break;
    case kSelectLarva:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_select_larva(), output);
      break;
    case kSelectIdleWorker:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_select_idle_worker(), output);
      break;
    case kMultiPanel:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_multi_panel(), output);
      break;
    case kCargoPanel:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_cargo_panel(), output);
      break;
    case kProductionPanel:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_production_panel(), output);
      break;
    case kToggleAutocast:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_toggle_autocast(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionUI)
}

::google::protobuf::uint8* ActionUI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionUI)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kControlGroup:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_control_group(), deterministic, target);
      break;
    case kSelectArmy:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_select_army(), deterministic, target);
      break;
    case kSelectWarpGates:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_select_warp_gates(), deterministic, target);
      break;
    case kSelectLarva:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_select_larva(), deterministic, target);
      break;
    case kSelectIdleWorker:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_select_idle_worker(), deterministic, target);
      break;
    case kMultiPanel:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_multi_panel(), deterministic, target);
      break;
    case kCargoPanel:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_cargo_panel(), deterministic, target);
      break;
    case kProductionPanel:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_production_panel(), deterministic, target);
      break;
    case kToggleAutocast:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_toggle_autocast(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionUI)
  return target;
}

size_t ActionUI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionUI)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (action_case()) {
    // optional .SCRAPIProtocol.ActionControlGroup control_group = 1;
    case kControlGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.control_group_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSelectArmy select_army = 2;
    case kSelectArmy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.select_army_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSelectWarpGates select_warp_gates = 3;
    case kSelectWarpGates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.select_warp_gates_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSelectLarva select_larva = 4;
    case kSelectLarva: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.select_larva_);
      break;
    }
    // optional .SCRAPIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
    case kSelectIdleWorker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.select_idle_worker_);
      break;
    }
    // optional .SCRAPIProtocol.ActionMultiPanel multi_panel = 6;
    case kMultiPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.multi_panel_);
      break;
    }
    // optional .SCRAPIProtocol.ActionCargoPanelUnload cargo_panel = 7;
    case kCargoPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.cargo_panel_);
      break;
    }
    // optional .SCRAPIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
    case kProductionPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.production_panel_);
      break;
    }
    // optional .SCRAPIProtocol.ActionToggleAutocast toggle_autocast = 9;
    case kToggleAutocast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.toggle_autocast_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionUI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionUI)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionUI* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionUI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionUI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionUI)
    MergeFrom(*source);
  }
}

void ActionUI::MergeFrom(const ActionUI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionUI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kControlGroup: {
      mutable_control_group()->::SCRAPIProtocol::ActionControlGroup::MergeFrom(from.control_group());
      break;
    }
    case kSelectArmy: {
      mutable_select_army()->::SCRAPIProtocol::ActionSelectArmy::MergeFrom(from.select_army());
      break;
    }
    case kSelectWarpGates: {
      mutable_select_warp_gates()->::SCRAPIProtocol::ActionSelectWarpGates::MergeFrom(from.select_warp_gates());
      break;
    }
    case kSelectLarva: {
      mutable_select_larva()->::SCRAPIProtocol::ActionSelectLarva::MergeFrom(from.select_larva());
      break;
    }
    case kSelectIdleWorker: {
      mutable_select_idle_worker()->::SCRAPIProtocol::ActionSelectIdleWorker::MergeFrom(from.select_idle_worker());
      break;
    }
    case kMultiPanel: {
      mutable_multi_panel()->::SCRAPIProtocol::ActionMultiPanel::MergeFrom(from.multi_panel());
      break;
    }
    case kCargoPanel: {
      mutable_cargo_panel()->::SCRAPIProtocol::ActionCargoPanelUnload::MergeFrom(from.cargo_panel());
      break;
    }
    case kProductionPanel: {
      mutable_production_panel()->::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue::MergeFrom(from.production_panel());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SCRAPIProtocol::ActionToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ActionUI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionUI::CopyFrom(const ActionUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionUI::IsInitialized() const {
  return true;
}

void ActionUI::Swap(ActionUI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionUI::InternalSwap(ActionUI* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionUI::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionControlGroup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionControlGroup::kActionFieldNumber;
const int ActionControlGroup::kControlGroupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionControlGroup::ActionControlGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionControlGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionControlGroup)
}
ActionControlGroup::ActionControlGroup(const ActionControlGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&control_group_index_, &from.control_group_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&control_group_index_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionControlGroup)
}

void ActionControlGroup::SharedCtor() {
  control_group_index_ = 0u;
  action_ = 1;
}

ActionControlGroup::~ActionControlGroup() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionControlGroup)
  SharedDtor();
}

void ActionControlGroup::SharedDtor() {
}

void ActionControlGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionControlGroup::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionControlGroup& ActionControlGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionControlGroup.base);
  return *internal_default_instance();
}


void ActionControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    control_group_index_ = 0u;
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionControlGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionControlGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionControlGroup.ControlGroupAction action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::ActionControlGroup_ControlGroupAction_IsValid(value)) {
            set_action(static_cast< ::SCRAPIProtocol::ActionControlGroup_ControlGroupAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 control_group_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_control_group_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_group_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionControlGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionControlGroup)
  return false;
#undef DO_
}

void ActionControlGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional uint32 control_group_index = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_group_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionControlGroup)
}

::google::protobuf::uint8* ActionControlGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionControlGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional uint32 control_group_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_group_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionControlGroup)
  return target;
}

size_t ActionControlGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionControlGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 control_group_index = 2;
    if (has_control_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_group_index());
    }

    // optional .SCRAPIProtocol.ActionControlGroup.ControlGroupAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionControlGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionControlGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionControlGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionControlGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionControlGroup)
    MergeFrom(*source);
  }
}

void ActionControlGroup::MergeFrom(const ActionControlGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionControlGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      control_group_index_ = from.control_group_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionControlGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionControlGroup::CopyFrom(const ActionControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionControlGroup::IsInitialized() const {
  return true;
}

void ActionControlGroup::Swap(ActionControlGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionControlGroup::InternalSwap(ActionControlGroup* other) {
  using std::swap;
  swap(control_group_index_, other->control_group_index_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionControlGroup::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSelectArmy::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectArmy::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectArmy::ActionSelectArmy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionSelectArmy.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSelectArmy)
}
ActionSelectArmy::ActionSelectArmy(const ActionSelectArmy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selection_add_ = from.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSelectArmy)
}

void ActionSelectArmy::SharedCtor() {
  selection_add_ = false;
}

ActionSelectArmy::~ActionSelectArmy() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSelectArmy)
  SharedDtor();
}

void ActionSelectArmy::SharedDtor() {
}

void ActionSelectArmy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSelectArmy::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSelectArmy& ActionSelectArmy::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionSelectArmy.base);
  return *internal_default_instance();
}


void ActionSelectArmy::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSelectArmy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_add_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSelectArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSelectArmy)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool selection_add = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_selection_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSelectArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSelectArmy)
  return false;
#undef DO_
}

void ActionSelectArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSelectArmy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSelectArmy)
}

::google::protobuf::uint8* ActionSelectArmy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSelectArmy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSelectArmy)
  return target;
}

size_t ActionSelectArmy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSelectArmy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSelectArmy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSelectArmy)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSelectArmy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectArmy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSelectArmy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSelectArmy)
    MergeFrom(*source);
  }
}

void ActionSelectArmy::MergeFrom(const ActionSelectArmy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSelectArmy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selection_add()) {
    set_selection_add(from.selection_add());
  }
}

void ActionSelectArmy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSelectArmy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectArmy::CopyFrom(const ActionSelectArmy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSelectArmy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectArmy::IsInitialized() const {
  return true;
}

void ActionSelectArmy::Swap(ActionSelectArmy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectArmy::InternalSwap(ActionSelectArmy* other) {
  using std::swap;
  swap(selection_add_, other->selection_add_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSelectArmy::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSelectWarpGates::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectWarpGates::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectWarpGates::ActionSelectWarpGates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionSelectWarpGates.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSelectWarpGates)
}
ActionSelectWarpGates::ActionSelectWarpGates(const ActionSelectWarpGates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selection_add_ = from.selection_add_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSelectWarpGates)
}

void ActionSelectWarpGates::SharedCtor() {
  selection_add_ = false;
}

ActionSelectWarpGates::~ActionSelectWarpGates() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSelectWarpGates)
  SharedDtor();
}

void ActionSelectWarpGates::SharedDtor() {
}

void ActionSelectWarpGates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSelectWarpGates::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSelectWarpGates& ActionSelectWarpGates::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionSelectWarpGates.base);
  return *internal_default_instance();
}


void ActionSelectWarpGates::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSelectWarpGates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  selection_add_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSelectWarpGates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSelectWarpGates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool selection_add = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_selection_add();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSelectWarpGates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSelectWarpGates)
  return false;
#undef DO_
}

void ActionSelectWarpGates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSelectWarpGates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSelectWarpGates)
}

::google::protobuf::uint8* ActionSelectWarpGates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSelectWarpGates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool selection_add = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSelectWarpGates)
  return target;
}

size_t ActionSelectWarpGates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSelectWarpGates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSelectWarpGates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSelectWarpGates)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSelectWarpGates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectWarpGates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSelectWarpGates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSelectWarpGates)
    MergeFrom(*source);
  }
}

void ActionSelectWarpGates::MergeFrom(const ActionSelectWarpGates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSelectWarpGates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selection_add()) {
    set_selection_add(from.selection_add());
  }
}

void ActionSelectWarpGates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSelectWarpGates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectWarpGates::CopyFrom(const ActionSelectWarpGates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSelectWarpGates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectWarpGates::IsInitialized() const {
  return true;
}

void ActionSelectWarpGates::Swap(ActionSelectWarpGates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectWarpGates::InternalSwap(ActionSelectWarpGates* other) {
  using std::swap;
  swap(selection_add_, other->selection_add_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSelectWarpGates::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSelectLarva::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectLarva::ActionSelectLarva()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionSelectLarva.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSelectLarva)
}
ActionSelectLarva::ActionSelectLarva(const ActionSelectLarva& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSelectLarva)
}

void ActionSelectLarva::SharedCtor() {
}

ActionSelectLarva::~ActionSelectLarva() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSelectLarva)
  SharedDtor();
}

void ActionSelectLarva::SharedDtor() {
}

void ActionSelectLarva::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSelectLarva::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSelectLarva& ActionSelectLarva::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionSelectLarva.base);
  return *internal_default_instance();
}


void ActionSelectLarva::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSelectLarva)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSelectLarva::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSelectLarva)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSelectLarva)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSelectLarva)
  return false;
#undef DO_
}

void ActionSelectLarva::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSelectLarva)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSelectLarva)
}

::google::protobuf::uint8* ActionSelectLarva::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSelectLarva)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSelectLarva)
  return target;
}

size_t ActionSelectLarva::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSelectLarva)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSelectLarva::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSelectLarva)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSelectLarva* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectLarva>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSelectLarva)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSelectLarva)
    MergeFrom(*source);
  }
}

void ActionSelectLarva::MergeFrom(const ActionSelectLarva& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSelectLarva)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActionSelectLarva::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSelectLarva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectLarva::CopyFrom(const ActionSelectLarva& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSelectLarva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectLarva::IsInitialized() const {
  return true;
}

void ActionSelectLarva::Swap(ActionSelectLarva* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectLarva::InternalSwap(ActionSelectLarva* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSelectLarva::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionSelectIdleWorker::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectIdleWorker::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectIdleWorker::ActionSelectIdleWorker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionSelectIdleWorker.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionSelectIdleWorker)
}
ActionSelectIdleWorker::ActionSelectIdleWorker(const ActionSelectIdleWorker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionSelectIdleWorker)
}

void ActionSelectIdleWorker::SharedCtor() {
  type_ = 1;
}

ActionSelectIdleWorker::~ActionSelectIdleWorker() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionSelectIdleWorker)
  SharedDtor();
}

void ActionSelectIdleWorker::SharedDtor() {
}

void ActionSelectIdleWorker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionSelectIdleWorker::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionSelectIdleWorker& ActionSelectIdleWorker::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionSelectIdleWorker.base);
  return *internal_default_instance();
}


void ActionSelectIdleWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionSelectIdleWorker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionSelectIdleWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionSelectIdleWorker)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionSelectIdleWorker.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::ActionSelectIdleWorker_Type_IsValid(value)) {
            set_type(static_cast< ::SCRAPIProtocol::ActionSelectIdleWorker_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionSelectIdleWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionSelectIdleWorker)
  return false;
#undef DO_
}

void ActionSelectIdleWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionSelectIdleWorker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionSelectIdleWorker)
}

::google::protobuf::uint8* ActionSelectIdleWorker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionSelectIdleWorker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionSelectIdleWorker)
  return target;
}

size_t ActionSelectIdleWorker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionSelectIdleWorker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SCRAPIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSelectIdleWorker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionSelectIdleWorker)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSelectIdleWorker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectIdleWorker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionSelectIdleWorker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionSelectIdleWorker)
    MergeFrom(*source);
  }
}

void ActionSelectIdleWorker::MergeFrom(const ActionSelectIdleWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionSelectIdleWorker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
}

void ActionSelectIdleWorker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionSelectIdleWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectIdleWorker::CopyFrom(const ActionSelectIdleWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionSelectIdleWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectIdleWorker::IsInitialized() const {
  return true;
}

void ActionSelectIdleWorker::Swap(ActionSelectIdleWorker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectIdleWorker::InternalSwap(ActionSelectIdleWorker* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionSelectIdleWorker::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionMultiPanel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionMultiPanel::kTypeFieldNumber;
const int ActionMultiPanel::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionMultiPanel::ActionMultiPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionMultiPanel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionMultiPanel)
}
ActionMultiPanel::ActionMultiPanel(const ActionMultiPanel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_index_, &from.unit_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&unit_index_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionMultiPanel)
}

void ActionMultiPanel::SharedCtor() {
  unit_index_ = 0;
  type_ = 1;
}

ActionMultiPanel::~ActionMultiPanel() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionMultiPanel)
  SharedDtor();
}

void ActionMultiPanel::SharedDtor() {
}

void ActionMultiPanel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionMultiPanel::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionMultiPanel& ActionMultiPanel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionMultiPanel.base);
  return *internal_default_instance();
}


void ActionMultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionMultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    unit_index_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionMultiPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionMultiPanel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SCRAPIProtocol.ActionMultiPanel.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SCRAPIProtocol::ActionMultiPanel_Type_IsValid(value)) {
            set_type(static_cast< ::SCRAPIProtocol::ActionMultiPanel_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 unit_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_unit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionMultiPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionMultiPanel)
  return false;
#undef DO_
}

void ActionMultiPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionMultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionMultiPanel.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 unit_index = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionMultiPanel)
}

::google::protobuf::uint8* ActionMultiPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionMultiPanel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SCRAPIProtocol.ActionMultiPanel.Type type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 unit_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionMultiPanel)
  return target;
}

size_t ActionMultiPanel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionMultiPanel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_index());
    }

    // optional .SCRAPIProtocol.ActionMultiPanel.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionMultiPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionMultiPanel)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionMultiPanel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionMultiPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionMultiPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionMultiPanel)
    MergeFrom(*source);
  }
}

void ActionMultiPanel::MergeFrom(const ActionMultiPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionMultiPanel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      unit_index_ = from.unit_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionMultiPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionMultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionMultiPanel::CopyFrom(const ActionMultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionMultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionMultiPanel::IsInitialized() const {
  return true;
}

void ActionMultiPanel::Swap(ActionMultiPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionMultiPanel::InternalSwap(ActionMultiPanel* other) {
  using std::swap;
  swap(unit_index_, other->unit_index_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionMultiPanel::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionCargoPanelUnload::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionCargoPanelUnload::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionCargoPanelUnload::ActionCargoPanelUnload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionCargoPanelUnload.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionCargoPanelUnload)
}
ActionCargoPanelUnload::ActionCargoPanelUnload(const ActionCargoPanelUnload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_index_ = from.unit_index_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionCargoPanelUnload)
}

void ActionCargoPanelUnload::SharedCtor() {
  unit_index_ = 0;
}

ActionCargoPanelUnload::~ActionCargoPanelUnload() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionCargoPanelUnload)
  SharedDtor();
}

void ActionCargoPanelUnload::SharedDtor() {
}

void ActionCargoPanelUnload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionCargoPanelUnload::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionCargoPanelUnload& ActionCargoPanelUnload::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionCargoPanelUnload.base);
  return *internal_default_instance();
}


void ActionCargoPanelUnload::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionCargoPanelUnload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionCargoPanelUnload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionCargoPanelUnload)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionCargoPanelUnload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionCargoPanelUnload)
  return false;
#undef DO_
}

void ActionCargoPanelUnload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionCargoPanelUnload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionCargoPanelUnload)
}

::google::protobuf::uint8* ActionCargoPanelUnload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionCargoPanelUnload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionCargoPanelUnload)
  return target;
}

size_t ActionCargoPanelUnload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionCargoPanelUnload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unit_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionCargoPanelUnload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionCargoPanelUnload)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionCargoPanelUnload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionCargoPanelUnload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionCargoPanelUnload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionCargoPanelUnload)
    MergeFrom(*source);
  }
}

void ActionCargoPanelUnload::MergeFrom(const ActionCargoPanelUnload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionCargoPanelUnload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unit_index()) {
    set_unit_index(from.unit_index());
  }
}

void ActionCargoPanelUnload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionCargoPanelUnload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCargoPanelUnload::CopyFrom(const ActionCargoPanelUnload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionCargoPanelUnload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCargoPanelUnload::IsInitialized() const {
  return true;
}

void ActionCargoPanelUnload::Swap(ActionCargoPanelUnload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionCargoPanelUnload::InternalSwap(ActionCargoPanelUnload* other) {
  using std::swap;
  swap(unit_index_, other->unit_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionCargoPanelUnload::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionProductionPanelRemoveFromQueue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProductionPanelRemoveFromQueue::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionProductionPanelRemoveFromQueue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
}
ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue(const ActionProductionPanelRemoveFromQueue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_index_ = from.unit_index_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
}

void ActionProductionPanelRemoveFromQueue::SharedCtor() {
  unit_index_ = 0;
}

ActionProductionPanelRemoveFromQueue::~ActionProductionPanelRemoveFromQueue() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  SharedDtor();
}

void ActionProductionPanelRemoveFromQueue::SharedDtor() {
}

void ActionProductionPanelRemoveFromQueue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionProductionPanelRemoveFromQueue::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionProductionPanelRemoveFromQueue& ActionProductionPanelRemoveFromQueue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionProductionPanelRemoveFromQueue.base);
  return *internal_default_instance();
}


void ActionProductionPanelRemoveFromQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionProductionPanelRemoveFromQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  return false;
#undef DO_
}

void ActionProductionPanelRemoveFromQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
}

::google::protobuf::uint8* ActionProductionPanelRemoveFromQueue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  return target;
}

size_t ActionProductionPanelRemoveFromQueue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unit_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionProductionPanelRemoveFromQueue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProductionPanelRemoveFromQueue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProductionPanelRemoveFromQueue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
    MergeFrom(*source);
  }
}

void ActionProductionPanelRemoveFromQueue::MergeFrom(const ActionProductionPanelRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unit_index()) {
    set_unit_index(from.unit_index());
  }
}

void ActionProductionPanelRemoveFromQueue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProductionPanelRemoveFromQueue::CopyFrom(const ActionProductionPanelRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionProductionPanelRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProductionPanelRemoveFromQueue::IsInitialized() const {
  return true;
}

void ActionProductionPanelRemoveFromQueue::Swap(ActionProductionPanelRemoveFromQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProductionPanelRemoveFromQueue::InternalSwap(ActionProductionPanelRemoveFromQueue* other) {
  using std::swap;
  swap(unit_index_, other->unit_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionProductionPanelRemoveFromQueue::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionToggleAutocast::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionToggleAutocast::kAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionToggleAutocast::ActionToggleAutocast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ui_2eproto::scc_info_ActionToggleAutocast.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SCRAPIProtocol.ActionToggleAutocast)
}
ActionToggleAutocast::ActionToggleAutocast(const ActionToggleAutocast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ability_id_ = from.ability_id_;
  // @@protoc_insertion_point(copy_constructor:SCRAPIProtocol.ActionToggleAutocast)
}

void ActionToggleAutocast::SharedCtor() {
  ability_id_ = 0;
}

ActionToggleAutocast::~ActionToggleAutocast() {
  // @@protoc_insertion_point(destructor:SCRAPIProtocol.ActionToggleAutocast)
  SharedDtor();
}

void ActionToggleAutocast::SharedDtor() {
}

void ActionToggleAutocast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionToggleAutocast::descriptor() {
  ::protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionToggleAutocast& ActionToggleAutocast::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ui_2eproto::scc_info_ActionToggleAutocast.base);
  return *internal_default_instance();
}


void ActionToggleAutocast::Clear() {
// @@protoc_insertion_point(message_clear_start:SCRAPIProtocol.ActionToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionToggleAutocast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SCRAPIProtocol.ActionToggleAutocast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SCRAPIProtocol.ActionToggleAutocast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SCRAPIProtocol.ActionToggleAutocast)
  return false;
#undef DO_
}

void ActionToggleAutocast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SCRAPIProtocol.ActionToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SCRAPIProtocol.ActionToggleAutocast)
}

::google::protobuf::uint8* ActionToggleAutocast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SCRAPIProtocol.ActionToggleAutocast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SCRAPIProtocol.ActionToggleAutocast)
  return target;
}

size_t ActionToggleAutocast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SCRAPIProtocol.ActionToggleAutocast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ability_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionToggleAutocast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SCRAPIProtocol.ActionToggleAutocast)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionToggleAutocast* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionToggleAutocast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SCRAPIProtocol.ActionToggleAutocast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SCRAPIProtocol.ActionToggleAutocast)
    MergeFrom(*source);
  }
}

void ActionToggleAutocast::MergeFrom(const ActionToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SCRAPIProtocol.ActionToggleAutocast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ability_id()) {
    set_ability_id(from.ability_id());
  }
}

void ActionToggleAutocast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SCRAPIProtocol.ActionToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionToggleAutocast::CopyFrom(const ActionToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SCRAPIProtocol.ActionToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionToggleAutocast::IsInitialized() const {
  return true;
}

void ActionToggleAutocast::Swap(ActionToggleAutocast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionToggleAutocast::InternalSwap(ActionToggleAutocast* other) {
  using std::swap;
  swap(ability_id_, other->ability_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionToggleAutocast::GetMetadata() const {
  protobuf_ui_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ui_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SCRAPIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ObservationUI* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ObservationUI >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ObservationUI >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ControlGroup* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ControlGroup >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ControlGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::UnitInfo* Arena::CreateMaybeMessage< ::SCRAPIProtocol::UnitInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::UnitInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::SinglePanel* Arena::CreateMaybeMessage< ::SCRAPIProtocol::SinglePanel >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::SinglePanel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::MultiPanel* Arena::CreateMaybeMessage< ::SCRAPIProtocol::MultiPanel >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::MultiPanel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::CargoPanel* Arena::CreateMaybeMessage< ::SCRAPIProtocol::CargoPanel >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::CargoPanel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ProductionPanel* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ProductionPanel >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ProductionPanel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionUI* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionUI >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionUI >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionControlGroup* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionControlGroup >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionControlGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSelectArmy* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSelectArmy >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSelectArmy >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSelectWarpGates* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSelectWarpGates >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSelectWarpGates >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSelectLarva* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSelectLarva >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSelectLarva >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionSelectIdleWorker* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionSelectIdleWorker >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionSelectIdleWorker >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionMultiPanel* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionMultiPanel >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionMultiPanel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionCargoPanelUnload* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionCargoPanelUnload >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionCargoPanelUnload >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionProductionPanelRemoveFromQueue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SCRAPIProtocol::ActionToggleAutocast* Arena::CreateMaybeMessage< ::SCRAPIProtocol::ActionToggleAutocast >(Arena* arena) {
  return Arena::CreateInternal< ::SCRAPIProtocol::ActionToggleAutocast >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
